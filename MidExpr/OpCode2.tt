<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>// generated by template, do not modify manually

<#
    var regs = 8; // 8 vector128

    var calc_ops = new[] { "Add", "Sub", "Mul", "Div" };
    var cmp_ops = new[] { "eq", "ne", "lt", "gt", "le", "ge" };
    var sigs = new[] { "I", "U" };
    var i_sizes = new[] { "1", "2", "4", "8" };
    var f_sizes = new[] { "4", "8" };
#>
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace MidExpr;

public enum OpCode2 : ushort
{
    Nop,

    Ret,

    Call,

<#
    for (var i = 0; i < regs; i++)
    {
#>
    LdNull_R<#= i #>,
<#
    }
#>
<#
    for (var i = 0; i < regs; i++)
    {
#>

    Ldc_R<#= i #>_I4_M1,
    Ldc_R<#= i #>_I4_0,
    Ldc_R<#= i #>_I4_1,
    Ldc_R<#= i #>_I4_2,
    Ldc_R<#= i #>_I4_3,
    Ldc_R<#= i #>_I4_5,

    Ldc_R<#= i #>_F4_1,
    Ldc_R<#= i #>_F4_M1,
    Ldc_R<#= i #>_F4_2,
    Ldc_R<#= i #>_F4_05, // 0.5
    Ldc_R<#= i #>_F4_M05, // -0.5

    Ldc_R<#= i #>_X4, // <op> <4 byte value>
    Ldc_R<#= i #>_X8, // <op> <8 byte value>
<#
    }
#>

<#
    for (var i = 0; i < regs; i++)
    {
        foreach (var size in i_sizes)
        {
#>
    LdLoc_R<#= i #>_X<#= size #>, // <op> <u2 offset (4 byte step)>
<#
        }
    }
#>

<#
    for (var i = 0; i < regs; i++)
    {
        foreach (var size in i_sizes)
        {
#>
    StLoc_R<#= i #>_X<#= size #>, // <op> <u2 offset (4 byte step)>
<#
        }
    }
#>

<#
    for (var i = 0; i < regs; i++)
    {
#>
    LdLocA_R<#= i #>, // <op> <u2 offset (4 byte step)>
<#
    }
#>

<#
    for (var d = 0; d < regs; d++)
    {
        for (var s = 0; s < regs; s++)
        {
            foreach (var size in i_sizes)
            {
#>
    LdInd_R<#= d #>_R<#= s #>_X<#= size #>,
<#
            }
        }
    }
#>

<#
    for (var d = 0; d < regs; d++)
    {
        for (var s = 0; s < regs; s++)
        {
            foreach (var size in i_sizes)
            {
#>
    StInd_R<#= d #>_R<#= s #>_X<#= size #>,
<#
            }
        }
    }
#>

<#
    for (var i = 0; i < regs; i++)
    {
        foreach (var size in f_sizes)
        {
#>
    Push_R<#= i #>_X<#= size #>,
<#
        }
    }
#>

<#
    for (var i = 0; i < regs; i++)
    {
        foreach (var size in i_sizes)
        {
#>
    Pop_R<#= i #>_X<#= size #>,
<#
        }
    }
#>

<#
    for (var d = 0; d < regs; d++)
    {
        for (var s = 0; s < regs; s++)
        {
            foreach (var size in i_sizes)
            {
#>
    Mov_R<#= d #>_R<#= s #>_X<#= size #>,
<#
            }
        }
    }
#>

<#
    foreach (var sig in sigs)
    {
        foreach (var size in i_sizes)
        {
            foreach (var calc in calc_ops)
            {
#>

<#
                for (var d = 0; d < regs; d++)
                {
                    for (var s = 0; s < regs; s++)
                    {
#>
    <#= calc #><#= sig #>_R<#= d #>_R<#= s #>_X<#= size #>,
<#
                    }
                }
            }
        }
    }
#>
<#
    foreach (var size in f_sizes)
    {
        foreach (var calc in calc_ops)
        {
#>

<#
            for (var d = 0; d < regs; d++)
            {
                for (var s = 0; s < regs; s++)
                {
#>
    <#= calc #>F_R<#= d #>_R<#= s #>_X<#= size #>,
<#
                }
            }
        }
    }
#>

    Br, // <op> <u2 op offset>

<#
    for (var d = 0; d < regs; d++)
    {
#>
    BTrue_R<#= d #>, // <op> <u2 op offset>
<#
    }
#>

<#
    for (var d = 0; d < regs; d++)
    {
#>
    BFalse_R<#= d #>, // <op> <u2 op offset>
<#
    }
#>
<#
    foreach (var cmp in cmp_ops)
    {
#>

<#
        for (var d = 0; d < regs; d++)
        {
            for (var s = 0; s < regs; s++)
            {
#>
    B<#= cmp #>I_R<#= d #>_R<#= s #>, // <op> <u2 op offset>
<#
            }
        }
    }
#>
<#
    foreach (var size in f_sizes)
    {
        foreach (var cmp in cmp_ops)
        {
#>

<#
            for (var d = 0; d < regs; d++)
            {
                for (var s = 0; s < regs; s++)
                {
#>
    B<#= cmp #>F<#= size #>_R<#= d #>_R<#= s #>, // <op> <u2 op offset>
<#
                }
            }
        }
    }
#>
}
