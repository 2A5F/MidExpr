// generated by template, do not modify manually

// ReSharper disable CppRedundantCastExpression
// ReSharper disable CppIdenticalOperandsInBinaryExpression
#include "Interpreter.h"

using namespace Coplt;

void Coplt::Coplt_MidInterpreter_Exec(
    const MidFunc* root_func,
    MidRegs* regs,
    char* stack_data,
    MidFrame* stack_frames,
    uint32_t stack_data_len,
    uint32_t stack_frames_len
)
{
    auto r0 = regs->r0;
    auto r1 = regs->r1;
    auto r2 = regs->r2;
    auto r3 = regs->r3;
    auto r4 = regs->r4;
    auto r5 = regs->r5;
    auto r6 = regs->r6;
    auto r7 = regs->r7;

    auto func = root_func;
    auto frames = stack_frames;
    auto stack = stack_data;
    auto calc_stack = stack + func->m_all_local_size;
    auto frame_count = 0u;
    auto code_offset = 0u;

Re:
    auto p_code = func->m_code.data();
    auto code = p_code + code_offset;
Next:
    // ReSharper disable once CppDefaultCaseNotHandledInSwitchStatement
    // ReSharper disable once CppIncompleteSwitchStatement
    switch (static_cast<OpCode>(*code))
    {
        case OpCode::Nop: code++; goto Next;

        case OpCode::Ret:
        {
            if (frame_count == 0) goto Ret;
            auto& frame = frames[--frame_count];
            func = frame.m_func;
            stack = frame.m_p_stack;
            calc_stack = frame.m_p_calc_stack;
            code_offset = frame.m_code_offset;
            goto Re;
        }

        case OpCode::Call:
        {
            auto& frame = frames[frame_count++];
            frame.m_func = func;
            frame.m_p_stack = stack;
            frame.m_p_calc_stack = calc_stack;
            frame.m_code_offset = static_cast<uint32_t>(code - p_code + 2);
            func = func->m_fns.data()[*(code + 1)]; // NOLINT(*-simplify-subscript-expr)
            code_offset = 0;
            goto Re;
        }

        case OpCode::LdNull_R0: r0 = reg_ld(0zu); code++; goto Next;
        case OpCode::LdNull_R1: r1 = reg_ld(0zu); code++; goto Next;
        case OpCode::LdNull_R2: r2 = reg_ld(0zu); code++; goto Next;
        case OpCode::LdNull_R3: r3 = reg_ld(0zu); code++; goto Next;
        case OpCode::LdNull_R4: r4 = reg_ld(0zu); code++; goto Next;
        case OpCode::LdNull_R5: r5 = reg_ld(0zu); code++; goto Next;
        case OpCode::LdNull_R6: r6 = reg_ld(0zu); code++; goto Next;
        case OpCode::LdNull_R7: r7 = reg_ld(0zu); code++; goto Next;

        case OpCode::Ldc_R0_I4_M1:
            r0 = reg_ld(-1); code++; goto Next;
        case OpCode::Ldc_R0_I4_0:
            r0 = reg_ld(0); code++; goto Next;
        case OpCode::Ldc_R0_I4_1:
            r0 = reg_ld(1); code++; goto Next;
        case OpCode::Ldc_R0_I4_2:
            r0 = reg_ld(2); code++; goto Next;
        case OpCode::Ldc_R0_I4_3:
            r0 = reg_ld(3); code++; goto Next;
        case OpCode::Ldc_R0_I4_5:
            r0 = reg_ld(5); code++; goto Next;

        case OpCode::Ldc_R0_F4_1:
            r0 = reg_ld(1.0f); code++; goto Next;
        case OpCode::Ldc_R0_F4_M1:
            r0 = reg_ld(-1.0f); code++; goto Next;
        case OpCode::Ldc_R0_F4_2:
            r0 = reg_ld(.0f); code++; goto Next;
        case OpCode::Ldc_R0_F4_05: // 0.5
            r0 = reg_ld(0.5f); code++; goto Next;
        case OpCode::Ldc_R0_F4_M05: // -0.5
            r0 = reg_ld(-0.5f); code++; goto Next;

        case OpCode::Ldc_R0_X4: // <op> <4 byte value>
            r0 = reg_ld(*reinterpret_cast<const int32_t*>(code + 1)); code += 3; goto Next;
        case OpCode::Ldc_R0_X8: // <op> <8 byte value>
            r0 = reg_ld(*reinterpret_cast<const int64_t*>(code + 1)); code += 5; goto Next;

        case OpCode::Ldc_R1_I4_M1:
            r1 = reg_ld(-1); code++; goto Next;
        case OpCode::Ldc_R1_I4_0:
            r1 = reg_ld(0); code++; goto Next;
        case OpCode::Ldc_R1_I4_1:
            r1 = reg_ld(1); code++; goto Next;
        case OpCode::Ldc_R1_I4_2:
            r1 = reg_ld(2); code++; goto Next;
        case OpCode::Ldc_R1_I4_3:
            r1 = reg_ld(3); code++; goto Next;
        case OpCode::Ldc_R1_I4_5:
            r1 = reg_ld(5); code++; goto Next;

        case OpCode::Ldc_R1_F4_1:
            r1 = reg_ld(1.0f); code++; goto Next;
        case OpCode::Ldc_R1_F4_M1:
            r1 = reg_ld(-1.0f); code++; goto Next;
        case OpCode::Ldc_R1_F4_2:
            r1 = reg_ld(.0f); code++; goto Next;
        case OpCode::Ldc_R1_F4_05: // 0.5
            r1 = reg_ld(0.5f); code++; goto Next;
        case OpCode::Ldc_R1_F4_M05: // -0.5
            r1 = reg_ld(-0.5f); code++; goto Next;

        case OpCode::Ldc_R1_X4: // <op> <4 byte value>
            r1 = reg_ld(*reinterpret_cast<const int32_t*>(code + 1)); code += 3; goto Next;
        case OpCode::Ldc_R1_X8: // <op> <8 byte value>
            r1 = reg_ld(*reinterpret_cast<const int64_t*>(code + 1)); code += 5; goto Next;

        case OpCode::Ldc_R2_I4_M1:
            r2 = reg_ld(-1); code++; goto Next;
        case OpCode::Ldc_R2_I4_0:
            r2 = reg_ld(0); code++; goto Next;
        case OpCode::Ldc_R2_I4_1:
            r2 = reg_ld(1); code++; goto Next;
        case OpCode::Ldc_R2_I4_2:
            r2 = reg_ld(2); code++; goto Next;
        case OpCode::Ldc_R2_I4_3:
            r2 = reg_ld(3); code++; goto Next;
        case OpCode::Ldc_R2_I4_5:
            r2 = reg_ld(5); code++; goto Next;

        case OpCode::Ldc_R2_F4_1:
            r2 = reg_ld(1.0f); code++; goto Next;
        case OpCode::Ldc_R2_F4_M1:
            r2 = reg_ld(-1.0f); code++; goto Next;
        case OpCode::Ldc_R2_F4_2:
            r2 = reg_ld(.0f); code++; goto Next;
        case OpCode::Ldc_R2_F4_05: // 0.5
            r2 = reg_ld(0.5f); code++; goto Next;
        case OpCode::Ldc_R2_F4_M05: // -0.5
            r2 = reg_ld(-0.5f); code++; goto Next;

        case OpCode::Ldc_R2_X4: // <op> <4 byte value>
            r2 = reg_ld(*reinterpret_cast<const int32_t*>(code + 1)); code += 3; goto Next;
        case OpCode::Ldc_R2_X8: // <op> <8 byte value>
            r2 = reg_ld(*reinterpret_cast<const int64_t*>(code + 1)); code += 5; goto Next;

        case OpCode::Ldc_R3_I4_M1:
            r3 = reg_ld(-1); code++; goto Next;
        case OpCode::Ldc_R3_I4_0:
            r3 = reg_ld(0); code++; goto Next;
        case OpCode::Ldc_R3_I4_1:
            r3 = reg_ld(1); code++; goto Next;
        case OpCode::Ldc_R3_I4_2:
            r3 = reg_ld(2); code++; goto Next;
        case OpCode::Ldc_R3_I4_3:
            r3 = reg_ld(3); code++; goto Next;
        case OpCode::Ldc_R3_I4_5:
            r3 = reg_ld(5); code++; goto Next;

        case OpCode::Ldc_R3_F4_1:
            r3 = reg_ld(1.0f); code++; goto Next;
        case OpCode::Ldc_R3_F4_M1:
            r3 = reg_ld(-1.0f); code++; goto Next;
        case OpCode::Ldc_R3_F4_2:
            r3 = reg_ld(.0f); code++; goto Next;
        case OpCode::Ldc_R3_F4_05: // 0.5
            r3 = reg_ld(0.5f); code++; goto Next;
        case OpCode::Ldc_R3_F4_M05: // -0.5
            r3 = reg_ld(-0.5f); code++; goto Next;

        case OpCode::Ldc_R3_X4: // <op> <4 byte value>
            r3 = reg_ld(*reinterpret_cast<const int32_t*>(code + 1)); code += 3; goto Next;
        case OpCode::Ldc_R3_X8: // <op> <8 byte value>
            r3 = reg_ld(*reinterpret_cast<const int64_t*>(code + 1)); code += 5; goto Next;

        case OpCode::Ldc_R4_I4_M1:
            r4 = reg_ld(-1); code++; goto Next;
        case OpCode::Ldc_R4_I4_0:
            r4 = reg_ld(0); code++; goto Next;
        case OpCode::Ldc_R4_I4_1:
            r4 = reg_ld(1); code++; goto Next;
        case OpCode::Ldc_R4_I4_2:
            r4 = reg_ld(2); code++; goto Next;
        case OpCode::Ldc_R4_I4_3:
            r4 = reg_ld(3); code++; goto Next;
        case OpCode::Ldc_R4_I4_5:
            r4 = reg_ld(5); code++; goto Next;

        case OpCode::Ldc_R4_F4_1:
            r4 = reg_ld(1.0f); code++; goto Next;
        case OpCode::Ldc_R4_F4_M1:
            r4 = reg_ld(-1.0f); code++; goto Next;
        case OpCode::Ldc_R4_F4_2:
            r4 = reg_ld(.0f); code++; goto Next;
        case OpCode::Ldc_R4_F4_05: // 0.5
            r4 = reg_ld(0.5f); code++; goto Next;
        case OpCode::Ldc_R4_F4_M05: // -0.5
            r4 = reg_ld(-0.5f); code++; goto Next;

        case OpCode::Ldc_R4_X4: // <op> <4 byte value>
            r4 = reg_ld(*reinterpret_cast<const int32_t*>(code + 1)); code += 3; goto Next;
        case OpCode::Ldc_R4_X8: // <op> <8 byte value>
            r4 = reg_ld(*reinterpret_cast<const int64_t*>(code + 1)); code += 5; goto Next;

        case OpCode::Ldc_R5_I4_M1:
            r5 = reg_ld(-1); code++; goto Next;
        case OpCode::Ldc_R5_I4_0:
            r5 = reg_ld(0); code++; goto Next;
        case OpCode::Ldc_R5_I4_1:
            r5 = reg_ld(1); code++; goto Next;
        case OpCode::Ldc_R5_I4_2:
            r5 = reg_ld(2); code++; goto Next;
        case OpCode::Ldc_R5_I4_3:
            r5 = reg_ld(3); code++; goto Next;
        case OpCode::Ldc_R5_I4_5:
            r5 = reg_ld(5); code++; goto Next;

        case OpCode::Ldc_R5_F4_1:
            r5 = reg_ld(1.0f); code++; goto Next;
        case OpCode::Ldc_R5_F4_M1:
            r5 = reg_ld(-1.0f); code++; goto Next;
        case OpCode::Ldc_R5_F4_2:
            r5 = reg_ld(.0f); code++; goto Next;
        case OpCode::Ldc_R5_F4_05: // 0.5
            r5 = reg_ld(0.5f); code++; goto Next;
        case OpCode::Ldc_R5_F4_M05: // -0.5
            r5 = reg_ld(-0.5f); code++; goto Next;

        case OpCode::Ldc_R5_X4: // <op> <4 byte value>
            r5 = reg_ld(*reinterpret_cast<const int32_t*>(code + 1)); code += 3; goto Next;
        case OpCode::Ldc_R5_X8: // <op> <8 byte value>
            r5 = reg_ld(*reinterpret_cast<const int64_t*>(code + 1)); code += 5; goto Next;

        case OpCode::Ldc_R6_I4_M1:
            r6 = reg_ld(-1); code++; goto Next;
        case OpCode::Ldc_R6_I4_0:
            r6 = reg_ld(0); code++; goto Next;
        case OpCode::Ldc_R6_I4_1:
            r6 = reg_ld(1); code++; goto Next;
        case OpCode::Ldc_R6_I4_2:
            r6 = reg_ld(2); code++; goto Next;
        case OpCode::Ldc_R6_I4_3:
            r6 = reg_ld(3); code++; goto Next;
        case OpCode::Ldc_R6_I4_5:
            r6 = reg_ld(5); code++; goto Next;

        case OpCode::Ldc_R6_F4_1:
            r6 = reg_ld(1.0f); code++; goto Next;
        case OpCode::Ldc_R6_F4_M1:
            r6 = reg_ld(-1.0f); code++; goto Next;
        case OpCode::Ldc_R6_F4_2:
            r6 = reg_ld(.0f); code++; goto Next;
        case OpCode::Ldc_R6_F4_05: // 0.5
            r6 = reg_ld(0.5f); code++; goto Next;
        case OpCode::Ldc_R6_F4_M05: // -0.5
            r6 = reg_ld(-0.5f); code++; goto Next;

        case OpCode::Ldc_R6_X4: // <op> <4 byte value>
            r6 = reg_ld(*reinterpret_cast<const int32_t*>(code + 1)); code += 3; goto Next;
        case OpCode::Ldc_R6_X8: // <op> <8 byte value>
            r6 = reg_ld(*reinterpret_cast<const int64_t*>(code + 1)); code += 5; goto Next;

        case OpCode::Ldc_R7_I4_M1:
            r7 = reg_ld(-1); code++; goto Next;
        case OpCode::Ldc_R7_I4_0:
            r7 = reg_ld(0); code++; goto Next;
        case OpCode::Ldc_R7_I4_1:
            r7 = reg_ld(1); code++; goto Next;
        case OpCode::Ldc_R7_I4_2:
            r7 = reg_ld(2); code++; goto Next;
        case OpCode::Ldc_R7_I4_3:
            r7 = reg_ld(3); code++; goto Next;
        case OpCode::Ldc_R7_I4_5:
            r7 = reg_ld(5); code++; goto Next;

        case OpCode::Ldc_R7_F4_1:
            r7 = reg_ld(1.0f); code++; goto Next;
        case OpCode::Ldc_R7_F4_M1:
            r7 = reg_ld(-1.0f); code++; goto Next;
        case OpCode::Ldc_R7_F4_2:
            r7 = reg_ld(.0f); code++; goto Next;
        case OpCode::Ldc_R7_F4_05: // 0.5
            r7 = reg_ld(0.5f); code++; goto Next;
        case OpCode::Ldc_R7_F4_M05: // -0.5
            r7 = reg_ld(-0.5f); code++; goto Next;

        case OpCode::Ldc_R7_X4: // <op> <4 byte value>
            r7 = reg_ld(*reinterpret_cast<const int32_t*>(code + 1)); code += 3; goto Next;
        case OpCode::Ldc_R7_X8: // <op> <8 byte value>
            r7 = reg_ld(*reinterpret_cast<const int64_t*>(code + 1)); code += 5; goto Next;

        case OpCode::LdLoc_R0_X1: // <op> <u2 offset (4 byte step)>
            r0 = reg_ld(static_cast<int8_t>(*reinterpret_cast<uint8_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R0_X2: // <op> <u2 offset (4 byte step)>
            r0 = reg_ld(static_cast<int16_t>(*reinterpret_cast<uint16_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R0_X4: // <op> <u2 offset (4 byte step)>
            r0 = reg_ld(static_cast<int32_t>(*reinterpret_cast<uint32_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R0_X8: // <op> <u2 offset (4 byte step)>
            r0 = reg_ld(static_cast<int64_t>(*reinterpret_cast<uint64_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R1_X1: // <op> <u2 offset (4 byte step)>
            r1 = reg_ld(static_cast<int8_t>(*reinterpret_cast<uint8_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R1_X2: // <op> <u2 offset (4 byte step)>
            r1 = reg_ld(static_cast<int16_t>(*reinterpret_cast<uint16_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R1_X4: // <op> <u2 offset (4 byte step)>
            r1 = reg_ld(static_cast<int32_t>(*reinterpret_cast<uint32_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R1_X8: // <op> <u2 offset (4 byte step)>
            r1 = reg_ld(static_cast<int64_t>(*reinterpret_cast<uint64_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R2_X1: // <op> <u2 offset (4 byte step)>
            r2 = reg_ld(static_cast<int8_t>(*reinterpret_cast<uint8_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R2_X2: // <op> <u2 offset (4 byte step)>
            r2 = reg_ld(static_cast<int16_t>(*reinterpret_cast<uint16_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R2_X4: // <op> <u2 offset (4 byte step)>
            r2 = reg_ld(static_cast<int32_t>(*reinterpret_cast<uint32_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R2_X8: // <op> <u2 offset (4 byte step)>
            r2 = reg_ld(static_cast<int64_t>(*reinterpret_cast<uint64_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R3_X1: // <op> <u2 offset (4 byte step)>
            r3 = reg_ld(static_cast<int8_t>(*reinterpret_cast<uint8_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R3_X2: // <op> <u2 offset (4 byte step)>
            r3 = reg_ld(static_cast<int16_t>(*reinterpret_cast<uint16_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R3_X4: // <op> <u2 offset (4 byte step)>
            r3 = reg_ld(static_cast<int32_t>(*reinterpret_cast<uint32_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R3_X8: // <op> <u2 offset (4 byte step)>
            r3 = reg_ld(static_cast<int64_t>(*reinterpret_cast<uint64_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R4_X1: // <op> <u2 offset (4 byte step)>
            r4 = reg_ld(static_cast<int8_t>(*reinterpret_cast<uint8_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R4_X2: // <op> <u2 offset (4 byte step)>
            r4 = reg_ld(static_cast<int16_t>(*reinterpret_cast<uint16_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R4_X4: // <op> <u2 offset (4 byte step)>
            r4 = reg_ld(static_cast<int32_t>(*reinterpret_cast<uint32_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R4_X8: // <op> <u2 offset (4 byte step)>
            r4 = reg_ld(static_cast<int64_t>(*reinterpret_cast<uint64_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R5_X1: // <op> <u2 offset (4 byte step)>
            r5 = reg_ld(static_cast<int8_t>(*reinterpret_cast<uint8_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R5_X2: // <op> <u2 offset (4 byte step)>
            r5 = reg_ld(static_cast<int16_t>(*reinterpret_cast<uint16_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R5_X4: // <op> <u2 offset (4 byte step)>
            r5 = reg_ld(static_cast<int32_t>(*reinterpret_cast<uint32_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R5_X8: // <op> <u2 offset (4 byte step)>
            r5 = reg_ld(static_cast<int64_t>(*reinterpret_cast<uint64_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R6_X1: // <op> <u2 offset (4 byte step)>
            r6 = reg_ld(static_cast<int8_t>(*reinterpret_cast<uint8_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R6_X2: // <op> <u2 offset (4 byte step)>
            r6 = reg_ld(static_cast<int16_t>(*reinterpret_cast<uint16_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R6_X4: // <op> <u2 offset (4 byte step)>
            r6 = reg_ld(static_cast<int32_t>(*reinterpret_cast<uint32_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R6_X8: // <op> <u2 offset (4 byte step)>
            r6 = reg_ld(static_cast<int64_t>(*reinterpret_cast<uint64_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R7_X1: // <op> <u2 offset (4 byte step)>
            r7 = reg_ld(static_cast<int8_t>(*reinterpret_cast<uint8_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R7_X2: // <op> <u2 offset (4 byte step)>
            r7 = reg_ld(static_cast<int16_t>(*reinterpret_cast<uint16_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R7_X4: // <op> <u2 offset (4 byte step)>
            r7 = reg_ld(static_cast<int32_t>(*reinterpret_cast<uint32_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;
        case OpCode::LdLoc_R7_X8: // <op> <u2 offset (4 byte step)>
            r7 = reg_ld(static_cast<int64_t>(*reinterpret_cast<uint64_t*>(stack + 4 * *(code + 1)))); code += 2; goto Next;

        case OpCode::LdLocA_R0: // <op> <u2 offset (4 byte step)>
            r0 = reg_ld(reinterpret_cast<size_t>(stack + 4 * *(code + 1))); code += 2; goto Next;
        case OpCode::LdLocA_R1: // <op> <u2 offset (4 byte step)>
            r1 = reg_ld(reinterpret_cast<size_t>(stack + 4 * *(code + 1))); code += 2; goto Next;
        case OpCode::LdLocA_R2: // <op> <u2 offset (4 byte step)>
            r2 = reg_ld(reinterpret_cast<size_t>(stack + 4 * *(code + 1))); code += 2; goto Next;
        case OpCode::LdLocA_R3: // <op> <u2 offset (4 byte step)>
            r3 = reg_ld(reinterpret_cast<size_t>(stack + 4 * *(code + 1))); code += 2; goto Next;
        case OpCode::LdLocA_R4: // <op> <u2 offset (4 byte step)>
            r4 = reg_ld(reinterpret_cast<size_t>(stack + 4 * *(code + 1))); code += 2; goto Next;
        case OpCode::LdLocA_R5: // <op> <u2 offset (4 byte step)>
            r5 = reg_ld(reinterpret_cast<size_t>(stack + 4 * *(code + 1))); code += 2; goto Next;
        case OpCode::LdLocA_R6: // <op> <u2 offset (4 byte step)>
            r6 = reg_ld(reinterpret_cast<size_t>(stack + 4 * *(code + 1))); code += 2; goto Next;
        case OpCode::LdLocA_R7: // <op> <u2 offset (4 byte step)>
            r7 = reg_ld(reinterpret_cast<size_t>(stack + 4 * *(code + 1))); code += 2; goto Next;

        case OpCode::LdInd_R0_R0_X1:
            r0 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R0_R0_X2:
            r0 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R0_R0_X4:
            r0 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R0_R0_X8:
            r0 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R0_R1_X1:
            r0 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R0_R1_X2:
            r0 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R0_R1_X4:
            r0 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R0_R1_X8:
            r0 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R0_R2_X1:
            r0 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R0_R2_X2:
            r0 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R0_R2_X4:
            r0 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R0_R2_X8:
            r0 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R0_R3_X1:
            r0 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R0_R3_X2:
            r0 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R0_R3_X4:
            r0 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R0_R3_X8:
            r0 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R0_R4_X1:
            r0 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R0_R4_X2:
            r0 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R0_R4_X4:
            r0 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R0_R4_X8:
            r0 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R0_R5_X1:
            r0 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R0_R5_X2:
            r0 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R0_R5_X4:
            r0 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R0_R5_X8:
            r0 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R0_R6_X1:
            r0 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R0_R6_X2:
            r0 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R0_R6_X4:
            r0 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R0_R6_X8:
            r0 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R0_R7_X1:
            r0 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R0_R7_X2:
            r0 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R0_R7_X4:
            r0 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R0_R7_X8:
            r0 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R1_R0_X1:
            r1 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R1_R0_X2:
            r1 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R1_R0_X4:
            r1 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R1_R0_X8:
            r1 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R1_R1_X1:
            r1 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R1_R1_X2:
            r1 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R1_R1_X4:
            r1 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R1_R1_X8:
            r1 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R1_R2_X1:
            r1 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R1_R2_X2:
            r1 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R1_R2_X4:
            r1 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R1_R2_X8:
            r1 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R1_R3_X1:
            r1 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R1_R3_X2:
            r1 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R1_R3_X4:
            r1 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R1_R3_X8:
            r1 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R1_R4_X1:
            r1 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R1_R4_X2:
            r1 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R1_R4_X4:
            r1 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R1_R4_X8:
            r1 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R1_R5_X1:
            r1 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R1_R5_X2:
            r1 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R1_R5_X4:
            r1 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R1_R5_X8:
            r1 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R1_R6_X1:
            r1 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R1_R6_X2:
            r1 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R1_R6_X4:
            r1 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R1_R6_X8:
            r1 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R1_R7_X1:
            r1 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R1_R7_X2:
            r1 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R1_R7_X4:
            r1 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R1_R7_X8:
            r1 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R2_R0_X1:
            r2 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R2_R0_X2:
            r2 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R2_R0_X4:
            r2 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R2_R0_X8:
            r2 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R2_R1_X1:
            r2 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R2_R1_X2:
            r2 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R2_R1_X4:
            r2 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R2_R1_X8:
            r2 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R2_R2_X1:
            r2 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R2_R2_X2:
            r2 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R2_R2_X4:
            r2 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R2_R2_X8:
            r2 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R2_R3_X1:
            r2 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R2_R3_X2:
            r2 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R2_R3_X4:
            r2 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R2_R3_X8:
            r2 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R2_R4_X1:
            r2 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R2_R4_X2:
            r2 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R2_R4_X4:
            r2 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R2_R4_X8:
            r2 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R2_R5_X1:
            r2 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R2_R5_X2:
            r2 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R2_R5_X4:
            r2 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R2_R5_X8:
            r2 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R2_R6_X1:
            r2 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R2_R6_X2:
            r2 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R2_R6_X4:
            r2 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R2_R6_X8:
            r2 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R2_R7_X1:
            r2 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R2_R7_X2:
            r2 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R2_R7_X4:
            r2 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R2_R7_X8:
            r2 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R3_R0_X1:
            r3 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R3_R0_X2:
            r3 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R3_R0_X4:
            r3 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R3_R0_X8:
            r3 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R3_R1_X1:
            r3 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R3_R1_X2:
            r3 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R3_R1_X4:
            r3 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R3_R1_X8:
            r3 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R3_R2_X1:
            r3 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R3_R2_X2:
            r3 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R3_R2_X4:
            r3 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R3_R2_X8:
            r3 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R3_R3_X1:
            r3 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R3_R3_X2:
            r3 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R3_R3_X4:
            r3 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R3_R3_X8:
            r3 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R3_R4_X1:
            r3 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R3_R4_X2:
            r3 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R3_R4_X4:
            r3 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R3_R4_X8:
            r3 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R3_R5_X1:
            r3 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R3_R5_X2:
            r3 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R3_R5_X4:
            r3 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R3_R5_X8:
            r3 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R3_R6_X1:
            r3 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R3_R6_X2:
            r3 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R3_R6_X4:
            r3 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R3_R6_X8:
            r3 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R3_R7_X1:
            r3 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R3_R7_X2:
            r3 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R3_R7_X4:
            r3 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R3_R7_X8:
            r3 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R4_R0_X1:
            r4 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R4_R0_X2:
            r4 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R4_R0_X4:
            r4 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R4_R0_X8:
            r4 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R4_R1_X1:
            r4 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R4_R1_X2:
            r4 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R4_R1_X4:
            r4 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R4_R1_X8:
            r4 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R4_R2_X1:
            r4 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R4_R2_X2:
            r4 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R4_R2_X4:
            r4 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R4_R2_X8:
            r4 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R4_R3_X1:
            r4 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R4_R3_X2:
            r4 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R4_R3_X4:
            r4 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R4_R3_X8:
            r4 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R4_R4_X1:
            r4 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R4_R4_X2:
            r4 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R4_R4_X4:
            r4 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R4_R4_X8:
            r4 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R4_R5_X1:
            r4 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R4_R5_X2:
            r4 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R4_R5_X4:
            r4 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R4_R5_X8:
            r4 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R4_R6_X1:
            r4 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R4_R6_X2:
            r4 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R4_R6_X4:
            r4 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R4_R6_X8:
            r4 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R4_R7_X1:
            r4 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R4_R7_X2:
            r4 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R4_R7_X4:
            r4 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R4_R7_X8:
            r4 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R5_R0_X1:
            r5 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R5_R0_X2:
            r5 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R5_R0_X4:
            r5 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R5_R0_X8:
            r5 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R5_R1_X1:
            r5 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R5_R1_X2:
            r5 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R5_R1_X4:
            r5 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R5_R1_X8:
            r5 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R5_R2_X1:
            r5 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R5_R2_X2:
            r5 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R5_R2_X4:
            r5 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R5_R2_X8:
            r5 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R5_R3_X1:
            r5 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R5_R3_X2:
            r5 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R5_R3_X4:
            r5 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R5_R3_X8:
            r5 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R5_R4_X1:
            r5 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R5_R4_X2:
            r5 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R5_R4_X4:
            r5 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R5_R4_X8:
            r5 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R5_R5_X1:
            r5 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R5_R5_X2:
            r5 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R5_R5_X4:
            r5 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R5_R5_X8:
            r5 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R5_R6_X1:
            r5 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R5_R6_X2:
            r5 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R5_R6_X4:
            r5 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R5_R6_X8:
            r5 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R5_R7_X1:
            r5 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R5_R7_X2:
            r5 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R5_R7_X4:
            r5 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R5_R7_X8:
            r5 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R6_R0_X1:
            r6 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R6_R0_X2:
            r6 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R6_R0_X4:
            r6 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R6_R0_X8:
            r6 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R6_R1_X1:
            r6 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R6_R1_X2:
            r6 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R6_R1_X4:
            r6 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R6_R1_X8:
            r6 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R6_R2_X1:
            r6 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R6_R2_X2:
            r6 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R6_R2_X4:
            r6 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R6_R2_X8:
            r6 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R6_R3_X1:
            r6 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R6_R3_X2:
            r6 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R6_R3_X4:
            r6 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R6_R3_X8:
            r6 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R6_R4_X1:
            r6 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R6_R4_X2:
            r6 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R6_R4_X4:
            r6 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R6_R4_X8:
            r6 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R6_R5_X1:
            r6 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R6_R5_X2:
            r6 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R6_R5_X4:
            r6 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R6_R5_X8:
            r6 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R6_R6_X1:
            r6 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R6_R6_X2:
            r6 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R6_R6_X4:
            r6 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R6_R6_X8:
            r6 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R6_R7_X1:
            r6 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R6_R7_X2:
            r6 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R6_R7_X4:
            r6 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R6_R7_X8:
            r6 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R7_R0_X1:
            r7 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R7_R0_X2:
            r7 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R7_R0_X4:
            r7 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R7_R0_X8:
            r7 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r0)))); code++; goto Next;
        case OpCode::LdInd_R7_R1_X1:
            r7 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R7_R1_X2:
            r7 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R7_R1_X4:
            r7 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R7_R1_X8:
            r7 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r1)))); code++; goto Next;
        case OpCode::LdInd_R7_R2_X1:
            r7 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R7_R2_X2:
            r7 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R7_R2_X4:
            r7 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R7_R2_X8:
            r7 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r2)))); code++; goto Next;
        case OpCode::LdInd_R7_R3_X1:
            r7 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R7_R3_X2:
            r7 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R7_R3_X4:
            r7 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R7_R3_X8:
            r7 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r3)))); code++; goto Next;
        case OpCode::LdInd_R7_R4_X1:
            r7 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R7_R4_X2:
            r7 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R7_R4_X4:
            r7 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R7_R4_X8:
            r7 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r4)))); code++; goto Next;
        case OpCode::LdInd_R7_R5_X1:
            r7 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R7_R5_X2:
            r7 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R7_R5_X4:
            r7 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R7_R5_X8:
            r7 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r5)))); code++; goto Next;
        case OpCode::LdInd_R7_R6_X1:
            r7 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R7_R6_X2:
            r7 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R7_R6_X4:
            r7 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R7_R6_X8:
            r7 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r6)))); code++; goto Next;
        case OpCode::LdInd_R7_R7_X1:
            r7 = reg_ld(static_cast<uint8_t>(*reinterpret_cast<uint8_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R7_R7_X2:
            r7 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R7_R7_X4:
            r7 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(reg_get_usize(r7)))); code++; goto Next;
        case OpCode::LdInd_R7_R7_X8:
            r7 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(reg_get_usize(r7)))); code++; goto Next;

        case OpCode::StInd_R0_R0_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r0)) = reg_get_u8(r0); code++; goto Next;
        case OpCode::StInd_R0_R0_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r0)) = reg_get_u16(r0); code++; goto Next;
        case OpCode::StInd_R0_R0_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r0)) = reg_get_u32(r0); code++; goto Next;
        case OpCode::StInd_R0_R0_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r0)) = reg_get_u64(r0); code++; goto Next;
        case OpCode::StInd_R0_R1_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r0)) = reg_get_u8(r1); code++; goto Next;
        case OpCode::StInd_R0_R1_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r0)) = reg_get_u16(r1); code++; goto Next;
        case OpCode::StInd_R0_R1_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r0)) = reg_get_u32(r1); code++; goto Next;
        case OpCode::StInd_R0_R1_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r0)) = reg_get_u64(r1); code++; goto Next;
        case OpCode::StInd_R0_R2_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r0)) = reg_get_u8(r2); code++; goto Next;
        case OpCode::StInd_R0_R2_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r0)) = reg_get_u16(r2); code++; goto Next;
        case OpCode::StInd_R0_R2_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r0)) = reg_get_u32(r2); code++; goto Next;
        case OpCode::StInd_R0_R2_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r0)) = reg_get_u64(r2); code++; goto Next;
        case OpCode::StInd_R0_R3_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r0)) = reg_get_u8(r3); code++; goto Next;
        case OpCode::StInd_R0_R3_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r0)) = reg_get_u16(r3); code++; goto Next;
        case OpCode::StInd_R0_R3_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r0)) = reg_get_u32(r3); code++; goto Next;
        case OpCode::StInd_R0_R3_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r0)) = reg_get_u64(r3); code++; goto Next;
        case OpCode::StInd_R0_R4_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r0)) = reg_get_u8(r4); code++; goto Next;
        case OpCode::StInd_R0_R4_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r0)) = reg_get_u16(r4); code++; goto Next;
        case OpCode::StInd_R0_R4_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r0)) = reg_get_u32(r4); code++; goto Next;
        case OpCode::StInd_R0_R4_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r0)) = reg_get_u64(r4); code++; goto Next;
        case OpCode::StInd_R0_R5_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r0)) = reg_get_u8(r5); code++; goto Next;
        case OpCode::StInd_R0_R5_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r0)) = reg_get_u16(r5); code++; goto Next;
        case OpCode::StInd_R0_R5_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r0)) = reg_get_u32(r5); code++; goto Next;
        case OpCode::StInd_R0_R5_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r0)) = reg_get_u64(r5); code++; goto Next;
        case OpCode::StInd_R0_R6_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r0)) = reg_get_u8(r6); code++; goto Next;
        case OpCode::StInd_R0_R6_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r0)) = reg_get_u16(r6); code++; goto Next;
        case OpCode::StInd_R0_R6_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r0)) = reg_get_u32(r6); code++; goto Next;
        case OpCode::StInd_R0_R6_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r0)) = reg_get_u64(r6); code++; goto Next;
        case OpCode::StInd_R0_R7_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r0)) = reg_get_u8(r7); code++; goto Next;
        case OpCode::StInd_R0_R7_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r0)) = reg_get_u16(r7); code++; goto Next;
        case OpCode::StInd_R0_R7_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r0)) = reg_get_u32(r7); code++; goto Next;
        case OpCode::StInd_R0_R7_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r0)) = reg_get_u64(r7); code++; goto Next;
        case OpCode::StInd_R1_R0_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r1)) = reg_get_u8(r0); code++; goto Next;
        case OpCode::StInd_R1_R0_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r1)) = reg_get_u16(r0); code++; goto Next;
        case OpCode::StInd_R1_R0_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r1)) = reg_get_u32(r0); code++; goto Next;
        case OpCode::StInd_R1_R0_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r1)) = reg_get_u64(r0); code++; goto Next;
        case OpCode::StInd_R1_R1_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r1)) = reg_get_u8(r1); code++; goto Next;
        case OpCode::StInd_R1_R1_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r1)) = reg_get_u16(r1); code++; goto Next;
        case OpCode::StInd_R1_R1_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r1)) = reg_get_u32(r1); code++; goto Next;
        case OpCode::StInd_R1_R1_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r1)) = reg_get_u64(r1); code++; goto Next;
        case OpCode::StInd_R1_R2_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r1)) = reg_get_u8(r2); code++; goto Next;
        case OpCode::StInd_R1_R2_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r1)) = reg_get_u16(r2); code++; goto Next;
        case OpCode::StInd_R1_R2_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r1)) = reg_get_u32(r2); code++; goto Next;
        case OpCode::StInd_R1_R2_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r1)) = reg_get_u64(r2); code++; goto Next;
        case OpCode::StInd_R1_R3_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r1)) = reg_get_u8(r3); code++; goto Next;
        case OpCode::StInd_R1_R3_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r1)) = reg_get_u16(r3); code++; goto Next;
        case OpCode::StInd_R1_R3_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r1)) = reg_get_u32(r3); code++; goto Next;
        case OpCode::StInd_R1_R3_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r1)) = reg_get_u64(r3); code++; goto Next;
        case OpCode::StInd_R1_R4_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r1)) = reg_get_u8(r4); code++; goto Next;
        case OpCode::StInd_R1_R4_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r1)) = reg_get_u16(r4); code++; goto Next;
        case OpCode::StInd_R1_R4_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r1)) = reg_get_u32(r4); code++; goto Next;
        case OpCode::StInd_R1_R4_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r1)) = reg_get_u64(r4); code++; goto Next;
        case OpCode::StInd_R1_R5_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r1)) = reg_get_u8(r5); code++; goto Next;
        case OpCode::StInd_R1_R5_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r1)) = reg_get_u16(r5); code++; goto Next;
        case OpCode::StInd_R1_R5_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r1)) = reg_get_u32(r5); code++; goto Next;
        case OpCode::StInd_R1_R5_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r1)) = reg_get_u64(r5); code++; goto Next;
        case OpCode::StInd_R1_R6_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r1)) = reg_get_u8(r6); code++; goto Next;
        case OpCode::StInd_R1_R6_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r1)) = reg_get_u16(r6); code++; goto Next;
        case OpCode::StInd_R1_R6_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r1)) = reg_get_u32(r6); code++; goto Next;
        case OpCode::StInd_R1_R6_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r1)) = reg_get_u64(r6); code++; goto Next;
        case OpCode::StInd_R1_R7_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r1)) = reg_get_u8(r7); code++; goto Next;
        case OpCode::StInd_R1_R7_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r1)) = reg_get_u16(r7); code++; goto Next;
        case OpCode::StInd_R1_R7_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r1)) = reg_get_u32(r7); code++; goto Next;
        case OpCode::StInd_R1_R7_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r1)) = reg_get_u64(r7); code++; goto Next;
        case OpCode::StInd_R2_R0_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r2)) = reg_get_u8(r0); code++; goto Next;
        case OpCode::StInd_R2_R0_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r2)) = reg_get_u16(r0); code++; goto Next;
        case OpCode::StInd_R2_R0_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r2)) = reg_get_u32(r0); code++; goto Next;
        case OpCode::StInd_R2_R0_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r2)) = reg_get_u64(r0); code++; goto Next;
        case OpCode::StInd_R2_R1_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r2)) = reg_get_u8(r1); code++; goto Next;
        case OpCode::StInd_R2_R1_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r2)) = reg_get_u16(r1); code++; goto Next;
        case OpCode::StInd_R2_R1_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r2)) = reg_get_u32(r1); code++; goto Next;
        case OpCode::StInd_R2_R1_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r2)) = reg_get_u64(r1); code++; goto Next;
        case OpCode::StInd_R2_R2_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r2)) = reg_get_u8(r2); code++; goto Next;
        case OpCode::StInd_R2_R2_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r2)) = reg_get_u16(r2); code++; goto Next;
        case OpCode::StInd_R2_R2_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r2)) = reg_get_u32(r2); code++; goto Next;
        case OpCode::StInd_R2_R2_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r2)) = reg_get_u64(r2); code++; goto Next;
        case OpCode::StInd_R2_R3_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r2)) = reg_get_u8(r3); code++; goto Next;
        case OpCode::StInd_R2_R3_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r2)) = reg_get_u16(r3); code++; goto Next;
        case OpCode::StInd_R2_R3_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r2)) = reg_get_u32(r3); code++; goto Next;
        case OpCode::StInd_R2_R3_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r2)) = reg_get_u64(r3); code++; goto Next;
        case OpCode::StInd_R2_R4_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r2)) = reg_get_u8(r4); code++; goto Next;
        case OpCode::StInd_R2_R4_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r2)) = reg_get_u16(r4); code++; goto Next;
        case OpCode::StInd_R2_R4_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r2)) = reg_get_u32(r4); code++; goto Next;
        case OpCode::StInd_R2_R4_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r2)) = reg_get_u64(r4); code++; goto Next;
        case OpCode::StInd_R2_R5_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r2)) = reg_get_u8(r5); code++; goto Next;
        case OpCode::StInd_R2_R5_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r2)) = reg_get_u16(r5); code++; goto Next;
        case OpCode::StInd_R2_R5_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r2)) = reg_get_u32(r5); code++; goto Next;
        case OpCode::StInd_R2_R5_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r2)) = reg_get_u64(r5); code++; goto Next;
        case OpCode::StInd_R2_R6_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r2)) = reg_get_u8(r6); code++; goto Next;
        case OpCode::StInd_R2_R6_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r2)) = reg_get_u16(r6); code++; goto Next;
        case OpCode::StInd_R2_R6_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r2)) = reg_get_u32(r6); code++; goto Next;
        case OpCode::StInd_R2_R6_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r2)) = reg_get_u64(r6); code++; goto Next;
        case OpCode::StInd_R2_R7_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r2)) = reg_get_u8(r7); code++; goto Next;
        case OpCode::StInd_R2_R7_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r2)) = reg_get_u16(r7); code++; goto Next;
        case OpCode::StInd_R2_R7_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r2)) = reg_get_u32(r7); code++; goto Next;
        case OpCode::StInd_R2_R7_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r2)) = reg_get_u64(r7); code++; goto Next;
        case OpCode::StInd_R3_R0_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r3)) = reg_get_u8(r0); code++; goto Next;
        case OpCode::StInd_R3_R0_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r3)) = reg_get_u16(r0); code++; goto Next;
        case OpCode::StInd_R3_R0_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r3)) = reg_get_u32(r0); code++; goto Next;
        case OpCode::StInd_R3_R0_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r3)) = reg_get_u64(r0); code++; goto Next;
        case OpCode::StInd_R3_R1_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r3)) = reg_get_u8(r1); code++; goto Next;
        case OpCode::StInd_R3_R1_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r3)) = reg_get_u16(r1); code++; goto Next;
        case OpCode::StInd_R3_R1_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r3)) = reg_get_u32(r1); code++; goto Next;
        case OpCode::StInd_R3_R1_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r3)) = reg_get_u64(r1); code++; goto Next;
        case OpCode::StInd_R3_R2_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r3)) = reg_get_u8(r2); code++; goto Next;
        case OpCode::StInd_R3_R2_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r3)) = reg_get_u16(r2); code++; goto Next;
        case OpCode::StInd_R3_R2_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r3)) = reg_get_u32(r2); code++; goto Next;
        case OpCode::StInd_R3_R2_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r3)) = reg_get_u64(r2); code++; goto Next;
        case OpCode::StInd_R3_R3_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r3)) = reg_get_u8(r3); code++; goto Next;
        case OpCode::StInd_R3_R3_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r3)) = reg_get_u16(r3); code++; goto Next;
        case OpCode::StInd_R3_R3_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r3)) = reg_get_u32(r3); code++; goto Next;
        case OpCode::StInd_R3_R3_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r3)) = reg_get_u64(r3); code++; goto Next;
        case OpCode::StInd_R3_R4_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r3)) = reg_get_u8(r4); code++; goto Next;
        case OpCode::StInd_R3_R4_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r3)) = reg_get_u16(r4); code++; goto Next;
        case OpCode::StInd_R3_R4_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r3)) = reg_get_u32(r4); code++; goto Next;
        case OpCode::StInd_R3_R4_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r3)) = reg_get_u64(r4); code++; goto Next;
        case OpCode::StInd_R3_R5_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r3)) = reg_get_u8(r5); code++; goto Next;
        case OpCode::StInd_R3_R5_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r3)) = reg_get_u16(r5); code++; goto Next;
        case OpCode::StInd_R3_R5_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r3)) = reg_get_u32(r5); code++; goto Next;
        case OpCode::StInd_R3_R5_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r3)) = reg_get_u64(r5); code++; goto Next;
        case OpCode::StInd_R3_R6_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r3)) = reg_get_u8(r6); code++; goto Next;
        case OpCode::StInd_R3_R6_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r3)) = reg_get_u16(r6); code++; goto Next;
        case OpCode::StInd_R3_R6_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r3)) = reg_get_u32(r6); code++; goto Next;
        case OpCode::StInd_R3_R6_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r3)) = reg_get_u64(r6); code++; goto Next;
        case OpCode::StInd_R3_R7_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r3)) = reg_get_u8(r7); code++; goto Next;
        case OpCode::StInd_R3_R7_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r3)) = reg_get_u16(r7); code++; goto Next;
        case OpCode::StInd_R3_R7_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r3)) = reg_get_u32(r7); code++; goto Next;
        case OpCode::StInd_R3_R7_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r3)) = reg_get_u64(r7); code++; goto Next;
        case OpCode::StInd_R4_R0_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r4)) = reg_get_u8(r0); code++; goto Next;
        case OpCode::StInd_R4_R0_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r4)) = reg_get_u16(r0); code++; goto Next;
        case OpCode::StInd_R4_R0_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r4)) = reg_get_u32(r0); code++; goto Next;
        case OpCode::StInd_R4_R0_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r4)) = reg_get_u64(r0); code++; goto Next;
        case OpCode::StInd_R4_R1_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r4)) = reg_get_u8(r1); code++; goto Next;
        case OpCode::StInd_R4_R1_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r4)) = reg_get_u16(r1); code++; goto Next;
        case OpCode::StInd_R4_R1_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r4)) = reg_get_u32(r1); code++; goto Next;
        case OpCode::StInd_R4_R1_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r4)) = reg_get_u64(r1); code++; goto Next;
        case OpCode::StInd_R4_R2_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r4)) = reg_get_u8(r2); code++; goto Next;
        case OpCode::StInd_R4_R2_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r4)) = reg_get_u16(r2); code++; goto Next;
        case OpCode::StInd_R4_R2_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r4)) = reg_get_u32(r2); code++; goto Next;
        case OpCode::StInd_R4_R2_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r4)) = reg_get_u64(r2); code++; goto Next;
        case OpCode::StInd_R4_R3_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r4)) = reg_get_u8(r3); code++; goto Next;
        case OpCode::StInd_R4_R3_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r4)) = reg_get_u16(r3); code++; goto Next;
        case OpCode::StInd_R4_R3_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r4)) = reg_get_u32(r3); code++; goto Next;
        case OpCode::StInd_R4_R3_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r4)) = reg_get_u64(r3); code++; goto Next;
        case OpCode::StInd_R4_R4_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r4)) = reg_get_u8(r4); code++; goto Next;
        case OpCode::StInd_R4_R4_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r4)) = reg_get_u16(r4); code++; goto Next;
        case OpCode::StInd_R4_R4_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r4)) = reg_get_u32(r4); code++; goto Next;
        case OpCode::StInd_R4_R4_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r4)) = reg_get_u64(r4); code++; goto Next;
        case OpCode::StInd_R4_R5_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r4)) = reg_get_u8(r5); code++; goto Next;
        case OpCode::StInd_R4_R5_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r4)) = reg_get_u16(r5); code++; goto Next;
        case OpCode::StInd_R4_R5_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r4)) = reg_get_u32(r5); code++; goto Next;
        case OpCode::StInd_R4_R5_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r4)) = reg_get_u64(r5); code++; goto Next;
        case OpCode::StInd_R4_R6_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r4)) = reg_get_u8(r6); code++; goto Next;
        case OpCode::StInd_R4_R6_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r4)) = reg_get_u16(r6); code++; goto Next;
        case OpCode::StInd_R4_R6_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r4)) = reg_get_u32(r6); code++; goto Next;
        case OpCode::StInd_R4_R6_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r4)) = reg_get_u64(r6); code++; goto Next;
        case OpCode::StInd_R4_R7_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r4)) = reg_get_u8(r7); code++; goto Next;
        case OpCode::StInd_R4_R7_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r4)) = reg_get_u16(r7); code++; goto Next;
        case OpCode::StInd_R4_R7_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r4)) = reg_get_u32(r7); code++; goto Next;
        case OpCode::StInd_R4_R7_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r4)) = reg_get_u64(r7); code++; goto Next;
        case OpCode::StInd_R5_R0_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r5)) = reg_get_u8(r0); code++; goto Next;
        case OpCode::StInd_R5_R0_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r5)) = reg_get_u16(r0); code++; goto Next;
        case OpCode::StInd_R5_R0_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r5)) = reg_get_u32(r0); code++; goto Next;
        case OpCode::StInd_R5_R0_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r5)) = reg_get_u64(r0); code++; goto Next;
        case OpCode::StInd_R5_R1_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r5)) = reg_get_u8(r1); code++; goto Next;
        case OpCode::StInd_R5_R1_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r5)) = reg_get_u16(r1); code++; goto Next;
        case OpCode::StInd_R5_R1_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r5)) = reg_get_u32(r1); code++; goto Next;
        case OpCode::StInd_R5_R1_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r5)) = reg_get_u64(r1); code++; goto Next;
        case OpCode::StInd_R5_R2_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r5)) = reg_get_u8(r2); code++; goto Next;
        case OpCode::StInd_R5_R2_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r5)) = reg_get_u16(r2); code++; goto Next;
        case OpCode::StInd_R5_R2_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r5)) = reg_get_u32(r2); code++; goto Next;
        case OpCode::StInd_R5_R2_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r5)) = reg_get_u64(r2); code++; goto Next;
        case OpCode::StInd_R5_R3_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r5)) = reg_get_u8(r3); code++; goto Next;
        case OpCode::StInd_R5_R3_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r5)) = reg_get_u16(r3); code++; goto Next;
        case OpCode::StInd_R5_R3_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r5)) = reg_get_u32(r3); code++; goto Next;
        case OpCode::StInd_R5_R3_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r5)) = reg_get_u64(r3); code++; goto Next;
        case OpCode::StInd_R5_R4_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r5)) = reg_get_u8(r4); code++; goto Next;
        case OpCode::StInd_R5_R4_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r5)) = reg_get_u16(r4); code++; goto Next;
        case OpCode::StInd_R5_R4_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r5)) = reg_get_u32(r4); code++; goto Next;
        case OpCode::StInd_R5_R4_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r5)) = reg_get_u64(r4); code++; goto Next;
        case OpCode::StInd_R5_R5_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r5)) = reg_get_u8(r5); code++; goto Next;
        case OpCode::StInd_R5_R5_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r5)) = reg_get_u16(r5); code++; goto Next;
        case OpCode::StInd_R5_R5_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r5)) = reg_get_u32(r5); code++; goto Next;
        case OpCode::StInd_R5_R5_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r5)) = reg_get_u64(r5); code++; goto Next;
        case OpCode::StInd_R5_R6_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r5)) = reg_get_u8(r6); code++; goto Next;
        case OpCode::StInd_R5_R6_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r5)) = reg_get_u16(r6); code++; goto Next;
        case OpCode::StInd_R5_R6_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r5)) = reg_get_u32(r6); code++; goto Next;
        case OpCode::StInd_R5_R6_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r5)) = reg_get_u64(r6); code++; goto Next;
        case OpCode::StInd_R5_R7_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r5)) = reg_get_u8(r7); code++; goto Next;
        case OpCode::StInd_R5_R7_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r5)) = reg_get_u16(r7); code++; goto Next;
        case OpCode::StInd_R5_R7_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r5)) = reg_get_u32(r7); code++; goto Next;
        case OpCode::StInd_R5_R7_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r5)) = reg_get_u64(r7); code++; goto Next;
        case OpCode::StInd_R6_R0_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r6)) = reg_get_u8(r0); code++; goto Next;
        case OpCode::StInd_R6_R0_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r6)) = reg_get_u16(r0); code++; goto Next;
        case OpCode::StInd_R6_R0_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r6)) = reg_get_u32(r0); code++; goto Next;
        case OpCode::StInd_R6_R0_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r6)) = reg_get_u64(r0); code++; goto Next;
        case OpCode::StInd_R6_R1_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r6)) = reg_get_u8(r1); code++; goto Next;
        case OpCode::StInd_R6_R1_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r6)) = reg_get_u16(r1); code++; goto Next;
        case OpCode::StInd_R6_R1_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r6)) = reg_get_u32(r1); code++; goto Next;
        case OpCode::StInd_R6_R1_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r6)) = reg_get_u64(r1); code++; goto Next;
        case OpCode::StInd_R6_R2_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r6)) = reg_get_u8(r2); code++; goto Next;
        case OpCode::StInd_R6_R2_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r6)) = reg_get_u16(r2); code++; goto Next;
        case OpCode::StInd_R6_R2_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r6)) = reg_get_u32(r2); code++; goto Next;
        case OpCode::StInd_R6_R2_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r6)) = reg_get_u64(r2); code++; goto Next;
        case OpCode::StInd_R6_R3_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r6)) = reg_get_u8(r3); code++; goto Next;
        case OpCode::StInd_R6_R3_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r6)) = reg_get_u16(r3); code++; goto Next;
        case OpCode::StInd_R6_R3_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r6)) = reg_get_u32(r3); code++; goto Next;
        case OpCode::StInd_R6_R3_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r6)) = reg_get_u64(r3); code++; goto Next;
        case OpCode::StInd_R6_R4_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r6)) = reg_get_u8(r4); code++; goto Next;
        case OpCode::StInd_R6_R4_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r6)) = reg_get_u16(r4); code++; goto Next;
        case OpCode::StInd_R6_R4_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r6)) = reg_get_u32(r4); code++; goto Next;
        case OpCode::StInd_R6_R4_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r6)) = reg_get_u64(r4); code++; goto Next;
        case OpCode::StInd_R6_R5_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r6)) = reg_get_u8(r5); code++; goto Next;
        case OpCode::StInd_R6_R5_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r6)) = reg_get_u16(r5); code++; goto Next;
        case OpCode::StInd_R6_R5_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r6)) = reg_get_u32(r5); code++; goto Next;
        case OpCode::StInd_R6_R5_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r6)) = reg_get_u64(r5); code++; goto Next;
        case OpCode::StInd_R6_R6_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r6)) = reg_get_u8(r6); code++; goto Next;
        case OpCode::StInd_R6_R6_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r6)) = reg_get_u16(r6); code++; goto Next;
        case OpCode::StInd_R6_R6_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r6)) = reg_get_u32(r6); code++; goto Next;
        case OpCode::StInd_R6_R6_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r6)) = reg_get_u64(r6); code++; goto Next;
        case OpCode::StInd_R6_R7_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r6)) = reg_get_u8(r7); code++; goto Next;
        case OpCode::StInd_R6_R7_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r6)) = reg_get_u16(r7); code++; goto Next;
        case OpCode::StInd_R6_R7_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r6)) = reg_get_u32(r7); code++; goto Next;
        case OpCode::StInd_R6_R7_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r6)) = reg_get_u64(r7); code++; goto Next;
        case OpCode::StInd_R7_R0_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r7)) = reg_get_u8(r0); code++; goto Next;
        case OpCode::StInd_R7_R0_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r7)) = reg_get_u16(r0); code++; goto Next;
        case OpCode::StInd_R7_R0_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r7)) = reg_get_u32(r0); code++; goto Next;
        case OpCode::StInd_R7_R0_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r7)) = reg_get_u64(r0); code++; goto Next;
        case OpCode::StInd_R7_R1_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r7)) = reg_get_u8(r1); code++; goto Next;
        case OpCode::StInd_R7_R1_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r7)) = reg_get_u16(r1); code++; goto Next;
        case OpCode::StInd_R7_R1_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r7)) = reg_get_u32(r1); code++; goto Next;
        case OpCode::StInd_R7_R1_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r7)) = reg_get_u64(r1); code++; goto Next;
        case OpCode::StInd_R7_R2_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r7)) = reg_get_u8(r2); code++; goto Next;
        case OpCode::StInd_R7_R2_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r7)) = reg_get_u16(r2); code++; goto Next;
        case OpCode::StInd_R7_R2_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r7)) = reg_get_u32(r2); code++; goto Next;
        case OpCode::StInd_R7_R2_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r7)) = reg_get_u64(r2); code++; goto Next;
        case OpCode::StInd_R7_R3_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r7)) = reg_get_u8(r3); code++; goto Next;
        case OpCode::StInd_R7_R3_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r7)) = reg_get_u16(r3); code++; goto Next;
        case OpCode::StInd_R7_R3_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r7)) = reg_get_u32(r3); code++; goto Next;
        case OpCode::StInd_R7_R3_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r7)) = reg_get_u64(r3); code++; goto Next;
        case OpCode::StInd_R7_R4_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r7)) = reg_get_u8(r4); code++; goto Next;
        case OpCode::StInd_R7_R4_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r7)) = reg_get_u16(r4); code++; goto Next;
        case OpCode::StInd_R7_R4_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r7)) = reg_get_u32(r4); code++; goto Next;
        case OpCode::StInd_R7_R4_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r7)) = reg_get_u64(r4); code++; goto Next;
        case OpCode::StInd_R7_R5_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r7)) = reg_get_u8(r5); code++; goto Next;
        case OpCode::StInd_R7_R5_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r7)) = reg_get_u16(r5); code++; goto Next;
        case OpCode::StInd_R7_R5_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r7)) = reg_get_u32(r5); code++; goto Next;
        case OpCode::StInd_R7_R5_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r7)) = reg_get_u64(r5); code++; goto Next;
        case OpCode::StInd_R7_R6_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r7)) = reg_get_u8(r6); code++; goto Next;
        case OpCode::StInd_R7_R6_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r7)) = reg_get_u16(r6); code++; goto Next;
        case OpCode::StInd_R7_R6_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r7)) = reg_get_u32(r6); code++; goto Next;
        case OpCode::StInd_R7_R6_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r7)) = reg_get_u64(r6); code++; goto Next;
        case OpCode::StInd_R7_R7_X1:
            *reinterpret_cast<uint8_t*>(reg_get_usize(r7)) = reg_get_u8(r7); code++; goto Next;
        case OpCode::StInd_R7_R7_X2:
            *reinterpret_cast<uint16_t*>(reg_get_usize(r7)) = reg_get_u16(r7); code++; goto Next;
        case OpCode::StInd_R7_R7_X4:
            *reinterpret_cast<uint32_t*>(reg_get_usize(r7)) = reg_get_u32(r7); code++; goto Next;
        case OpCode::StInd_R7_R7_X8:
            *reinterpret_cast<uint64_t*>(reg_get_usize(r7)) = reg_get_u64(r7); code++; goto Next;

        case OpCode::Push_R0_X4:
            *reinterpret_cast<uint32_t*>(calc_stack) = reg_get_u32(r0); calc_stack += 4; code++; goto Next;
        case OpCode::Push_R0_X8:
            *reinterpret_cast<uint64_t*>(calc_stack) = reg_get_u64(r0); calc_stack += 8; code++; goto Next;
        case OpCode::Push_R1_X4:
            *reinterpret_cast<uint32_t*>(calc_stack) = reg_get_u32(r1); calc_stack += 4; code++; goto Next;
        case OpCode::Push_R1_X8:
            *reinterpret_cast<uint64_t*>(calc_stack) = reg_get_u64(r1); calc_stack += 8; code++; goto Next;
        case OpCode::Push_R2_X4:
            *reinterpret_cast<uint32_t*>(calc_stack) = reg_get_u32(r2); calc_stack += 4; code++; goto Next;
        case OpCode::Push_R2_X8:
            *reinterpret_cast<uint64_t*>(calc_stack) = reg_get_u64(r2); calc_stack += 8; code++; goto Next;
        case OpCode::Push_R3_X4:
            *reinterpret_cast<uint32_t*>(calc_stack) = reg_get_u32(r3); calc_stack += 4; code++; goto Next;
        case OpCode::Push_R3_X8:
            *reinterpret_cast<uint64_t*>(calc_stack) = reg_get_u64(r3); calc_stack += 8; code++; goto Next;
        case OpCode::Push_R4_X4:
            *reinterpret_cast<uint32_t*>(calc_stack) = reg_get_u32(r4); calc_stack += 4; code++; goto Next;
        case OpCode::Push_R4_X8:
            *reinterpret_cast<uint64_t*>(calc_stack) = reg_get_u64(r4); calc_stack += 8; code++; goto Next;
        case OpCode::Push_R5_X4:
            *reinterpret_cast<uint32_t*>(calc_stack) = reg_get_u32(r5); calc_stack += 4; code++; goto Next;
        case OpCode::Push_R5_X8:
            *reinterpret_cast<uint64_t*>(calc_stack) = reg_get_u64(r5); calc_stack += 8; code++; goto Next;
        case OpCode::Push_R6_X4:
            *reinterpret_cast<uint32_t*>(calc_stack) = reg_get_u32(r6); calc_stack += 4; code++; goto Next;
        case OpCode::Push_R6_X8:
            *reinterpret_cast<uint64_t*>(calc_stack) = reg_get_u64(r6); calc_stack += 8; code++; goto Next;
        case OpCode::Push_R7_X4:
            *reinterpret_cast<uint32_t*>(calc_stack) = reg_get_u32(r7); calc_stack += 4; code++; goto Next;
        case OpCode::Push_R7_X8:
            *reinterpret_cast<uint64_t*>(calc_stack) = reg_get_u64(r7); calc_stack += 8; code++; goto Next;

        case OpCode::Pop_R0_X1:
            calc_stack -= 4; r0 = reg_ld(static_cast<uint8_t>(*(calc_stack))); code++; goto Next;
        case OpCode::Pop_R0_X2:
            calc_stack -= 4; r0 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R0_X4:
            calc_stack -= 4; r0 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R0_X8:
            calc_stack -= 8; r0 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R1_X1:
            calc_stack -= 4; r1 = reg_ld(static_cast<uint8_t>(*(calc_stack))); code++; goto Next;
        case OpCode::Pop_R1_X2:
            calc_stack -= 4; r1 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R1_X4:
            calc_stack -= 4; r1 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R1_X8:
            calc_stack -= 8; r1 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R2_X1:
            calc_stack -= 4; r2 = reg_ld(static_cast<uint8_t>(*(calc_stack))); code++; goto Next;
        case OpCode::Pop_R2_X2:
            calc_stack -= 4; r2 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R2_X4:
            calc_stack -= 4; r2 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R2_X8:
            calc_stack -= 8; r2 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R3_X1:
            calc_stack -= 4; r3 = reg_ld(static_cast<uint8_t>(*(calc_stack))); code++; goto Next;
        case OpCode::Pop_R3_X2:
            calc_stack -= 4; r3 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R3_X4:
            calc_stack -= 4; r3 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R3_X8:
            calc_stack -= 8; r3 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R4_X1:
            calc_stack -= 4; r4 = reg_ld(static_cast<uint8_t>(*(calc_stack))); code++; goto Next;
        case OpCode::Pop_R4_X2:
            calc_stack -= 4; r4 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R4_X4:
            calc_stack -= 4; r4 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R4_X8:
            calc_stack -= 8; r4 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R5_X1:
            calc_stack -= 4; r5 = reg_ld(static_cast<uint8_t>(*(calc_stack))); code++; goto Next;
        case OpCode::Pop_R5_X2:
            calc_stack -= 4; r5 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R5_X4:
            calc_stack -= 4; r5 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R5_X8:
            calc_stack -= 8; r5 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R6_X1:
            calc_stack -= 4; r6 = reg_ld(static_cast<uint8_t>(*(calc_stack))); code++; goto Next;
        case OpCode::Pop_R6_X2:
            calc_stack -= 4; r6 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R6_X4:
            calc_stack -= 4; r6 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R6_X8:
            calc_stack -= 8; r6 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R7_X1:
            calc_stack -= 4; r7 = reg_ld(static_cast<uint8_t>(*(calc_stack))); code++; goto Next;
        case OpCode::Pop_R7_X2:
            calc_stack -= 4; r7 = reg_ld(static_cast<uint16_t>(*reinterpret_cast<uint16_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R7_X4:
            calc_stack -= 4; r7 = reg_ld(static_cast<uint32_t>(*reinterpret_cast<uint32_t*>(calc_stack))); code++; goto Next;
        case OpCode::Pop_R7_X8:
            calc_stack -= 8; r7 = reg_ld(static_cast<uint64_t>(*reinterpret_cast<uint64_t*>(calc_stack))); code++; goto Next;

        case OpCode::Mov_R0_R0_X1:
            r0 = reg_and(r0, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R0_X2:
            r0 = reg_and(r0, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R0_X4:
            r0 = reg_and(r0, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R0_X8:
            r0 = reg_and(r0, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R1_X1:
            r0 = reg_and(r1, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R1_X2:
            r0 = reg_and(r1, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R1_X4:
            r0 = reg_and(r1, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R1_X8:
            r0 = reg_and(r1, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R2_X1:
            r0 = reg_and(r2, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R2_X2:
            r0 = reg_and(r2, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R2_X4:
            r0 = reg_and(r2, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R2_X8:
            r0 = reg_and(r2, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R3_X1:
            r0 = reg_and(r3, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R3_X2:
            r0 = reg_and(r3, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R3_X4:
            r0 = reg_and(r3, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R3_X8:
            r0 = reg_and(r3, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R4_X1:
            r0 = reg_and(r4, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R4_X2:
            r0 = reg_and(r4, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R4_X4:
            r0 = reg_and(r4, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R4_X8:
            r0 = reg_and(r4, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R5_X1:
            r0 = reg_and(r5, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R5_X2:
            r0 = reg_and(r5, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R5_X4:
            r0 = reg_and(r5, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R5_X8:
            r0 = reg_and(r5, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R6_X1:
            r0 = reg_and(r6, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R6_X2:
            r0 = reg_and(r6, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R6_X4:
            r0 = reg_and(r6, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R6_X8:
            r0 = reg_and(r6, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R7_X1:
            r0 = reg_and(r7, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R7_X2:
            r0 = reg_and(r7, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R7_X4:
            r0 = reg_and(r7, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R0_R7_X8:
            r0 = reg_and(r7, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R0_X1:
            r1 = reg_and(r0, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R0_X2:
            r1 = reg_and(r0, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R0_X4:
            r1 = reg_and(r0, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R0_X8:
            r1 = reg_and(r0, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R1_X1:
            r1 = reg_and(r1, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R1_X2:
            r1 = reg_and(r1, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R1_X4:
            r1 = reg_and(r1, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R1_X8:
            r1 = reg_and(r1, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R2_X1:
            r1 = reg_and(r2, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R2_X2:
            r1 = reg_and(r2, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R2_X4:
            r1 = reg_and(r2, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R2_X8:
            r1 = reg_and(r2, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R3_X1:
            r1 = reg_and(r3, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R3_X2:
            r1 = reg_and(r3, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R3_X4:
            r1 = reg_and(r3, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R3_X8:
            r1 = reg_and(r3, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R4_X1:
            r1 = reg_and(r4, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R4_X2:
            r1 = reg_and(r4, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R4_X4:
            r1 = reg_and(r4, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R4_X8:
            r1 = reg_and(r4, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R5_X1:
            r1 = reg_and(r5, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R5_X2:
            r1 = reg_and(r5, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R5_X4:
            r1 = reg_and(r5, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R5_X8:
            r1 = reg_and(r5, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R6_X1:
            r1 = reg_and(r6, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R6_X2:
            r1 = reg_and(r6, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R6_X4:
            r1 = reg_and(r6, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R6_X8:
            r1 = reg_and(r6, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R7_X1:
            r1 = reg_and(r7, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R7_X2:
            r1 = reg_and(r7, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R7_X4:
            r1 = reg_and(r7, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R1_R7_X8:
            r1 = reg_and(r7, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R0_X1:
            r2 = reg_and(r0, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R0_X2:
            r2 = reg_and(r0, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R0_X4:
            r2 = reg_and(r0, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R0_X8:
            r2 = reg_and(r0, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R1_X1:
            r2 = reg_and(r1, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R1_X2:
            r2 = reg_and(r1, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R1_X4:
            r2 = reg_and(r1, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R1_X8:
            r2 = reg_and(r1, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R2_X1:
            r2 = reg_and(r2, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R2_X2:
            r2 = reg_and(r2, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R2_X4:
            r2 = reg_and(r2, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R2_X8:
            r2 = reg_and(r2, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R3_X1:
            r2 = reg_and(r3, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R3_X2:
            r2 = reg_and(r3, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R3_X4:
            r2 = reg_and(r3, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R3_X8:
            r2 = reg_and(r3, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R4_X1:
            r2 = reg_and(r4, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R4_X2:
            r2 = reg_and(r4, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R4_X4:
            r2 = reg_and(r4, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R4_X8:
            r2 = reg_and(r4, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R5_X1:
            r2 = reg_and(r5, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R5_X2:
            r2 = reg_and(r5, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R5_X4:
            r2 = reg_and(r5, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R5_X8:
            r2 = reg_and(r5, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R6_X1:
            r2 = reg_and(r6, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R6_X2:
            r2 = reg_and(r6, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R6_X4:
            r2 = reg_and(r6, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R6_X8:
            r2 = reg_and(r6, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R7_X1:
            r2 = reg_and(r7, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R7_X2:
            r2 = reg_and(r7, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R7_X4:
            r2 = reg_and(r7, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R2_R7_X8:
            r2 = reg_and(r7, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R0_X1:
            r3 = reg_and(r0, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R0_X2:
            r3 = reg_and(r0, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R0_X4:
            r3 = reg_and(r0, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R0_X8:
            r3 = reg_and(r0, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R1_X1:
            r3 = reg_and(r1, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R1_X2:
            r3 = reg_and(r1, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R1_X4:
            r3 = reg_and(r1, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R1_X8:
            r3 = reg_and(r1, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R2_X1:
            r3 = reg_and(r2, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R2_X2:
            r3 = reg_and(r2, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R2_X4:
            r3 = reg_and(r2, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R2_X8:
            r3 = reg_and(r2, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R3_X1:
            r3 = reg_and(r3, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R3_X2:
            r3 = reg_and(r3, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R3_X4:
            r3 = reg_and(r3, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R3_X8:
            r3 = reg_and(r3, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R4_X1:
            r3 = reg_and(r4, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R4_X2:
            r3 = reg_and(r4, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R4_X4:
            r3 = reg_and(r4, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R4_X8:
            r3 = reg_and(r4, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R5_X1:
            r3 = reg_and(r5, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R5_X2:
            r3 = reg_and(r5, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R5_X4:
            r3 = reg_and(r5, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R5_X8:
            r3 = reg_and(r5, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R6_X1:
            r3 = reg_and(r6, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R6_X2:
            r3 = reg_and(r6, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R6_X4:
            r3 = reg_and(r6, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R6_X8:
            r3 = reg_and(r6, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R7_X1:
            r3 = reg_and(r7, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R7_X2:
            r3 = reg_and(r7, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R7_X4:
            r3 = reg_and(r7, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R3_R7_X8:
            r3 = reg_and(r7, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R0_X1:
            r4 = reg_and(r0, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R0_X2:
            r4 = reg_and(r0, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R0_X4:
            r4 = reg_and(r0, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R0_X8:
            r4 = reg_and(r0, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R1_X1:
            r4 = reg_and(r1, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R1_X2:
            r4 = reg_and(r1, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R1_X4:
            r4 = reg_and(r1, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R1_X8:
            r4 = reg_and(r1, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R2_X1:
            r4 = reg_and(r2, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R2_X2:
            r4 = reg_and(r2, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R2_X4:
            r4 = reg_and(r2, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R2_X8:
            r4 = reg_and(r2, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R3_X1:
            r4 = reg_and(r3, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R3_X2:
            r4 = reg_and(r3, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R3_X4:
            r4 = reg_and(r3, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R3_X8:
            r4 = reg_and(r3, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R4_X1:
            r4 = reg_and(r4, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R4_X2:
            r4 = reg_and(r4, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R4_X4:
            r4 = reg_and(r4, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R4_X8:
            r4 = reg_and(r4, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R5_X1:
            r4 = reg_and(r5, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R5_X2:
            r4 = reg_and(r5, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R5_X4:
            r4 = reg_and(r5, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R5_X8:
            r4 = reg_and(r5, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R6_X1:
            r4 = reg_and(r6, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R6_X2:
            r4 = reg_and(r6, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R6_X4:
            r4 = reg_and(r6, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R6_X8:
            r4 = reg_and(r6, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R7_X1:
            r4 = reg_and(r7, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R7_X2:
            r4 = reg_and(r7, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R7_X4:
            r4 = reg_and(r7, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R4_R7_X8:
            r4 = reg_and(r7, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R0_X1:
            r5 = reg_and(r0, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R0_X2:
            r5 = reg_and(r0, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R0_X4:
            r5 = reg_and(r0, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R0_X8:
            r5 = reg_and(r0, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R1_X1:
            r5 = reg_and(r1, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R1_X2:
            r5 = reg_and(r1, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R1_X4:
            r5 = reg_and(r1, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R1_X8:
            r5 = reg_and(r1, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R2_X1:
            r5 = reg_and(r2, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R2_X2:
            r5 = reg_and(r2, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R2_X4:
            r5 = reg_and(r2, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R2_X8:
            r5 = reg_and(r2, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R3_X1:
            r5 = reg_and(r3, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R3_X2:
            r5 = reg_and(r3, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R3_X4:
            r5 = reg_and(r3, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R3_X8:
            r5 = reg_and(r3, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R4_X1:
            r5 = reg_and(r4, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R4_X2:
            r5 = reg_and(r4, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R4_X4:
            r5 = reg_and(r4, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R4_X8:
            r5 = reg_and(r4, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R5_X1:
            r5 = reg_and(r5, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R5_X2:
            r5 = reg_and(r5, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R5_X4:
            r5 = reg_and(r5, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R5_X8:
            r5 = reg_and(r5, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R6_X1:
            r5 = reg_and(r6, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R6_X2:
            r5 = reg_and(r6, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R6_X4:
            r5 = reg_and(r6, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R6_X8:
            r5 = reg_and(r6, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R7_X1:
            r5 = reg_and(r7, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R7_X2:
            r5 = reg_and(r7, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R7_X4:
            r5 = reg_and(r7, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R5_R7_X8:
            r5 = reg_and(r7, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R0_X1:
            r6 = reg_and(r0, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R0_X2:
            r6 = reg_and(r0, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R0_X4:
            r6 = reg_and(r0, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R0_X8:
            r6 = reg_and(r0, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R1_X1:
            r6 = reg_and(r1, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R1_X2:
            r6 = reg_and(r1, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R1_X4:
            r6 = reg_and(r1, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R1_X8:
            r6 = reg_and(r1, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R2_X1:
            r6 = reg_and(r2, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R2_X2:
            r6 = reg_and(r2, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R2_X4:
            r6 = reg_and(r2, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R2_X8:
            r6 = reg_and(r2, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R3_X1:
            r6 = reg_and(r3, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R3_X2:
            r6 = reg_and(r3, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R3_X4:
            r6 = reg_and(r3, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R3_X8:
            r6 = reg_and(r3, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R4_X1:
            r6 = reg_and(r4, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R4_X2:
            r6 = reg_and(r4, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R4_X4:
            r6 = reg_and(r4, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R4_X8:
            r6 = reg_and(r4, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R5_X1:
            r6 = reg_and(r5, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R5_X2:
            r6 = reg_and(r5, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R5_X4:
            r6 = reg_and(r5, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R5_X8:
            r6 = reg_and(r5, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R6_X1:
            r6 = reg_and(r6, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R6_X2:
            r6 = reg_and(r6, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R6_X4:
            r6 = reg_and(r6, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R6_X8:
            r6 = reg_and(r6, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R7_X1:
            r6 = reg_and(r7, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R7_X2:
            r6 = reg_and(r7, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R7_X4:
            r6 = reg_and(r7, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R6_R7_X8:
            r6 = reg_and(r7, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R0_X1:
            r7 = reg_and(r0, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R0_X2:
            r7 = reg_and(r0, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R0_X4:
            r7 = reg_and(r0, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R0_X8:
            r7 = reg_and(r0, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R1_X1:
            r7 = reg_and(r1, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R1_X2:
            r7 = reg_and(r1, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R1_X4:
            r7 = reg_and(r1, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R1_X8:
            r7 = reg_and(r1, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R2_X1:
            r7 = reg_and(r2, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R2_X2:
            r7 = reg_and(r2, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R2_X4:
            r7 = reg_and(r2, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R2_X8:
            r7 = reg_and(r2, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R3_X1:
            r7 = reg_and(r3, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R3_X2:
            r7 = reg_and(r3, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R3_X4:
            r7 = reg_and(r3, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R3_X8:
            r7 = reg_and(r3, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R4_X1:
            r7 = reg_and(r4, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R4_X2:
            r7 = reg_and(r4, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R4_X4:
            r7 = reg_and(r4, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R4_X8:
            r7 = reg_and(r4, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R5_X1:
            r7 = reg_and(r5, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R5_X2:
            r7 = reg_and(r5, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R5_X4:
            r7 = reg_and(r5, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R5_X8:
            r7 = reg_and(r5, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R6_X1:
            r7 = reg_and(r6, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R6_X2:
            r7 = reg_and(r6, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R6_X4:
            r7 = reg_and(r6, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R6_X8:
            r7 = reg_and(r6, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R7_X1:
            r7 = reg_and(r7, reg_ld(static_cast<uint8_t>(static_cast<int8_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R7_X2:
            r7 = reg_and(r7, reg_ld(static_cast<uint16_t>(static_cast<int16_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R7_X4:
            r7 = reg_and(r7, reg_ld(static_cast<uint32_t>(static_cast<int32_t>(-1)))); code++; goto Next;
        case OpCode::Mov_R7_R7_X8:
            r7 = reg_and(r7, reg_ld(static_cast<uint64_t>(static_cast<int64_t>(-1)))); code++; goto Next;

        case OpCode::AddI_R0_R0_X1:
            r0 = reg_add_u8(r0, r0); code++; goto Next;
        case OpCode::AddI_R0_R1_X1:
            r0 = reg_add_u8(r0, r1); code++; goto Next;
        case OpCode::AddI_R0_R2_X1:
            r0 = reg_add_u8(r0, r2); code++; goto Next;
        case OpCode::AddI_R0_R3_X1:
            r0 = reg_add_u8(r0, r3); code++; goto Next;
        case OpCode::AddI_R0_R4_X1:
            r0 = reg_add_u8(r0, r4); code++; goto Next;
        case OpCode::AddI_R0_R5_X1:
            r0 = reg_add_u8(r0, r5); code++; goto Next;
        case OpCode::AddI_R0_R6_X1:
            r0 = reg_add_u8(r0, r6); code++; goto Next;
        case OpCode::AddI_R0_R7_X1:
            r0 = reg_add_u8(r0, r7); code++; goto Next;
        case OpCode::AddI_R1_R0_X1:
            r1 = reg_add_u8(r1, r0); code++; goto Next;
        case OpCode::AddI_R1_R1_X1:
            r1 = reg_add_u8(r1, r1); code++; goto Next;
        case OpCode::AddI_R1_R2_X1:
            r1 = reg_add_u8(r1, r2); code++; goto Next;
        case OpCode::AddI_R1_R3_X1:
            r1 = reg_add_u8(r1, r3); code++; goto Next;
        case OpCode::AddI_R1_R4_X1:
            r1 = reg_add_u8(r1, r4); code++; goto Next;
        case OpCode::AddI_R1_R5_X1:
            r1 = reg_add_u8(r1, r5); code++; goto Next;
        case OpCode::AddI_R1_R6_X1:
            r1 = reg_add_u8(r1, r6); code++; goto Next;
        case OpCode::AddI_R1_R7_X1:
            r1 = reg_add_u8(r1, r7); code++; goto Next;
        case OpCode::AddI_R2_R0_X1:
            r2 = reg_add_u8(r2, r0); code++; goto Next;
        case OpCode::AddI_R2_R1_X1:
            r2 = reg_add_u8(r2, r1); code++; goto Next;
        case OpCode::AddI_R2_R2_X1:
            r2 = reg_add_u8(r2, r2); code++; goto Next;
        case OpCode::AddI_R2_R3_X1:
            r2 = reg_add_u8(r2, r3); code++; goto Next;
        case OpCode::AddI_R2_R4_X1:
            r2 = reg_add_u8(r2, r4); code++; goto Next;
        case OpCode::AddI_R2_R5_X1:
            r2 = reg_add_u8(r2, r5); code++; goto Next;
        case OpCode::AddI_R2_R6_X1:
            r2 = reg_add_u8(r2, r6); code++; goto Next;
        case OpCode::AddI_R2_R7_X1:
            r2 = reg_add_u8(r2, r7); code++; goto Next;
        case OpCode::AddI_R3_R0_X1:
            r3 = reg_add_u8(r3, r0); code++; goto Next;
        case OpCode::AddI_R3_R1_X1:
            r3 = reg_add_u8(r3, r1); code++; goto Next;
        case OpCode::AddI_R3_R2_X1:
            r3 = reg_add_u8(r3, r2); code++; goto Next;
        case OpCode::AddI_R3_R3_X1:
            r3 = reg_add_u8(r3, r3); code++; goto Next;
        case OpCode::AddI_R3_R4_X1:
            r3 = reg_add_u8(r3, r4); code++; goto Next;
        case OpCode::AddI_R3_R5_X1:
            r3 = reg_add_u8(r3, r5); code++; goto Next;
        case OpCode::AddI_R3_R6_X1:
            r3 = reg_add_u8(r3, r6); code++; goto Next;
        case OpCode::AddI_R3_R7_X1:
            r3 = reg_add_u8(r3, r7); code++; goto Next;
        case OpCode::AddI_R4_R0_X1:
            r4 = reg_add_u8(r4, r0); code++; goto Next;
        case OpCode::AddI_R4_R1_X1:
            r4 = reg_add_u8(r4, r1); code++; goto Next;
        case OpCode::AddI_R4_R2_X1:
            r4 = reg_add_u8(r4, r2); code++; goto Next;
        case OpCode::AddI_R4_R3_X1:
            r4 = reg_add_u8(r4, r3); code++; goto Next;
        case OpCode::AddI_R4_R4_X1:
            r4 = reg_add_u8(r4, r4); code++; goto Next;
        case OpCode::AddI_R4_R5_X1:
            r4 = reg_add_u8(r4, r5); code++; goto Next;
        case OpCode::AddI_R4_R6_X1:
            r4 = reg_add_u8(r4, r6); code++; goto Next;
        case OpCode::AddI_R4_R7_X1:
            r4 = reg_add_u8(r4, r7); code++; goto Next;
        case OpCode::AddI_R5_R0_X1:
            r5 = reg_add_u8(r5, r0); code++; goto Next;
        case OpCode::AddI_R5_R1_X1:
            r5 = reg_add_u8(r5, r1); code++; goto Next;
        case OpCode::AddI_R5_R2_X1:
            r5 = reg_add_u8(r5, r2); code++; goto Next;
        case OpCode::AddI_R5_R3_X1:
            r5 = reg_add_u8(r5, r3); code++; goto Next;
        case OpCode::AddI_R5_R4_X1:
            r5 = reg_add_u8(r5, r4); code++; goto Next;
        case OpCode::AddI_R5_R5_X1:
            r5 = reg_add_u8(r5, r5); code++; goto Next;
        case OpCode::AddI_R5_R6_X1:
            r5 = reg_add_u8(r5, r6); code++; goto Next;
        case OpCode::AddI_R5_R7_X1:
            r5 = reg_add_u8(r5, r7); code++; goto Next;
        case OpCode::AddI_R6_R0_X1:
            r6 = reg_add_u8(r6, r0); code++; goto Next;
        case OpCode::AddI_R6_R1_X1:
            r6 = reg_add_u8(r6, r1); code++; goto Next;
        case OpCode::AddI_R6_R2_X1:
            r6 = reg_add_u8(r6, r2); code++; goto Next;
        case OpCode::AddI_R6_R3_X1:
            r6 = reg_add_u8(r6, r3); code++; goto Next;
        case OpCode::AddI_R6_R4_X1:
            r6 = reg_add_u8(r6, r4); code++; goto Next;
        case OpCode::AddI_R6_R5_X1:
            r6 = reg_add_u8(r6, r5); code++; goto Next;
        case OpCode::AddI_R6_R6_X1:
            r6 = reg_add_u8(r6, r6); code++; goto Next;
        case OpCode::AddI_R6_R7_X1:
            r6 = reg_add_u8(r6, r7); code++; goto Next;
        case OpCode::AddI_R7_R0_X1:
            r7 = reg_add_u8(r7, r0); code++; goto Next;
        case OpCode::AddI_R7_R1_X1:
            r7 = reg_add_u8(r7, r1); code++; goto Next;
        case OpCode::AddI_R7_R2_X1:
            r7 = reg_add_u8(r7, r2); code++; goto Next;
        case OpCode::AddI_R7_R3_X1:
            r7 = reg_add_u8(r7, r3); code++; goto Next;
        case OpCode::AddI_R7_R4_X1:
            r7 = reg_add_u8(r7, r4); code++; goto Next;
        case OpCode::AddI_R7_R5_X1:
            r7 = reg_add_u8(r7, r5); code++; goto Next;
        case OpCode::AddI_R7_R6_X1:
            r7 = reg_add_u8(r7, r6); code++; goto Next;
        case OpCode::AddI_R7_R7_X1:
            r7 = reg_add_u8(r7, r7); code++; goto Next;

        case OpCode::SubI_R0_R0_X1:
            r0 = reg_sub_u8(r0, r0); code++; goto Next;
        case OpCode::SubI_R0_R1_X1:
            r0 = reg_sub_u8(r0, r1); code++; goto Next;
        case OpCode::SubI_R0_R2_X1:
            r0 = reg_sub_u8(r0, r2); code++; goto Next;
        case OpCode::SubI_R0_R3_X1:
            r0 = reg_sub_u8(r0, r3); code++; goto Next;
        case OpCode::SubI_R0_R4_X1:
            r0 = reg_sub_u8(r0, r4); code++; goto Next;
        case OpCode::SubI_R0_R5_X1:
            r0 = reg_sub_u8(r0, r5); code++; goto Next;
        case OpCode::SubI_R0_R6_X1:
            r0 = reg_sub_u8(r0, r6); code++; goto Next;
        case OpCode::SubI_R0_R7_X1:
            r0 = reg_sub_u8(r0, r7); code++; goto Next;
        case OpCode::SubI_R1_R0_X1:
            r1 = reg_sub_u8(r1, r0); code++; goto Next;
        case OpCode::SubI_R1_R1_X1:
            r1 = reg_sub_u8(r1, r1); code++; goto Next;
        case OpCode::SubI_R1_R2_X1:
            r1 = reg_sub_u8(r1, r2); code++; goto Next;
        case OpCode::SubI_R1_R3_X1:
            r1 = reg_sub_u8(r1, r3); code++; goto Next;
        case OpCode::SubI_R1_R4_X1:
            r1 = reg_sub_u8(r1, r4); code++; goto Next;
        case OpCode::SubI_R1_R5_X1:
            r1 = reg_sub_u8(r1, r5); code++; goto Next;
        case OpCode::SubI_R1_R6_X1:
            r1 = reg_sub_u8(r1, r6); code++; goto Next;
        case OpCode::SubI_R1_R7_X1:
            r1 = reg_sub_u8(r1, r7); code++; goto Next;
        case OpCode::SubI_R2_R0_X1:
            r2 = reg_sub_u8(r2, r0); code++; goto Next;
        case OpCode::SubI_R2_R1_X1:
            r2 = reg_sub_u8(r2, r1); code++; goto Next;
        case OpCode::SubI_R2_R2_X1:
            r2 = reg_sub_u8(r2, r2); code++; goto Next;
        case OpCode::SubI_R2_R3_X1:
            r2 = reg_sub_u8(r2, r3); code++; goto Next;
        case OpCode::SubI_R2_R4_X1:
            r2 = reg_sub_u8(r2, r4); code++; goto Next;
        case OpCode::SubI_R2_R5_X1:
            r2 = reg_sub_u8(r2, r5); code++; goto Next;
        case OpCode::SubI_R2_R6_X1:
            r2 = reg_sub_u8(r2, r6); code++; goto Next;
        case OpCode::SubI_R2_R7_X1:
            r2 = reg_sub_u8(r2, r7); code++; goto Next;
        case OpCode::SubI_R3_R0_X1:
            r3 = reg_sub_u8(r3, r0); code++; goto Next;
        case OpCode::SubI_R3_R1_X1:
            r3 = reg_sub_u8(r3, r1); code++; goto Next;
        case OpCode::SubI_R3_R2_X1:
            r3 = reg_sub_u8(r3, r2); code++; goto Next;
        case OpCode::SubI_R3_R3_X1:
            r3 = reg_sub_u8(r3, r3); code++; goto Next;
        case OpCode::SubI_R3_R4_X1:
            r3 = reg_sub_u8(r3, r4); code++; goto Next;
        case OpCode::SubI_R3_R5_X1:
            r3 = reg_sub_u8(r3, r5); code++; goto Next;
        case OpCode::SubI_R3_R6_X1:
            r3 = reg_sub_u8(r3, r6); code++; goto Next;
        case OpCode::SubI_R3_R7_X1:
            r3 = reg_sub_u8(r3, r7); code++; goto Next;
        case OpCode::SubI_R4_R0_X1:
            r4 = reg_sub_u8(r4, r0); code++; goto Next;
        case OpCode::SubI_R4_R1_X1:
            r4 = reg_sub_u8(r4, r1); code++; goto Next;
        case OpCode::SubI_R4_R2_X1:
            r4 = reg_sub_u8(r4, r2); code++; goto Next;
        case OpCode::SubI_R4_R3_X1:
            r4 = reg_sub_u8(r4, r3); code++; goto Next;
        case OpCode::SubI_R4_R4_X1:
            r4 = reg_sub_u8(r4, r4); code++; goto Next;
        case OpCode::SubI_R4_R5_X1:
            r4 = reg_sub_u8(r4, r5); code++; goto Next;
        case OpCode::SubI_R4_R6_X1:
            r4 = reg_sub_u8(r4, r6); code++; goto Next;
        case OpCode::SubI_R4_R7_X1:
            r4 = reg_sub_u8(r4, r7); code++; goto Next;
        case OpCode::SubI_R5_R0_X1:
            r5 = reg_sub_u8(r5, r0); code++; goto Next;
        case OpCode::SubI_R5_R1_X1:
            r5 = reg_sub_u8(r5, r1); code++; goto Next;
        case OpCode::SubI_R5_R2_X1:
            r5 = reg_sub_u8(r5, r2); code++; goto Next;
        case OpCode::SubI_R5_R3_X1:
            r5 = reg_sub_u8(r5, r3); code++; goto Next;
        case OpCode::SubI_R5_R4_X1:
            r5 = reg_sub_u8(r5, r4); code++; goto Next;
        case OpCode::SubI_R5_R5_X1:
            r5 = reg_sub_u8(r5, r5); code++; goto Next;
        case OpCode::SubI_R5_R6_X1:
            r5 = reg_sub_u8(r5, r6); code++; goto Next;
        case OpCode::SubI_R5_R7_X1:
            r5 = reg_sub_u8(r5, r7); code++; goto Next;
        case OpCode::SubI_R6_R0_X1:
            r6 = reg_sub_u8(r6, r0); code++; goto Next;
        case OpCode::SubI_R6_R1_X1:
            r6 = reg_sub_u8(r6, r1); code++; goto Next;
        case OpCode::SubI_R6_R2_X1:
            r6 = reg_sub_u8(r6, r2); code++; goto Next;
        case OpCode::SubI_R6_R3_X1:
            r6 = reg_sub_u8(r6, r3); code++; goto Next;
        case OpCode::SubI_R6_R4_X1:
            r6 = reg_sub_u8(r6, r4); code++; goto Next;
        case OpCode::SubI_R6_R5_X1:
            r6 = reg_sub_u8(r6, r5); code++; goto Next;
        case OpCode::SubI_R6_R6_X1:
            r6 = reg_sub_u8(r6, r6); code++; goto Next;
        case OpCode::SubI_R6_R7_X1:
            r6 = reg_sub_u8(r6, r7); code++; goto Next;
        case OpCode::SubI_R7_R0_X1:
            r7 = reg_sub_u8(r7, r0); code++; goto Next;
        case OpCode::SubI_R7_R1_X1:
            r7 = reg_sub_u8(r7, r1); code++; goto Next;
        case OpCode::SubI_R7_R2_X1:
            r7 = reg_sub_u8(r7, r2); code++; goto Next;
        case OpCode::SubI_R7_R3_X1:
            r7 = reg_sub_u8(r7, r3); code++; goto Next;
        case OpCode::SubI_R7_R4_X1:
            r7 = reg_sub_u8(r7, r4); code++; goto Next;
        case OpCode::SubI_R7_R5_X1:
            r7 = reg_sub_u8(r7, r5); code++; goto Next;
        case OpCode::SubI_R7_R6_X1:
            r7 = reg_sub_u8(r7, r6); code++; goto Next;
        case OpCode::SubI_R7_R7_X1:
            r7 = reg_sub_u8(r7, r7); code++; goto Next;

        case OpCode::MulI_R0_R0_X1:
            r0 = reg_mul_u8(r0, r0); code++; goto Next;
        case OpCode::MulI_R0_R1_X1:
            r0 = reg_mul_u8(r0, r1); code++; goto Next;
        case OpCode::MulI_R0_R2_X1:
            r0 = reg_mul_u8(r0, r2); code++; goto Next;
        case OpCode::MulI_R0_R3_X1:
            r0 = reg_mul_u8(r0, r3); code++; goto Next;
        case OpCode::MulI_R0_R4_X1:
            r0 = reg_mul_u8(r0, r4); code++; goto Next;
        case OpCode::MulI_R0_R5_X1:
            r0 = reg_mul_u8(r0, r5); code++; goto Next;
        case OpCode::MulI_R0_R6_X1:
            r0 = reg_mul_u8(r0, r6); code++; goto Next;
        case OpCode::MulI_R0_R7_X1:
            r0 = reg_mul_u8(r0, r7); code++; goto Next;
        case OpCode::MulI_R1_R0_X1:
            r1 = reg_mul_u8(r1, r0); code++; goto Next;
        case OpCode::MulI_R1_R1_X1:
            r1 = reg_mul_u8(r1, r1); code++; goto Next;
        case OpCode::MulI_R1_R2_X1:
            r1 = reg_mul_u8(r1, r2); code++; goto Next;
        case OpCode::MulI_R1_R3_X1:
            r1 = reg_mul_u8(r1, r3); code++; goto Next;
        case OpCode::MulI_R1_R4_X1:
            r1 = reg_mul_u8(r1, r4); code++; goto Next;
        case OpCode::MulI_R1_R5_X1:
            r1 = reg_mul_u8(r1, r5); code++; goto Next;
        case OpCode::MulI_R1_R6_X1:
            r1 = reg_mul_u8(r1, r6); code++; goto Next;
        case OpCode::MulI_R1_R7_X1:
            r1 = reg_mul_u8(r1, r7); code++; goto Next;
        case OpCode::MulI_R2_R0_X1:
            r2 = reg_mul_u8(r2, r0); code++; goto Next;
        case OpCode::MulI_R2_R1_X1:
            r2 = reg_mul_u8(r2, r1); code++; goto Next;
        case OpCode::MulI_R2_R2_X1:
            r2 = reg_mul_u8(r2, r2); code++; goto Next;
        case OpCode::MulI_R2_R3_X1:
            r2 = reg_mul_u8(r2, r3); code++; goto Next;
        case OpCode::MulI_R2_R4_X1:
            r2 = reg_mul_u8(r2, r4); code++; goto Next;
        case OpCode::MulI_R2_R5_X1:
            r2 = reg_mul_u8(r2, r5); code++; goto Next;
        case OpCode::MulI_R2_R6_X1:
            r2 = reg_mul_u8(r2, r6); code++; goto Next;
        case OpCode::MulI_R2_R7_X1:
            r2 = reg_mul_u8(r2, r7); code++; goto Next;
        case OpCode::MulI_R3_R0_X1:
            r3 = reg_mul_u8(r3, r0); code++; goto Next;
        case OpCode::MulI_R3_R1_X1:
            r3 = reg_mul_u8(r3, r1); code++; goto Next;
        case OpCode::MulI_R3_R2_X1:
            r3 = reg_mul_u8(r3, r2); code++; goto Next;
        case OpCode::MulI_R3_R3_X1:
            r3 = reg_mul_u8(r3, r3); code++; goto Next;
        case OpCode::MulI_R3_R4_X1:
            r3 = reg_mul_u8(r3, r4); code++; goto Next;
        case OpCode::MulI_R3_R5_X1:
            r3 = reg_mul_u8(r3, r5); code++; goto Next;
        case OpCode::MulI_R3_R6_X1:
            r3 = reg_mul_u8(r3, r6); code++; goto Next;
        case OpCode::MulI_R3_R7_X1:
            r3 = reg_mul_u8(r3, r7); code++; goto Next;
        case OpCode::MulI_R4_R0_X1:
            r4 = reg_mul_u8(r4, r0); code++; goto Next;
        case OpCode::MulI_R4_R1_X1:
            r4 = reg_mul_u8(r4, r1); code++; goto Next;
        case OpCode::MulI_R4_R2_X1:
            r4 = reg_mul_u8(r4, r2); code++; goto Next;
        case OpCode::MulI_R4_R3_X1:
            r4 = reg_mul_u8(r4, r3); code++; goto Next;
        case OpCode::MulI_R4_R4_X1:
            r4 = reg_mul_u8(r4, r4); code++; goto Next;
        case OpCode::MulI_R4_R5_X1:
            r4 = reg_mul_u8(r4, r5); code++; goto Next;
        case OpCode::MulI_R4_R6_X1:
            r4 = reg_mul_u8(r4, r6); code++; goto Next;
        case OpCode::MulI_R4_R7_X1:
            r4 = reg_mul_u8(r4, r7); code++; goto Next;
        case OpCode::MulI_R5_R0_X1:
            r5 = reg_mul_u8(r5, r0); code++; goto Next;
        case OpCode::MulI_R5_R1_X1:
            r5 = reg_mul_u8(r5, r1); code++; goto Next;
        case OpCode::MulI_R5_R2_X1:
            r5 = reg_mul_u8(r5, r2); code++; goto Next;
        case OpCode::MulI_R5_R3_X1:
            r5 = reg_mul_u8(r5, r3); code++; goto Next;
        case OpCode::MulI_R5_R4_X1:
            r5 = reg_mul_u8(r5, r4); code++; goto Next;
        case OpCode::MulI_R5_R5_X1:
            r5 = reg_mul_u8(r5, r5); code++; goto Next;
        case OpCode::MulI_R5_R6_X1:
            r5 = reg_mul_u8(r5, r6); code++; goto Next;
        case OpCode::MulI_R5_R7_X1:
            r5 = reg_mul_u8(r5, r7); code++; goto Next;
        case OpCode::MulI_R6_R0_X1:
            r6 = reg_mul_u8(r6, r0); code++; goto Next;
        case OpCode::MulI_R6_R1_X1:
            r6 = reg_mul_u8(r6, r1); code++; goto Next;
        case OpCode::MulI_R6_R2_X1:
            r6 = reg_mul_u8(r6, r2); code++; goto Next;
        case OpCode::MulI_R6_R3_X1:
            r6 = reg_mul_u8(r6, r3); code++; goto Next;
        case OpCode::MulI_R6_R4_X1:
            r6 = reg_mul_u8(r6, r4); code++; goto Next;
        case OpCode::MulI_R6_R5_X1:
            r6 = reg_mul_u8(r6, r5); code++; goto Next;
        case OpCode::MulI_R6_R6_X1:
            r6 = reg_mul_u8(r6, r6); code++; goto Next;
        case OpCode::MulI_R6_R7_X1:
            r6 = reg_mul_u8(r6, r7); code++; goto Next;
        case OpCode::MulI_R7_R0_X1:
            r7 = reg_mul_u8(r7, r0); code++; goto Next;
        case OpCode::MulI_R7_R1_X1:
            r7 = reg_mul_u8(r7, r1); code++; goto Next;
        case OpCode::MulI_R7_R2_X1:
            r7 = reg_mul_u8(r7, r2); code++; goto Next;
        case OpCode::MulI_R7_R3_X1:
            r7 = reg_mul_u8(r7, r3); code++; goto Next;
        case OpCode::MulI_R7_R4_X1:
            r7 = reg_mul_u8(r7, r4); code++; goto Next;
        case OpCode::MulI_R7_R5_X1:
            r7 = reg_mul_u8(r7, r5); code++; goto Next;
        case OpCode::MulI_R7_R6_X1:
            r7 = reg_mul_u8(r7, r6); code++; goto Next;
        case OpCode::MulI_R7_R7_X1:
            r7 = reg_mul_u8(r7, r7); code++; goto Next;

        case OpCode::DivI_R0_R0_X1:
            r0 = reg_div_u8(r0, r0); code++; goto Next;
        case OpCode::DivI_R0_R1_X1:
            r0 = reg_div_u8(r0, r1); code++; goto Next;
        case OpCode::DivI_R0_R2_X1:
            r0 = reg_div_u8(r0, r2); code++; goto Next;
        case OpCode::DivI_R0_R3_X1:
            r0 = reg_div_u8(r0, r3); code++; goto Next;
        case OpCode::DivI_R0_R4_X1:
            r0 = reg_div_u8(r0, r4); code++; goto Next;
        case OpCode::DivI_R0_R5_X1:
            r0 = reg_div_u8(r0, r5); code++; goto Next;
        case OpCode::DivI_R0_R6_X1:
            r0 = reg_div_u8(r0, r6); code++; goto Next;
        case OpCode::DivI_R0_R7_X1:
            r0 = reg_div_u8(r0, r7); code++; goto Next;
        case OpCode::DivI_R1_R0_X1:
            r1 = reg_div_u8(r1, r0); code++; goto Next;
        case OpCode::DivI_R1_R1_X1:
            r1 = reg_div_u8(r1, r1); code++; goto Next;
        case OpCode::DivI_R1_R2_X1:
            r1 = reg_div_u8(r1, r2); code++; goto Next;
        case OpCode::DivI_R1_R3_X1:
            r1 = reg_div_u8(r1, r3); code++; goto Next;
        case OpCode::DivI_R1_R4_X1:
            r1 = reg_div_u8(r1, r4); code++; goto Next;
        case OpCode::DivI_R1_R5_X1:
            r1 = reg_div_u8(r1, r5); code++; goto Next;
        case OpCode::DivI_R1_R6_X1:
            r1 = reg_div_u8(r1, r6); code++; goto Next;
        case OpCode::DivI_R1_R7_X1:
            r1 = reg_div_u8(r1, r7); code++; goto Next;
        case OpCode::DivI_R2_R0_X1:
            r2 = reg_div_u8(r2, r0); code++; goto Next;
        case OpCode::DivI_R2_R1_X1:
            r2 = reg_div_u8(r2, r1); code++; goto Next;
        case OpCode::DivI_R2_R2_X1:
            r2 = reg_div_u8(r2, r2); code++; goto Next;
        case OpCode::DivI_R2_R3_X1:
            r2 = reg_div_u8(r2, r3); code++; goto Next;
        case OpCode::DivI_R2_R4_X1:
            r2 = reg_div_u8(r2, r4); code++; goto Next;
        case OpCode::DivI_R2_R5_X1:
            r2 = reg_div_u8(r2, r5); code++; goto Next;
        case OpCode::DivI_R2_R6_X1:
            r2 = reg_div_u8(r2, r6); code++; goto Next;
        case OpCode::DivI_R2_R7_X1:
            r2 = reg_div_u8(r2, r7); code++; goto Next;
        case OpCode::DivI_R3_R0_X1:
            r3 = reg_div_u8(r3, r0); code++; goto Next;
        case OpCode::DivI_R3_R1_X1:
            r3 = reg_div_u8(r3, r1); code++; goto Next;
        case OpCode::DivI_R3_R2_X1:
            r3 = reg_div_u8(r3, r2); code++; goto Next;
        case OpCode::DivI_R3_R3_X1:
            r3 = reg_div_u8(r3, r3); code++; goto Next;
        case OpCode::DivI_R3_R4_X1:
            r3 = reg_div_u8(r3, r4); code++; goto Next;
        case OpCode::DivI_R3_R5_X1:
            r3 = reg_div_u8(r3, r5); code++; goto Next;
        case OpCode::DivI_R3_R6_X1:
            r3 = reg_div_u8(r3, r6); code++; goto Next;
        case OpCode::DivI_R3_R7_X1:
            r3 = reg_div_u8(r3, r7); code++; goto Next;
        case OpCode::DivI_R4_R0_X1:
            r4 = reg_div_u8(r4, r0); code++; goto Next;
        case OpCode::DivI_R4_R1_X1:
            r4 = reg_div_u8(r4, r1); code++; goto Next;
        case OpCode::DivI_R4_R2_X1:
            r4 = reg_div_u8(r4, r2); code++; goto Next;
        case OpCode::DivI_R4_R3_X1:
            r4 = reg_div_u8(r4, r3); code++; goto Next;
        case OpCode::DivI_R4_R4_X1:
            r4 = reg_div_u8(r4, r4); code++; goto Next;
        case OpCode::DivI_R4_R5_X1:
            r4 = reg_div_u8(r4, r5); code++; goto Next;
        case OpCode::DivI_R4_R6_X1:
            r4 = reg_div_u8(r4, r6); code++; goto Next;
        case OpCode::DivI_R4_R7_X1:
            r4 = reg_div_u8(r4, r7); code++; goto Next;
        case OpCode::DivI_R5_R0_X1:
            r5 = reg_div_u8(r5, r0); code++; goto Next;
        case OpCode::DivI_R5_R1_X1:
            r5 = reg_div_u8(r5, r1); code++; goto Next;
        case OpCode::DivI_R5_R2_X1:
            r5 = reg_div_u8(r5, r2); code++; goto Next;
        case OpCode::DivI_R5_R3_X1:
            r5 = reg_div_u8(r5, r3); code++; goto Next;
        case OpCode::DivI_R5_R4_X1:
            r5 = reg_div_u8(r5, r4); code++; goto Next;
        case OpCode::DivI_R5_R5_X1:
            r5 = reg_div_u8(r5, r5); code++; goto Next;
        case OpCode::DivI_R5_R6_X1:
            r5 = reg_div_u8(r5, r6); code++; goto Next;
        case OpCode::DivI_R5_R7_X1:
            r5 = reg_div_u8(r5, r7); code++; goto Next;
        case OpCode::DivI_R6_R0_X1:
            r6 = reg_div_u8(r6, r0); code++; goto Next;
        case OpCode::DivI_R6_R1_X1:
            r6 = reg_div_u8(r6, r1); code++; goto Next;
        case OpCode::DivI_R6_R2_X1:
            r6 = reg_div_u8(r6, r2); code++; goto Next;
        case OpCode::DivI_R6_R3_X1:
            r6 = reg_div_u8(r6, r3); code++; goto Next;
        case OpCode::DivI_R6_R4_X1:
            r6 = reg_div_u8(r6, r4); code++; goto Next;
        case OpCode::DivI_R6_R5_X1:
            r6 = reg_div_u8(r6, r5); code++; goto Next;
        case OpCode::DivI_R6_R6_X1:
            r6 = reg_div_u8(r6, r6); code++; goto Next;
        case OpCode::DivI_R6_R7_X1:
            r6 = reg_div_u8(r6, r7); code++; goto Next;
        case OpCode::DivI_R7_R0_X1:
            r7 = reg_div_u8(r7, r0); code++; goto Next;
        case OpCode::DivI_R7_R1_X1:
            r7 = reg_div_u8(r7, r1); code++; goto Next;
        case OpCode::DivI_R7_R2_X1:
            r7 = reg_div_u8(r7, r2); code++; goto Next;
        case OpCode::DivI_R7_R3_X1:
            r7 = reg_div_u8(r7, r3); code++; goto Next;
        case OpCode::DivI_R7_R4_X1:
            r7 = reg_div_u8(r7, r4); code++; goto Next;
        case OpCode::DivI_R7_R5_X1:
            r7 = reg_div_u8(r7, r5); code++; goto Next;
        case OpCode::DivI_R7_R6_X1:
            r7 = reg_div_u8(r7, r6); code++; goto Next;
        case OpCode::DivI_R7_R7_X1:
            r7 = reg_div_u8(r7, r7); code++; goto Next;

        case OpCode::AddI_R0_R0_X2:
            r0 = reg_add_u16(r0, r0); code++; goto Next;
        case OpCode::AddI_R0_R1_X2:
            r0 = reg_add_u16(r0, r1); code++; goto Next;
        case OpCode::AddI_R0_R2_X2:
            r0 = reg_add_u16(r0, r2); code++; goto Next;
        case OpCode::AddI_R0_R3_X2:
            r0 = reg_add_u16(r0, r3); code++; goto Next;
        case OpCode::AddI_R0_R4_X2:
            r0 = reg_add_u16(r0, r4); code++; goto Next;
        case OpCode::AddI_R0_R5_X2:
            r0 = reg_add_u16(r0, r5); code++; goto Next;
        case OpCode::AddI_R0_R6_X2:
            r0 = reg_add_u16(r0, r6); code++; goto Next;
        case OpCode::AddI_R0_R7_X2:
            r0 = reg_add_u16(r0, r7); code++; goto Next;
        case OpCode::AddI_R1_R0_X2:
            r1 = reg_add_u16(r1, r0); code++; goto Next;
        case OpCode::AddI_R1_R1_X2:
            r1 = reg_add_u16(r1, r1); code++; goto Next;
        case OpCode::AddI_R1_R2_X2:
            r1 = reg_add_u16(r1, r2); code++; goto Next;
        case OpCode::AddI_R1_R3_X2:
            r1 = reg_add_u16(r1, r3); code++; goto Next;
        case OpCode::AddI_R1_R4_X2:
            r1 = reg_add_u16(r1, r4); code++; goto Next;
        case OpCode::AddI_R1_R5_X2:
            r1 = reg_add_u16(r1, r5); code++; goto Next;
        case OpCode::AddI_R1_R6_X2:
            r1 = reg_add_u16(r1, r6); code++; goto Next;
        case OpCode::AddI_R1_R7_X2:
            r1 = reg_add_u16(r1, r7); code++; goto Next;
        case OpCode::AddI_R2_R0_X2:
            r2 = reg_add_u16(r2, r0); code++; goto Next;
        case OpCode::AddI_R2_R1_X2:
            r2 = reg_add_u16(r2, r1); code++; goto Next;
        case OpCode::AddI_R2_R2_X2:
            r2 = reg_add_u16(r2, r2); code++; goto Next;
        case OpCode::AddI_R2_R3_X2:
            r2 = reg_add_u16(r2, r3); code++; goto Next;
        case OpCode::AddI_R2_R4_X2:
            r2 = reg_add_u16(r2, r4); code++; goto Next;
        case OpCode::AddI_R2_R5_X2:
            r2 = reg_add_u16(r2, r5); code++; goto Next;
        case OpCode::AddI_R2_R6_X2:
            r2 = reg_add_u16(r2, r6); code++; goto Next;
        case OpCode::AddI_R2_R7_X2:
            r2 = reg_add_u16(r2, r7); code++; goto Next;
        case OpCode::AddI_R3_R0_X2:
            r3 = reg_add_u16(r3, r0); code++; goto Next;
        case OpCode::AddI_R3_R1_X2:
            r3 = reg_add_u16(r3, r1); code++; goto Next;
        case OpCode::AddI_R3_R2_X2:
            r3 = reg_add_u16(r3, r2); code++; goto Next;
        case OpCode::AddI_R3_R3_X2:
            r3 = reg_add_u16(r3, r3); code++; goto Next;
        case OpCode::AddI_R3_R4_X2:
            r3 = reg_add_u16(r3, r4); code++; goto Next;
        case OpCode::AddI_R3_R5_X2:
            r3 = reg_add_u16(r3, r5); code++; goto Next;
        case OpCode::AddI_R3_R6_X2:
            r3 = reg_add_u16(r3, r6); code++; goto Next;
        case OpCode::AddI_R3_R7_X2:
            r3 = reg_add_u16(r3, r7); code++; goto Next;
        case OpCode::AddI_R4_R0_X2:
            r4 = reg_add_u16(r4, r0); code++; goto Next;
        case OpCode::AddI_R4_R1_X2:
            r4 = reg_add_u16(r4, r1); code++; goto Next;
        case OpCode::AddI_R4_R2_X2:
            r4 = reg_add_u16(r4, r2); code++; goto Next;
        case OpCode::AddI_R4_R3_X2:
            r4 = reg_add_u16(r4, r3); code++; goto Next;
        case OpCode::AddI_R4_R4_X2:
            r4 = reg_add_u16(r4, r4); code++; goto Next;
        case OpCode::AddI_R4_R5_X2:
            r4 = reg_add_u16(r4, r5); code++; goto Next;
        case OpCode::AddI_R4_R6_X2:
            r4 = reg_add_u16(r4, r6); code++; goto Next;
        case OpCode::AddI_R4_R7_X2:
            r4 = reg_add_u16(r4, r7); code++; goto Next;
        case OpCode::AddI_R5_R0_X2:
            r5 = reg_add_u16(r5, r0); code++; goto Next;
        case OpCode::AddI_R5_R1_X2:
            r5 = reg_add_u16(r5, r1); code++; goto Next;
        case OpCode::AddI_R5_R2_X2:
            r5 = reg_add_u16(r5, r2); code++; goto Next;
        case OpCode::AddI_R5_R3_X2:
            r5 = reg_add_u16(r5, r3); code++; goto Next;
        case OpCode::AddI_R5_R4_X2:
            r5 = reg_add_u16(r5, r4); code++; goto Next;
        case OpCode::AddI_R5_R5_X2:
            r5 = reg_add_u16(r5, r5); code++; goto Next;
        case OpCode::AddI_R5_R6_X2:
            r5 = reg_add_u16(r5, r6); code++; goto Next;
        case OpCode::AddI_R5_R7_X2:
            r5 = reg_add_u16(r5, r7); code++; goto Next;
        case OpCode::AddI_R6_R0_X2:
            r6 = reg_add_u16(r6, r0); code++; goto Next;
        case OpCode::AddI_R6_R1_X2:
            r6 = reg_add_u16(r6, r1); code++; goto Next;
        case OpCode::AddI_R6_R2_X2:
            r6 = reg_add_u16(r6, r2); code++; goto Next;
        case OpCode::AddI_R6_R3_X2:
            r6 = reg_add_u16(r6, r3); code++; goto Next;
        case OpCode::AddI_R6_R4_X2:
            r6 = reg_add_u16(r6, r4); code++; goto Next;
        case OpCode::AddI_R6_R5_X2:
            r6 = reg_add_u16(r6, r5); code++; goto Next;
        case OpCode::AddI_R6_R6_X2:
            r6 = reg_add_u16(r6, r6); code++; goto Next;
        case OpCode::AddI_R6_R7_X2:
            r6 = reg_add_u16(r6, r7); code++; goto Next;
        case OpCode::AddI_R7_R0_X2:
            r7 = reg_add_u16(r7, r0); code++; goto Next;
        case OpCode::AddI_R7_R1_X2:
            r7 = reg_add_u16(r7, r1); code++; goto Next;
        case OpCode::AddI_R7_R2_X2:
            r7 = reg_add_u16(r7, r2); code++; goto Next;
        case OpCode::AddI_R7_R3_X2:
            r7 = reg_add_u16(r7, r3); code++; goto Next;
        case OpCode::AddI_R7_R4_X2:
            r7 = reg_add_u16(r7, r4); code++; goto Next;
        case OpCode::AddI_R7_R5_X2:
            r7 = reg_add_u16(r7, r5); code++; goto Next;
        case OpCode::AddI_R7_R6_X2:
            r7 = reg_add_u16(r7, r6); code++; goto Next;
        case OpCode::AddI_R7_R7_X2:
            r7 = reg_add_u16(r7, r7); code++; goto Next;

        case OpCode::SubI_R0_R0_X2:
            r0 = reg_sub_u16(r0, r0); code++; goto Next;
        case OpCode::SubI_R0_R1_X2:
            r0 = reg_sub_u16(r0, r1); code++; goto Next;
        case OpCode::SubI_R0_R2_X2:
            r0 = reg_sub_u16(r0, r2); code++; goto Next;
        case OpCode::SubI_R0_R3_X2:
            r0 = reg_sub_u16(r0, r3); code++; goto Next;
        case OpCode::SubI_R0_R4_X2:
            r0 = reg_sub_u16(r0, r4); code++; goto Next;
        case OpCode::SubI_R0_R5_X2:
            r0 = reg_sub_u16(r0, r5); code++; goto Next;
        case OpCode::SubI_R0_R6_X2:
            r0 = reg_sub_u16(r0, r6); code++; goto Next;
        case OpCode::SubI_R0_R7_X2:
            r0 = reg_sub_u16(r0, r7); code++; goto Next;
        case OpCode::SubI_R1_R0_X2:
            r1 = reg_sub_u16(r1, r0); code++; goto Next;
        case OpCode::SubI_R1_R1_X2:
            r1 = reg_sub_u16(r1, r1); code++; goto Next;
        case OpCode::SubI_R1_R2_X2:
            r1 = reg_sub_u16(r1, r2); code++; goto Next;
        case OpCode::SubI_R1_R3_X2:
            r1 = reg_sub_u16(r1, r3); code++; goto Next;
        case OpCode::SubI_R1_R4_X2:
            r1 = reg_sub_u16(r1, r4); code++; goto Next;
        case OpCode::SubI_R1_R5_X2:
            r1 = reg_sub_u16(r1, r5); code++; goto Next;
        case OpCode::SubI_R1_R6_X2:
            r1 = reg_sub_u16(r1, r6); code++; goto Next;
        case OpCode::SubI_R1_R7_X2:
            r1 = reg_sub_u16(r1, r7); code++; goto Next;
        case OpCode::SubI_R2_R0_X2:
            r2 = reg_sub_u16(r2, r0); code++; goto Next;
        case OpCode::SubI_R2_R1_X2:
            r2 = reg_sub_u16(r2, r1); code++; goto Next;
        case OpCode::SubI_R2_R2_X2:
            r2 = reg_sub_u16(r2, r2); code++; goto Next;
        case OpCode::SubI_R2_R3_X2:
            r2 = reg_sub_u16(r2, r3); code++; goto Next;
        case OpCode::SubI_R2_R4_X2:
            r2 = reg_sub_u16(r2, r4); code++; goto Next;
        case OpCode::SubI_R2_R5_X2:
            r2 = reg_sub_u16(r2, r5); code++; goto Next;
        case OpCode::SubI_R2_R6_X2:
            r2 = reg_sub_u16(r2, r6); code++; goto Next;
        case OpCode::SubI_R2_R7_X2:
            r2 = reg_sub_u16(r2, r7); code++; goto Next;
        case OpCode::SubI_R3_R0_X2:
            r3 = reg_sub_u16(r3, r0); code++; goto Next;
        case OpCode::SubI_R3_R1_X2:
            r3 = reg_sub_u16(r3, r1); code++; goto Next;
        case OpCode::SubI_R3_R2_X2:
            r3 = reg_sub_u16(r3, r2); code++; goto Next;
        case OpCode::SubI_R3_R3_X2:
            r3 = reg_sub_u16(r3, r3); code++; goto Next;
        case OpCode::SubI_R3_R4_X2:
            r3 = reg_sub_u16(r3, r4); code++; goto Next;
        case OpCode::SubI_R3_R5_X2:
            r3 = reg_sub_u16(r3, r5); code++; goto Next;
        case OpCode::SubI_R3_R6_X2:
            r3 = reg_sub_u16(r3, r6); code++; goto Next;
        case OpCode::SubI_R3_R7_X2:
            r3 = reg_sub_u16(r3, r7); code++; goto Next;
        case OpCode::SubI_R4_R0_X2:
            r4 = reg_sub_u16(r4, r0); code++; goto Next;
        case OpCode::SubI_R4_R1_X2:
            r4 = reg_sub_u16(r4, r1); code++; goto Next;
        case OpCode::SubI_R4_R2_X2:
            r4 = reg_sub_u16(r4, r2); code++; goto Next;
        case OpCode::SubI_R4_R3_X2:
            r4 = reg_sub_u16(r4, r3); code++; goto Next;
        case OpCode::SubI_R4_R4_X2:
            r4 = reg_sub_u16(r4, r4); code++; goto Next;
        case OpCode::SubI_R4_R5_X2:
            r4 = reg_sub_u16(r4, r5); code++; goto Next;
        case OpCode::SubI_R4_R6_X2:
            r4 = reg_sub_u16(r4, r6); code++; goto Next;
        case OpCode::SubI_R4_R7_X2:
            r4 = reg_sub_u16(r4, r7); code++; goto Next;
        case OpCode::SubI_R5_R0_X2:
            r5 = reg_sub_u16(r5, r0); code++; goto Next;
        case OpCode::SubI_R5_R1_X2:
            r5 = reg_sub_u16(r5, r1); code++; goto Next;
        case OpCode::SubI_R5_R2_X2:
            r5 = reg_sub_u16(r5, r2); code++; goto Next;
        case OpCode::SubI_R5_R3_X2:
            r5 = reg_sub_u16(r5, r3); code++; goto Next;
        case OpCode::SubI_R5_R4_X2:
            r5 = reg_sub_u16(r5, r4); code++; goto Next;
        case OpCode::SubI_R5_R5_X2:
            r5 = reg_sub_u16(r5, r5); code++; goto Next;
        case OpCode::SubI_R5_R6_X2:
            r5 = reg_sub_u16(r5, r6); code++; goto Next;
        case OpCode::SubI_R5_R7_X2:
            r5 = reg_sub_u16(r5, r7); code++; goto Next;
        case OpCode::SubI_R6_R0_X2:
            r6 = reg_sub_u16(r6, r0); code++; goto Next;
        case OpCode::SubI_R6_R1_X2:
            r6 = reg_sub_u16(r6, r1); code++; goto Next;
        case OpCode::SubI_R6_R2_X2:
            r6 = reg_sub_u16(r6, r2); code++; goto Next;
        case OpCode::SubI_R6_R3_X2:
            r6 = reg_sub_u16(r6, r3); code++; goto Next;
        case OpCode::SubI_R6_R4_X2:
            r6 = reg_sub_u16(r6, r4); code++; goto Next;
        case OpCode::SubI_R6_R5_X2:
            r6 = reg_sub_u16(r6, r5); code++; goto Next;
        case OpCode::SubI_R6_R6_X2:
            r6 = reg_sub_u16(r6, r6); code++; goto Next;
        case OpCode::SubI_R6_R7_X2:
            r6 = reg_sub_u16(r6, r7); code++; goto Next;
        case OpCode::SubI_R7_R0_X2:
            r7 = reg_sub_u16(r7, r0); code++; goto Next;
        case OpCode::SubI_R7_R1_X2:
            r7 = reg_sub_u16(r7, r1); code++; goto Next;
        case OpCode::SubI_R7_R2_X2:
            r7 = reg_sub_u16(r7, r2); code++; goto Next;
        case OpCode::SubI_R7_R3_X2:
            r7 = reg_sub_u16(r7, r3); code++; goto Next;
        case OpCode::SubI_R7_R4_X2:
            r7 = reg_sub_u16(r7, r4); code++; goto Next;
        case OpCode::SubI_R7_R5_X2:
            r7 = reg_sub_u16(r7, r5); code++; goto Next;
        case OpCode::SubI_R7_R6_X2:
            r7 = reg_sub_u16(r7, r6); code++; goto Next;
        case OpCode::SubI_R7_R7_X2:
            r7 = reg_sub_u16(r7, r7); code++; goto Next;

        case OpCode::MulI_R0_R0_X2:
            r0 = reg_mul_u16(r0, r0); code++; goto Next;
        case OpCode::MulI_R0_R1_X2:
            r0 = reg_mul_u16(r0, r1); code++; goto Next;
        case OpCode::MulI_R0_R2_X2:
            r0 = reg_mul_u16(r0, r2); code++; goto Next;
        case OpCode::MulI_R0_R3_X2:
            r0 = reg_mul_u16(r0, r3); code++; goto Next;
        case OpCode::MulI_R0_R4_X2:
            r0 = reg_mul_u16(r0, r4); code++; goto Next;
        case OpCode::MulI_R0_R5_X2:
            r0 = reg_mul_u16(r0, r5); code++; goto Next;
        case OpCode::MulI_R0_R6_X2:
            r0 = reg_mul_u16(r0, r6); code++; goto Next;
        case OpCode::MulI_R0_R7_X2:
            r0 = reg_mul_u16(r0, r7); code++; goto Next;
        case OpCode::MulI_R1_R0_X2:
            r1 = reg_mul_u16(r1, r0); code++; goto Next;
        case OpCode::MulI_R1_R1_X2:
            r1 = reg_mul_u16(r1, r1); code++; goto Next;
        case OpCode::MulI_R1_R2_X2:
            r1 = reg_mul_u16(r1, r2); code++; goto Next;
        case OpCode::MulI_R1_R3_X2:
            r1 = reg_mul_u16(r1, r3); code++; goto Next;
        case OpCode::MulI_R1_R4_X2:
            r1 = reg_mul_u16(r1, r4); code++; goto Next;
        case OpCode::MulI_R1_R5_X2:
            r1 = reg_mul_u16(r1, r5); code++; goto Next;
        case OpCode::MulI_R1_R6_X2:
            r1 = reg_mul_u16(r1, r6); code++; goto Next;
        case OpCode::MulI_R1_R7_X2:
            r1 = reg_mul_u16(r1, r7); code++; goto Next;
        case OpCode::MulI_R2_R0_X2:
            r2 = reg_mul_u16(r2, r0); code++; goto Next;
        case OpCode::MulI_R2_R1_X2:
            r2 = reg_mul_u16(r2, r1); code++; goto Next;
        case OpCode::MulI_R2_R2_X2:
            r2 = reg_mul_u16(r2, r2); code++; goto Next;
        case OpCode::MulI_R2_R3_X2:
            r2 = reg_mul_u16(r2, r3); code++; goto Next;
        case OpCode::MulI_R2_R4_X2:
            r2 = reg_mul_u16(r2, r4); code++; goto Next;
        case OpCode::MulI_R2_R5_X2:
            r2 = reg_mul_u16(r2, r5); code++; goto Next;
        case OpCode::MulI_R2_R6_X2:
            r2 = reg_mul_u16(r2, r6); code++; goto Next;
        case OpCode::MulI_R2_R7_X2:
            r2 = reg_mul_u16(r2, r7); code++; goto Next;
        case OpCode::MulI_R3_R0_X2:
            r3 = reg_mul_u16(r3, r0); code++; goto Next;
        case OpCode::MulI_R3_R1_X2:
            r3 = reg_mul_u16(r3, r1); code++; goto Next;
        case OpCode::MulI_R3_R2_X2:
            r3 = reg_mul_u16(r3, r2); code++; goto Next;
        case OpCode::MulI_R3_R3_X2:
            r3 = reg_mul_u16(r3, r3); code++; goto Next;
        case OpCode::MulI_R3_R4_X2:
            r3 = reg_mul_u16(r3, r4); code++; goto Next;
        case OpCode::MulI_R3_R5_X2:
            r3 = reg_mul_u16(r3, r5); code++; goto Next;
        case OpCode::MulI_R3_R6_X2:
            r3 = reg_mul_u16(r3, r6); code++; goto Next;
        case OpCode::MulI_R3_R7_X2:
            r3 = reg_mul_u16(r3, r7); code++; goto Next;
        case OpCode::MulI_R4_R0_X2:
            r4 = reg_mul_u16(r4, r0); code++; goto Next;
        case OpCode::MulI_R4_R1_X2:
            r4 = reg_mul_u16(r4, r1); code++; goto Next;
        case OpCode::MulI_R4_R2_X2:
            r4 = reg_mul_u16(r4, r2); code++; goto Next;
        case OpCode::MulI_R4_R3_X2:
            r4 = reg_mul_u16(r4, r3); code++; goto Next;
        case OpCode::MulI_R4_R4_X2:
            r4 = reg_mul_u16(r4, r4); code++; goto Next;
        case OpCode::MulI_R4_R5_X2:
            r4 = reg_mul_u16(r4, r5); code++; goto Next;
        case OpCode::MulI_R4_R6_X2:
            r4 = reg_mul_u16(r4, r6); code++; goto Next;
        case OpCode::MulI_R4_R7_X2:
            r4 = reg_mul_u16(r4, r7); code++; goto Next;
        case OpCode::MulI_R5_R0_X2:
            r5 = reg_mul_u16(r5, r0); code++; goto Next;
        case OpCode::MulI_R5_R1_X2:
            r5 = reg_mul_u16(r5, r1); code++; goto Next;
        case OpCode::MulI_R5_R2_X2:
            r5 = reg_mul_u16(r5, r2); code++; goto Next;
        case OpCode::MulI_R5_R3_X2:
            r5 = reg_mul_u16(r5, r3); code++; goto Next;
        case OpCode::MulI_R5_R4_X2:
            r5 = reg_mul_u16(r5, r4); code++; goto Next;
        case OpCode::MulI_R5_R5_X2:
            r5 = reg_mul_u16(r5, r5); code++; goto Next;
        case OpCode::MulI_R5_R6_X2:
            r5 = reg_mul_u16(r5, r6); code++; goto Next;
        case OpCode::MulI_R5_R7_X2:
            r5 = reg_mul_u16(r5, r7); code++; goto Next;
        case OpCode::MulI_R6_R0_X2:
            r6 = reg_mul_u16(r6, r0); code++; goto Next;
        case OpCode::MulI_R6_R1_X2:
            r6 = reg_mul_u16(r6, r1); code++; goto Next;
        case OpCode::MulI_R6_R2_X2:
            r6 = reg_mul_u16(r6, r2); code++; goto Next;
        case OpCode::MulI_R6_R3_X2:
            r6 = reg_mul_u16(r6, r3); code++; goto Next;
        case OpCode::MulI_R6_R4_X2:
            r6 = reg_mul_u16(r6, r4); code++; goto Next;
        case OpCode::MulI_R6_R5_X2:
            r6 = reg_mul_u16(r6, r5); code++; goto Next;
        case OpCode::MulI_R6_R6_X2:
            r6 = reg_mul_u16(r6, r6); code++; goto Next;
        case OpCode::MulI_R6_R7_X2:
            r6 = reg_mul_u16(r6, r7); code++; goto Next;
        case OpCode::MulI_R7_R0_X2:
            r7 = reg_mul_u16(r7, r0); code++; goto Next;
        case OpCode::MulI_R7_R1_X2:
            r7 = reg_mul_u16(r7, r1); code++; goto Next;
        case OpCode::MulI_R7_R2_X2:
            r7 = reg_mul_u16(r7, r2); code++; goto Next;
        case OpCode::MulI_R7_R3_X2:
            r7 = reg_mul_u16(r7, r3); code++; goto Next;
        case OpCode::MulI_R7_R4_X2:
            r7 = reg_mul_u16(r7, r4); code++; goto Next;
        case OpCode::MulI_R7_R5_X2:
            r7 = reg_mul_u16(r7, r5); code++; goto Next;
        case OpCode::MulI_R7_R6_X2:
            r7 = reg_mul_u16(r7, r6); code++; goto Next;
        case OpCode::MulI_R7_R7_X2:
            r7 = reg_mul_u16(r7, r7); code++; goto Next;

        case OpCode::DivI_R0_R0_X2:
            r0 = reg_div_u16(r0, r0); code++; goto Next;
        case OpCode::DivI_R0_R1_X2:
            r0 = reg_div_u16(r0, r1); code++; goto Next;
        case OpCode::DivI_R0_R2_X2:
            r0 = reg_div_u16(r0, r2); code++; goto Next;
        case OpCode::DivI_R0_R3_X2:
            r0 = reg_div_u16(r0, r3); code++; goto Next;
        case OpCode::DivI_R0_R4_X2:
            r0 = reg_div_u16(r0, r4); code++; goto Next;
        case OpCode::DivI_R0_R5_X2:
            r0 = reg_div_u16(r0, r5); code++; goto Next;
        case OpCode::DivI_R0_R6_X2:
            r0 = reg_div_u16(r0, r6); code++; goto Next;
        case OpCode::DivI_R0_R7_X2:
            r0 = reg_div_u16(r0, r7); code++; goto Next;
        case OpCode::DivI_R1_R0_X2:
            r1 = reg_div_u16(r1, r0); code++; goto Next;
        case OpCode::DivI_R1_R1_X2:
            r1 = reg_div_u16(r1, r1); code++; goto Next;
        case OpCode::DivI_R1_R2_X2:
            r1 = reg_div_u16(r1, r2); code++; goto Next;
        case OpCode::DivI_R1_R3_X2:
            r1 = reg_div_u16(r1, r3); code++; goto Next;
        case OpCode::DivI_R1_R4_X2:
            r1 = reg_div_u16(r1, r4); code++; goto Next;
        case OpCode::DivI_R1_R5_X2:
            r1 = reg_div_u16(r1, r5); code++; goto Next;
        case OpCode::DivI_R1_R6_X2:
            r1 = reg_div_u16(r1, r6); code++; goto Next;
        case OpCode::DivI_R1_R7_X2:
            r1 = reg_div_u16(r1, r7); code++; goto Next;
        case OpCode::DivI_R2_R0_X2:
            r2 = reg_div_u16(r2, r0); code++; goto Next;
        case OpCode::DivI_R2_R1_X2:
            r2 = reg_div_u16(r2, r1); code++; goto Next;
        case OpCode::DivI_R2_R2_X2:
            r2 = reg_div_u16(r2, r2); code++; goto Next;
        case OpCode::DivI_R2_R3_X2:
            r2 = reg_div_u16(r2, r3); code++; goto Next;
        case OpCode::DivI_R2_R4_X2:
            r2 = reg_div_u16(r2, r4); code++; goto Next;
        case OpCode::DivI_R2_R5_X2:
            r2 = reg_div_u16(r2, r5); code++; goto Next;
        case OpCode::DivI_R2_R6_X2:
            r2 = reg_div_u16(r2, r6); code++; goto Next;
        case OpCode::DivI_R2_R7_X2:
            r2 = reg_div_u16(r2, r7); code++; goto Next;
        case OpCode::DivI_R3_R0_X2:
            r3 = reg_div_u16(r3, r0); code++; goto Next;
        case OpCode::DivI_R3_R1_X2:
            r3 = reg_div_u16(r3, r1); code++; goto Next;
        case OpCode::DivI_R3_R2_X2:
            r3 = reg_div_u16(r3, r2); code++; goto Next;
        case OpCode::DivI_R3_R3_X2:
            r3 = reg_div_u16(r3, r3); code++; goto Next;
        case OpCode::DivI_R3_R4_X2:
            r3 = reg_div_u16(r3, r4); code++; goto Next;
        case OpCode::DivI_R3_R5_X2:
            r3 = reg_div_u16(r3, r5); code++; goto Next;
        case OpCode::DivI_R3_R6_X2:
            r3 = reg_div_u16(r3, r6); code++; goto Next;
        case OpCode::DivI_R3_R7_X2:
            r3 = reg_div_u16(r3, r7); code++; goto Next;
        case OpCode::DivI_R4_R0_X2:
            r4 = reg_div_u16(r4, r0); code++; goto Next;
        case OpCode::DivI_R4_R1_X2:
            r4 = reg_div_u16(r4, r1); code++; goto Next;
        case OpCode::DivI_R4_R2_X2:
            r4 = reg_div_u16(r4, r2); code++; goto Next;
        case OpCode::DivI_R4_R3_X2:
            r4 = reg_div_u16(r4, r3); code++; goto Next;
        case OpCode::DivI_R4_R4_X2:
            r4 = reg_div_u16(r4, r4); code++; goto Next;
        case OpCode::DivI_R4_R5_X2:
            r4 = reg_div_u16(r4, r5); code++; goto Next;
        case OpCode::DivI_R4_R6_X2:
            r4 = reg_div_u16(r4, r6); code++; goto Next;
        case OpCode::DivI_R4_R7_X2:
            r4 = reg_div_u16(r4, r7); code++; goto Next;
        case OpCode::DivI_R5_R0_X2:
            r5 = reg_div_u16(r5, r0); code++; goto Next;
        case OpCode::DivI_R5_R1_X2:
            r5 = reg_div_u16(r5, r1); code++; goto Next;
        case OpCode::DivI_R5_R2_X2:
            r5 = reg_div_u16(r5, r2); code++; goto Next;
        case OpCode::DivI_R5_R3_X2:
            r5 = reg_div_u16(r5, r3); code++; goto Next;
        case OpCode::DivI_R5_R4_X2:
            r5 = reg_div_u16(r5, r4); code++; goto Next;
        case OpCode::DivI_R5_R5_X2:
            r5 = reg_div_u16(r5, r5); code++; goto Next;
        case OpCode::DivI_R5_R6_X2:
            r5 = reg_div_u16(r5, r6); code++; goto Next;
        case OpCode::DivI_R5_R7_X2:
            r5 = reg_div_u16(r5, r7); code++; goto Next;
        case OpCode::DivI_R6_R0_X2:
            r6 = reg_div_u16(r6, r0); code++; goto Next;
        case OpCode::DivI_R6_R1_X2:
            r6 = reg_div_u16(r6, r1); code++; goto Next;
        case OpCode::DivI_R6_R2_X2:
            r6 = reg_div_u16(r6, r2); code++; goto Next;
        case OpCode::DivI_R6_R3_X2:
            r6 = reg_div_u16(r6, r3); code++; goto Next;
        case OpCode::DivI_R6_R4_X2:
            r6 = reg_div_u16(r6, r4); code++; goto Next;
        case OpCode::DivI_R6_R5_X2:
            r6 = reg_div_u16(r6, r5); code++; goto Next;
        case OpCode::DivI_R6_R6_X2:
            r6 = reg_div_u16(r6, r6); code++; goto Next;
        case OpCode::DivI_R6_R7_X2:
            r6 = reg_div_u16(r6, r7); code++; goto Next;
        case OpCode::DivI_R7_R0_X2:
            r7 = reg_div_u16(r7, r0); code++; goto Next;
        case OpCode::DivI_R7_R1_X2:
            r7 = reg_div_u16(r7, r1); code++; goto Next;
        case OpCode::DivI_R7_R2_X2:
            r7 = reg_div_u16(r7, r2); code++; goto Next;
        case OpCode::DivI_R7_R3_X2:
            r7 = reg_div_u16(r7, r3); code++; goto Next;
        case OpCode::DivI_R7_R4_X2:
            r7 = reg_div_u16(r7, r4); code++; goto Next;
        case OpCode::DivI_R7_R5_X2:
            r7 = reg_div_u16(r7, r5); code++; goto Next;
        case OpCode::DivI_R7_R6_X2:
            r7 = reg_div_u16(r7, r6); code++; goto Next;
        case OpCode::DivI_R7_R7_X2:
            r7 = reg_div_u16(r7, r7); code++; goto Next;

        case OpCode::AddI_R0_R0_X4:
            r0 = reg_add_u32(r0, r0); code++; goto Next;
        case OpCode::AddI_R0_R1_X4:
            r0 = reg_add_u32(r0, r1); code++; goto Next;
        case OpCode::AddI_R0_R2_X4:
            r0 = reg_add_u32(r0, r2); code++; goto Next;
        case OpCode::AddI_R0_R3_X4:
            r0 = reg_add_u32(r0, r3); code++; goto Next;
        case OpCode::AddI_R0_R4_X4:
            r0 = reg_add_u32(r0, r4); code++; goto Next;
        case OpCode::AddI_R0_R5_X4:
            r0 = reg_add_u32(r0, r5); code++; goto Next;
        case OpCode::AddI_R0_R6_X4:
            r0 = reg_add_u32(r0, r6); code++; goto Next;
        case OpCode::AddI_R0_R7_X4:
            r0 = reg_add_u32(r0, r7); code++; goto Next;
        case OpCode::AddI_R1_R0_X4:
            r1 = reg_add_u32(r1, r0); code++; goto Next;
        case OpCode::AddI_R1_R1_X4:
            r1 = reg_add_u32(r1, r1); code++; goto Next;
        case OpCode::AddI_R1_R2_X4:
            r1 = reg_add_u32(r1, r2); code++; goto Next;
        case OpCode::AddI_R1_R3_X4:
            r1 = reg_add_u32(r1, r3); code++; goto Next;
        case OpCode::AddI_R1_R4_X4:
            r1 = reg_add_u32(r1, r4); code++; goto Next;
        case OpCode::AddI_R1_R5_X4:
            r1 = reg_add_u32(r1, r5); code++; goto Next;
        case OpCode::AddI_R1_R6_X4:
            r1 = reg_add_u32(r1, r6); code++; goto Next;
        case OpCode::AddI_R1_R7_X4:
            r1 = reg_add_u32(r1, r7); code++; goto Next;
        case OpCode::AddI_R2_R0_X4:
            r2 = reg_add_u32(r2, r0); code++; goto Next;
        case OpCode::AddI_R2_R1_X4:
            r2 = reg_add_u32(r2, r1); code++; goto Next;
        case OpCode::AddI_R2_R2_X4:
            r2 = reg_add_u32(r2, r2); code++; goto Next;
        case OpCode::AddI_R2_R3_X4:
            r2 = reg_add_u32(r2, r3); code++; goto Next;
        case OpCode::AddI_R2_R4_X4:
            r2 = reg_add_u32(r2, r4); code++; goto Next;
        case OpCode::AddI_R2_R5_X4:
            r2 = reg_add_u32(r2, r5); code++; goto Next;
        case OpCode::AddI_R2_R6_X4:
            r2 = reg_add_u32(r2, r6); code++; goto Next;
        case OpCode::AddI_R2_R7_X4:
            r2 = reg_add_u32(r2, r7); code++; goto Next;
        case OpCode::AddI_R3_R0_X4:
            r3 = reg_add_u32(r3, r0); code++; goto Next;
        case OpCode::AddI_R3_R1_X4:
            r3 = reg_add_u32(r3, r1); code++; goto Next;
        case OpCode::AddI_R3_R2_X4:
            r3 = reg_add_u32(r3, r2); code++; goto Next;
        case OpCode::AddI_R3_R3_X4:
            r3 = reg_add_u32(r3, r3); code++; goto Next;
        case OpCode::AddI_R3_R4_X4:
            r3 = reg_add_u32(r3, r4); code++; goto Next;
        case OpCode::AddI_R3_R5_X4:
            r3 = reg_add_u32(r3, r5); code++; goto Next;
        case OpCode::AddI_R3_R6_X4:
            r3 = reg_add_u32(r3, r6); code++; goto Next;
        case OpCode::AddI_R3_R7_X4:
            r3 = reg_add_u32(r3, r7); code++; goto Next;
        case OpCode::AddI_R4_R0_X4:
            r4 = reg_add_u32(r4, r0); code++; goto Next;
        case OpCode::AddI_R4_R1_X4:
            r4 = reg_add_u32(r4, r1); code++; goto Next;
        case OpCode::AddI_R4_R2_X4:
            r4 = reg_add_u32(r4, r2); code++; goto Next;
        case OpCode::AddI_R4_R3_X4:
            r4 = reg_add_u32(r4, r3); code++; goto Next;
        case OpCode::AddI_R4_R4_X4:
            r4 = reg_add_u32(r4, r4); code++; goto Next;
        case OpCode::AddI_R4_R5_X4:
            r4 = reg_add_u32(r4, r5); code++; goto Next;
        case OpCode::AddI_R4_R6_X4:
            r4 = reg_add_u32(r4, r6); code++; goto Next;
        case OpCode::AddI_R4_R7_X4:
            r4 = reg_add_u32(r4, r7); code++; goto Next;
        case OpCode::AddI_R5_R0_X4:
            r5 = reg_add_u32(r5, r0); code++; goto Next;
        case OpCode::AddI_R5_R1_X4:
            r5 = reg_add_u32(r5, r1); code++; goto Next;
        case OpCode::AddI_R5_R2_X4:
            r5 = reg_add_u32(r5, r2); code++; goto Next;
        case OpCode::AddI_R5_R3_X4:
            r5 = reg_add_u32(r5, r3); code++; goto Next;
        case OpCode::AddI_R5_R4_X4:
            r5 = reg_add_u32(r5, r4); code++; goto Next;
        case OpCode::AddI_R5_R5_X4:
            r5 = reg_add_u32(r5, r5); code++; goto Next;
        case OpCode::AddI_R5_R6_X4:
            r5 = reg_add_u32(r5, r6); code++; goto Next;
        case OpCode::AddI_R5_R7_X4:
            r5 = reg_add_u32(r5, r7); code++; goto Next;
        case OpCode::AddI_R6_R0_X4:
            r6 = reg_add_u32(r6, r0); code++; goto Next;
        case OpCode::AddI_R6_R1_X4:
            r6 = reg_add_u32(r6, r1); code++; goto Next;
        case OpCode::AddI_R6_R2_X4:
            r6 = reg_add_u32(r6, r2); code++; goto Next;
        case OpCode::AddI_R6_R3_X4:
            r6 = reg_add_u32(r6, r3); code++; goto Next;
        case OpCode::AddI_R6_R4_X4:
            r6 = reg_add_u32(r6, r4); code++; goto Next;
        case OpCode::AddI_R6_R5_X4:
            r6 = reg_add_u32(r6, r5); code++; goto Next;
        case OpCode::AddI_R6_R6_X4:
            r6 = reg_add_u32(r6, r6); code++; goto Next;
        case OpCode::AddI_R6_R7_X4:
            r6 = reg_add_u32(r6, r7); code++; goto Next;
        case OpCode::AddI_R7_R0_X4:
            r7 = reg_add_u32(r7, r0); code++; goto Next;
        case OpCode::AddI_R7_R1_X4:
            r7 = reg_add_u32(r7, r1); code++; goto Next;
        case OpCode::AddI_R7_R2_X4:
            r7 = reg_add_u32(r7, r2); code++; goto Next;
        case OpCode::AddI_R7_R3_X4:
            r7 = reg_add_u32(r7, r3); code++; goto Next;
        case OpCode::AddI_R7_R4_X4:
            r7 = reg_add_u32(r7, r4); code++; goto Next;
        case OpCode::AddI_R7_R5_X4:
            r7 = reg_add_u32(r7, r5); code++; goto Next;
        case OpCode::AddI_R7_R6_X4:
            r7 = reg_add_u32(r7, r6); code++; goto Next;
        case OpCode::AddI_R7_R7_X4:
            r7 = reg_add_u32(r7, r7); code++; goto Next;

        case OpCode::SubI_R0_R0_X4:
            r0 = reg_sub_u32(r0, r0); code++; goto Next;
        case OpCode::SubI_R0_R1_X4:
            r0 = reg_sub_u32(r0, r1); code++; goto Next;
        case OpCode::SubI_R0_R2_X4:
            r0 = reg_sub_u32(r0, r2); code++; goto Next;
        case OpCode::SubI_R0_R3_X4:
            r0 = reg_sub_u32(r0, r3); code++; goto Next;
        case OpCode::SubI_R0_R4_X4:
            r0 = reg_sub_u32(r0, r4); code++; goto Next;
        case OpCode::SubI_R0_R5_X4:
            r0 = reg_sub_u32(r0, r5); code++; goto Next;
        case OpCode::SubI_R0_R6_X4:
            r0 = reg_sub_u32(r0, r6); code++; goto Next;
        case OpCode::SubI_R0_R7_X4:
            r0 = reg_sub_u32(r0, r7); code++; goto Next;
        case OpCode::SubI_R1_R0_X4:
            r1 = reg_sub_u32(r1, r0); code++; goto Next;
        case OpCode::SubI_R1_R1_X4:
            r1 = reg_sub_u32(r1, r1); code++; goto Next;
        case OpCode::SubI_R1_R2_X4:
            r1 = reg_sub_u32(r1, r2); code++; goto Next;
        case OpCode::SubI_R1_R3_X4:
            r1 = reg_sub_u32(r1, r3); code++; goto Next;
        case OpCode::SubI_R1_R4_X4:
            r1 = reg_sub_u32(r1, r4); code++; goto Next;
        case OpCode::SubI_R1_R5_X4:
            r1 = reg_sub_u32(r1, r5); code++; goto Next;
        case OpCode::SubI_R1_R6_X4:
            r1 = reg_sub_u32(r1, r6); code++; goto Next;
        case OpCode::SubI_R1_R7_X4:
            r1 = reg_sub_u32(r1, r7); code++; goto Next;
        case OpCode::SubI_R2_R0_X4:
            r2 = reg_sub_u32(r2, r0); code++; goto Next;
        case OpCode::SubI_R2_R1_X4:
            r2 = reg_sub_u32(r2, r1); code++; goto Next;
        case OpCode::SubI_R2_R2_X4:
            r2 = reg_sub_u32(r2, r2); code++; goto Next;
        case OpCode::SubI_R2_R3_X4:
            r2 = reg_sub_u32(r2, r3); code++; goto Next;
        case OpCode::SubI_R2_R4_X4:
            r2 = reg_sub_u32(r2, r4); code++; goto Next;
        case OpCode::SubI_R2_R5_X4:
            r2 = reg_sub_u32(r2, r5); code++; goto Next;
        case OpCode::SubI_R2_R6_X4:
            r2 = reg_sub_u32(r2, r6); code++; goto Next;
        case OpCode::SubI_R2_R7_X4:
            r2 = reg_sub_u32(r2, r7); code++; goto Next;
        case OpCode::SubI_R3_R0_X4:
            r3 = reg_sub_u32(r3, r0); code++; goto Next;
        case OpCode::SubI_R3_R1_X4:
            r3 = reg_sub_u32(r3, r1); code++; goto Next;
        case OpCode::SubI_R3_R2_X4:
            r3 = reg_sub_u32(r3, r2); code++; goto Next;
        case OpCode::SubI_R3_R3_X4:
            r3 = reg_sub_u32(r3, r3); code++; goto Next;
        case OpCode::SubI_R3_R4_X4:
            r3 = reg_sub_u32(r3, r4); code++; goto Next;
        case OpCode::SubI_R3_R5_X4:
            r3 = reg_sub_u32(r3, r5); code++; goto Next;
        case OpCode::SubI_R3_R6_X4:
            r3 = reg_sub_u32(r3, r6); code++; goto Next;
        case OpCode::SubI_R3_R7_X4:
            r3 = reg_sub_u32(r3, r7); code++; goto Next;
        case OpCode::SubI_R4_R0_X4:
            r4 = reg_sub_u32(r4, r0); code++; goto Next;
        case OpCode::SubI_R4_R1_X4:
            r4 = reg_sub_u32(r4, r1); code++; goto Next;
        case OpCode::SubI_R4_R2_X4:
            r4 = reg_sub_u32(r4, r2); code++; goto Next;
        case OpCode::SubI_R4_R3_X4:
            r4 = reg_sub_u32(r4, r3); code++; goto Next;
        case OpCode::SubI_R4_R4_X4:
            r4 = reg_sub_u32(r4, r4); code++; goto Next;
        case OpCode::SubI_R4_R5_X4:
            r4 = reg_sub_u32(r4, r5); code++; goto Next;
        case OpCode::SubI_R4_R6_X4:
            r4 = reg_sub_u32(r4, r6); code++; goto Next;
        case OpCode::SubI_R4_R7_X4:
            r4 = reg_sub_u32(r4, r7); code++; goto Next;
        case OpCode::SubI_R5_R0_X4:
            r5 = reg_sub_u32(r5, r0); code++; goto Next;
        case OpCode::SubI_R5_R1_X4:
            r5 = reg_sub_u32(r5, r1); code++; goto Next;
        case OpCode::SubI_R5_R2_X4:
            r5 = reg_sub_u32(r5, r2); code++; goto Next;
        case OpCode::SubI_R5_R3_X4:
            r5 = reg_sub_u32(r5, r3); code++; goto Next;
        case OpCode::SubI_R5_R4_X4:
            r5 = reg_sub_u32(r5, r4); code++; goto Next;
        case OpCode::SubI_R5_R5_X4:
            r5 = reg_sub_u32(r5, r5); code++; goto Next;
        case OpCode::SubI_R5_R6_X4:
            r5 = reg_sub_u32(r5, r6); code++; goto Next;
        case OpCode::SubI_R5_R7_X4:
            r5 = reg_sub_u32(r5, r7); code++; goto Next;
        case OpCode::SubI_R6_R0_X4:
            r6 = reg_sub_u32(r6, r0); code++; goto Next;
        case OpCode::SubI_R6_R1_X4:
            r6 = reg_sub_u32(r6, r1); code++; goto Next;
        case OpCode::SubI_R6_R2_X4:
            r6 = reg_sub_u32(r6, r2); code++; goto Next;
        case OpCode::SubI_R6_R3_X4:
            r6 = reg_sub_u32(r6, r3); code++; goto Next;
        case OpCode::SubI_R6_R4_X4:
            r6 = reg_sub_u32(r6, r4); code++; goto Next;
        case OpCode::SubI_R6_R5_X4:
            r6 = reg_sub_u32(r6, r5); code++; goto Next;
        case OpCode::SubI_R6_R6_X4:
            r6 = reg_sub_u32(r6, r6); code++; goto Next;
        case OpCode::SubI_R6_R7_X4:
            r6 = reg_sub_u32(r6, r7); code++; goto Next;
        case OpCode::SubI_R7_R0_X4:
            r7 = reg_sub_u32(r7, r0); code++; goto Next;
        case OpCode::SubI_R7_R1_X4:
            r7 = reg_sub_u32(r7, r1); code++; goto Next;
        case OpCode::SubI_R7_R2_X4:
            r7 = reg_sub_u32(r7, r2); code++; goto Next;
        case OpCode::SubI_R7_R3_X4:
            r7 = reg_sub_u32(r7, r3); code++; goto Next;
        case OpCode::SubI_R7_R4_X4:
            r7 = reg_sub_u32(r7, r4); code++; goto Next;
        case OpCode::SubI_R7_R5_X4:
            r7 = reg_sub_u32(r7, r5); code++; goto Next;
        case OpCode::SubI_R7_R6_X4:
            r7 = reg_sub_u32(r7, r6); code++; goto Next;
        case OpCode::SubI_R7_R7_X4:
            r7 = reg_sub_u32(r7, r7); code++; goto Next;

        case OpCode::MulI_R0_R0_X4:
            r0 = reg_mul_u32(r0, r0); code++; goto Next;
        case OpCode::MulI_R0_R1_X4:
            r0 = reg_mul_u32(r0, r1); code++; goto Next;
        case OpCode::MulI_R0_R2_X4:
            r0 = reg_mul_u32(r0, r2); code++; goto Next;
        case OpCode::MulI_R0_R3_X4:
            r0 = reg_mul_u32(r0, r3); code++; goto Next;
        case OpCode::MulI_R0_R4_X4:
            r0 = reg_mul_u32(r0, r4); code++; goto Next;
        case OpCode::MulI_R0_R5_X4:
            r0 = reg_mul_u32(r0, r5); code++; goto Next;
        case OpCode::MulI_R0_R6_X4:
            r0 = reg_mul_u32(r0, r6); code++; goto Next;
        case OpCode::MulI_R0_R7_X4:
            r0 = reg_mul_u32(r0, r7); code++; goto Next;
        case OpCode::MulI_R1_R0_X4:
            r1 = reg_mul_u32(r1, r0); code++; goto Next;
        case OpCode::MulI_R1_R1_X4:
            r1 = reg_mul_u32(r1, r1); code++; goto Next;
        case OpCode::MulI_R1_R2_X4:
            r1 = reg_mul_u32(r1, r2); code++; goto Next;
        case OpCode::MulI_R1_R3_X4:
            r1 = reg_mul_u32(r1, r3); code++; goto Next;
        case OpCode::MulI_R1_R4_X4:
            r1 = reg_mul_u32(r1, r4); code++; goto Next;
        case OpCode::MulI_R1_R5_X4:
            r1 = reg_mul_u32(r1, r5); code++; goto Next;
        case OpCode::MulI_R1_R6_X4:
            r1 = reg_mul_u32(r1, r6); code++; goto Next;
        case OpCode::MulI_R1_R7_X4:
            r1 = reg_mul_u32(r1, r7); code++; goto Next;
        case OpCode::MulI_R2_R0_X4:
            r2 = reg_mul_u32(r2, r0); code++; goto Next;
        case OpCode::MulI_R2_R1_X4:
            r2 = reg_mul_u32(r2, r1); code++; goto Next;
        case OpCode::MulI_R2_R2_X4:
            r2 = reg_mul_u32(r2, r2); code++; goto Next;
        case OpCode::MulI_R2_R3_X4:
            r2 = reg_mul_u32(r2, r3); code++; goto Next;
        case OpCode::MulI_R2_R4_X4:
            r2 = reg_mul_u32(r2, r4); code++; goto Next;
        case OpCode::MulI_R2_R5_X4:
            r2 = reg_mul_u32(r2, r5); code++; goto Next;
        case OpCode::MulI_R2_R6_X4:
            r2 = reg_mul_u32(r2, r6); code++; goto Next;
        case OpCode::MulI_R2_R7_X4:
            r2 = reg_mul_u32(r2, r7); code++; goto Next;
        case OpCode::MulI_R3_R0_X4:
            r3 = reg_mul_u32(r3, r0); code++; goto Next;
        case OpCode::MulI_R3_R1_X4:
            r3 = reg_mul_u32(r3, r1); code++; goto Next;
        case OpCode::MulI_R3_R2_X4:
            r3 = reg_mul_u32(r3, r2); code++; goto Next;
        case OpCode::MulI_R3_R3_X4:
            r3 = reg_mul_u32(r3, r3); code++; goto Next;
        case OpCode::MulI_R3_R4_X4:
            r3 = reg_mul_u32(r3, r4); code++; goto Next;
        case OpCode::MulI_R3_R5_X4:
            r3 = reg_mul_u32(r3, r5); code++; goto Next;
        case OpCode::MulI_R3_R6_X4:
            r3 = reg_mul_u32(r3, r6); code++; goto Next;
        case OpCode::MulI_R3_R7_X4:
            r3 = reg_mul_u32(r3, r7); code++; goto Next;
        case OpCode::MulI_R4_R0_X4:
            r4 = reg_mul_u32(r4, r0); code++; goto Next;
        case OpCode::MulI_R4_R1_X4:
            r4 = reg_mul_u32(r4, r1); code++; goto Next;
        case OpCode::MulI_R4_R2_X4:
            r4 = reg_mul_u32(r4, r2); code++; goto Next;
        case OpCode::MulI_R4_R3_X4:
            r4 = reg_mul_u32(r4, r3); code++; goto Next;
        case OpCode::MulI_R4_R4_X4:
            r4 = reg_mul_u32(r4, r4); code++; goto Next;
        case OpCode::MulI_R4_R5_X4:
            r4 = reg_mul_u32(r4, r5); code++; goto Next;
        case OpCode::MulI_R4_R6_X4:
            r4 = reg_mul_u32(r4, r6); code++; goto Next;
        case OpCode::MulI_R4_R7_X4:
            r4 = reg_mul_u32(r4, r7); code++; goto Next;
        case OpCode::MulI_R5_R0_X4:
            r5 = reg_mul_u32(r5, r0); code++; goto Next;
        case OpCode::MulI_R5_R1_X4:
            r5 = reg_mul_u32(r5, r1); code++; goto Next;
        case OpCode::MulI_R5_R2_X4:
            r5 = reg_mul_u32(r5, r2); code++; goto Next;
        case OpCode::MulI_R5_R3_X4:
            r5 = reg_mul_u32(r5, r3); code++; goto Next;
        case OpCode::MulI_R5_R4_X4:
            r5 = reg_mul_u32(r5, r4); code++; goto Next;
        case OpCode::MulI_R5_R5_X4:
            r5 = reg_mul_u32(r5, r5); code++; goto Next;
        case OpCode::MulI_R5_R6_X4:
            r5 = reg_mul_u32(r5, r6); code++; goto Next;
        case OpCode::MulI_R5_R7_X4:
            r5 = reg_mul_u32(r5, r7); code++; goto Next;
        case OpCode::MulI_R6_R0_X4:
            r6 = reg_mul_u32(r6, r0); code++; goto Next;
        case OpCode::MulI_R6_R1_X4:
            r6 = reg_mul_u32(r6, r1); code++; goto Next;
        case OpCode::MulI_R6_R2_X4:
            r6 = reg_mul_u32(r6, r2); code++; goto Next;
        case OpCode::MulI_R6_R3_X4:
            r6 = reg_mul_u32(r6, r3); code++; goto Next;
        case OpCode::MulI_R6_R4_X4:
            r6 = reg_mul_u32(r6, r4); code++; goto Next;
        case OpCode::MulI_R6_R5_X4:
            r6 = reg_mul_u32(r6, r5); code++; goto Next;
        case OpCode::MulI_R6_R6_X4:
            r6 = reg_mul_u32(r6, r6); code++; goto Next;
        case OpCode::MulI_R6_R7_X4:
            r6 = reg_mul_u32(r6, r7); code++; goto Next;
        case OpCode::MulI_R7_R0_X4:
            r7 = reg_mul_u32(r7, r0); code++; goto Next;
        case OpCode::MulI_R7_R1_X4:
            r7 = reg_mul_u32(r7, r1); code++; goto Next;
        case OpCode::MulI_R7_R2_X4:
            r7 = reg_mul_u32(r7, r2); code++; goto Next;
        case OpCode::MulI_R7_R3_X4:
            r7 = reg_mul_u32(r7, r3); code++; goto Next;
        case OpCode::MulI_R7_R4_X4:
            r7 = reg_mul_u32(r7, r4); code++; goto Next;
        case OpCode::MulI_R7_R5_X4:
            r7 = reg_mul_u32(r7, r5); code++; goto Next;
        case OpCode::MulI_R7_R6_X4:
            r7 = reg_mul_u32(r7, r6); code++; goto Next;
        case OpCode::MulI_R7_R7_X4:
            r7 = reg_mul_u32(r7, r7); code++; goto Next;

        case OpCode::DivI_R0_R0_X4:
            r0 = reg_div_u32(r0, r0); code++; goto Next;
        case OpCode::DivI_R0_R1_X4:
            r0 = reg_div_u32(r0, r1); code++; goto Next;
        case OpCode::DivI_R0_R2_X4:
            r0 = reg_div_u32(r0, r2); code++; goto Next;
        case OpCode::DivI_R0_R3_X4:
            r0 = reg_div_u32(r0, r3); code++; goto Next;
        case OpCode::DivI_R0_R4_X4:
            r0 = reg_div_u32(r0, r4); code++; goto Next;
        case OpCode::DivI_R0_R5_X4:
            r0 = reg_div_u32(r0, r5); code++; goto Next;
        case OpCode::DivI_R0_R6_X4:
            r0 = reg_div_u32(r0, r6); code++; goto Next;
        case OpCode::DivI_R0_R7_X4:
            r0 = reg_div_u32(r0, r7); code++; goto Next;
        case OpCode::DivI_R1_R0_X4:
            r1 = reg_div_u32(r1, r0); code++; goto Next;
        case OpCode::DivI_R1_R1_X4:
            r1 = reg_div_u32(r1, r1); code++; goto Next;
        case OpCode::DivI_R1_R2_X4:
            r1 = reg_div_u32(r1, r2); code++; goto Next;
        case OpCode::DivI_R1_R3_X4:
            r1 = reg_div_u32(r1, r3); code++; goto Next;
        case OpCode::DivI_R1_R4_X4:
            r1 = reg_div_u32(r1, r4); code++; goto Next;
        case OpCode::DivI_R1_R5_X4:
            r1 = reg_div_u32(r1, r5); code++; goto Next;
        case OpCode::DivI_R1_R6_X4:
            r1 = reg_div_u32(r1, r6); code++; goto Next;
        case OpCode::DivI_R1_R7_X4:
            r1 = reg_div_u32(r1, r7); code++; goto Next;
        case OpCode::DivI_R2_R0_X4:
            r2 = reg_div_u32(r2, r0); code++; goto Next;
        case OpCode::DivI_R2_R1_X4:
            r2 = reg_div_u32(r2, r1); code++; goto Next;
        case OpCode::DivI_R2_R2_X4:
            r2 = reg_div_u32(r2, r2); code++; goto Next;
        case OpCode::DivI_R2_R3_X4:
            r2 = reg_div_u32(r2, r3); code++; goto Next;
        case OpCode::DivI_R2_R4_X4:
            r2 = reg_div_u32(r2, r4); code++; goto Next;
        case OpCode::DivI_R2_R5_X4:
            r2 = reg_div_u32(r2, r5); code++; goto Next;
        case OpCode::DivI_R2_R6_X4:
            r2 = reg_div_u32(r2, r6); code++; goto Next;
        case OpCode::DivI_R2_R7_X4:
            r2 = reg_div_u32(r2, r7); code++; goto Next;
        case OpCode::DivI_R3_R0_X4:
            r3 = reg_div_u32(r3, r0); code++; goto Next;
        case OpCode::DivI_R3_R1_X4:
            r3 = reg_div_u32(r3, r1); code++; goto Next;
        case OpCode::DivI_R3_R2_X4:
            r3 = reg_div_u32(r3, r2); code++; goto Next;
        case OpCode::DivI_R3_R3_X4:
            r3 = reg_div_u32(r3, r3); code++; goto Next;
        case OpCode::DivI_R3_R4_X4:
            r3 = reg_div_u32(r3, r4); code++; goto Next;
        case OpCode::DivI_R3_R5_X4:
            r3 = reg_div_u32(r3, r5); code++; goto Next;
        case OpCode::DivI_R3_R6_X4:
            r3 = reg_div_u32(r3, r6); code++; goto Next;
        case OpCode::DivI_R3_R7_X4:
            r3 = reg_div_u32(r3, r7); code++; goto Next;
        case OpCode::DivI_R4_R0_X4:
            r4 = reg_div_u32(r4, r0); code++; goto Next;
        case OpCode::DivI_R4_R1_X4:
            r4 = reg_div_u32(r4, r1); code++; goto Next;
        case OpCode::DivI_R4_R2_X4:
            r4 = reg_div_u32(r4, r2); code++; goto Next;
        case OpCode::DivI_R4_R3_X4:
            r4 = reg_div_u32(r4, r3); code++; goto Next;
        case OpCode::DivI_R4_R4_X4:
            r4 = reg_div_u32(r4, r4); code++; goto Next;
        case OpCode::DivI_R4_R5_X4:
            r4 = reg_div_u32(r4, r5); code++; goto Next;
        case OpCode::DivI_R4_R6_X4:
            r4 = reg_div_u32(r4, r6); code++; goto Next;
        case OpCode::DivI_R4_R7_X4:
            r4 = reg_div_u32(r4, r7); code++; goto Next;
        case OpCode::DivI_R5_R0_X4:
            r5 = reg_div_u32(r5, r0); code++; goto Next;
        case OpCode::DivI_R5_R1_X4:
            r5 = reg_div_u32(r5, r1); code++; goto Next;
        case OpCode::DivI_R5_R2_X4:
            r5 = reg_div_u32(r5, r2); code++; goto Next;
        case OpCode::DivI_R5_R3_X4:
            r5 = reg_div_u32(r5, r3); code++; goto Next;
        case OpCode::DivI_R5_R4_X4:
            r5 = reg_div_u32(r5, r4); code++; goto Next;
        case OpCode::DivI_R5_R5_X4:
            r5 = reg_div_u32(r5, r5); code++; goto Next;
        case OpCode::DivI_R5_R6_X4:
            r5 = reg_div_u32(r5, r6); code++; goto Next;
        case OpCode::DivI_R5_R7_X4:
            r5 = reg_div_u32(r5, r7); code++; goto Next;
        case OpCode::DivI_R6_R0_X4:
            r6 = reg_div_u32(r6, r0); code++; goto Next;
        case OpCode::DivI_R6_R1_X4:
            r6 = reg_div_u32(r6, r1); code++; goto Next;
        case OpCode::DivI_R6_R2_X4:
            r6 = reg_div_u32(r6, r2); code++; goto Next;
        case OpCode::DivI_R6_R3_X4:
            r6 = reg_div_u32(r6, r3); code++; goto Next;
        case OpCode::DivI_R6_R4_X4:
            r6 = reg_div_u32(r6, r4); code++; goto Next;
        case OpCode::DivI_R6_R5_X4:
            r6 = reg_div_u32(r6, r5); code++; goto Next;
        case OpCode::DivI_R6_R6_X4:
            r6 = reg_div_u32(r6, r6); code++; goto Next;
        case OpCode::DivI_R6_R7_X4:
            r6 = reg_div_u32(r6, r7); code++; goto Next;
        case OpCode::DivI_R7_R0_X4:
            r7 = reg_div_u32(r7, r0); code++; goto Next;
        case OpCode::DivI_R7_R1_X4:
            r7 = reg_div_u32(r7, r1); code++; goto Next;
        case OpCode::DivI_R7_R2_X4:
            r7 = reg_div_u32(r7, r2); code++; goto Next;
        case OpCode::DivI_R7_R3_X4:
            r7 = reg_div_u32(r7, r3); code++; goto Next;
        case OpCode::DivI_R7_R4_X4:
            r7 = reg_div_u32(r7, r4); code++; goto Next;
        case OpCode::DivI_R7_R5_X4:
            r7 = reg_div_u32(r7, r5); code++; goto Next;
        case OpCode::DivI_R7_R6_X4:
            r7 = reg_div_u32(r7, r6); code++; goto Next;
        case OpCode::DivI_R7_R7_X4:
            r7 = reg_div_u32(r7, r7); code++; goto Next;

        case OpCode::AddI_R0_R0_X8:
            r0 = reg_add_u64(r0, r0); code++; goto Next;
        case OpCode::AddI_R0_R1_X8:
            r0 = reg_add_u64(r0, r1); code++; goto Next;
        case OpCode::AddI_R0_R2_X8:
            r0 = reg_add_u64(r0, r2); code++; goto Next;
        case OpCode::AddI_R0_R3_X8:
            r0 = reg_add_u64(r0, r3); code++; goto Next;
        case OpCode::AddI_R0_R4_X8:
            r0 = reg_add_u64(r0, r4); code++; goto Next;
        case OpCode::AddI_R0_R5_X8:
            r0 = reg_add_u64(r0, r5); code++; goto Next;
        case OpCode::AddI_R0_R6_X8:
            r0 = reg_add_u64(r0, r6); code++; goto Next;
        case OpCode::AddI_R0_R7_X8:
            r0 = reg_add_u64(r0, r7); code++; goto Next;
        case OpCode::AddI_R1_R0_X8:
            r1 = reg_add_u64(r1, r0); code++; goto Next;
        case OpCode::AddI_R1_R1_X8:
            r1 = reg_add_u64(r1, r1); code++; goto Next;
        case OpCode::AddI_R1_R2_X8:
            r1 = reg_add_u64(r1, r2); code++; goto Next;
        case OpCode::AddI_R1_R3_X8:
            r1 = reg_add_u64(r1, r3); code++; goto Next;
        case OpCode::AddI_R1_R4_X8:
            r1 = reg_add_u64(r1, r4); code++; goto Next;
        case OpCode::AddI_R1_R5_X8:
            r1 = reg_add_u64(r1, r5); code++; goto Next;
        case OpCode::AddI_R1_R6_X8:
            r1 = reg_add_u64(r1, r6); code++; goto Next;
        case OpCode::AddI_R1_R7_X8:
            r1 = reg_add_u64(r1, r7); code++; goto Next;
        case OpCode::AddI_R2_R0_X8:
            r2 = reg_add_u64(r2, r0); code++; goto Next;
        case OpCode::AddI_R2_R1_X8:
            r2 = reg_add_u64(r2, r1); code++; goto Next;
        case OpCode::AddI_R2_R2_X8:
            r2 = reg_add_u64(r2, r2); code++; goto Next;
        case OpCode::AddI_R2_R3_X8:
            r2 = reg_add_u64(r2, r3); code++; goto Next;
        case OpCode::AddI_R2_R4_X8:
            r2 = reg_add_u64(r2, r4); code++; goto Next;
        case OpCode::AddI_R2_R5_X8:
            r2 = reg_add_u64(r2, r5); code++; goto Next;
        case OpCode::AddI_R2_R6_X8:
            r2 = reg_add_u64(r2, r6); code++; goto Next;
        case OpCode::AddI_R2_R7_X8:
            r2 = reg_add_u64(r2, r7); code++; goto Next;
        case OpCode::AddI_R3_R0_X8:
            r3 = reg_add_u64(r3, r0); code++; goto Next;
        case OpCode::AddI_R3_R1_X8:
            r3 = reg_add_u64(r3, r1); code++; goto Next;
        case OpCode::AddI_R3_R2_X8:
            r3 = reg_add_u64(r3, r2); code++; goto Next;
        case OpCode::AddI_R3_R3_X8:
            r3 = reg_add_u64(r3, r3); code++; goto Next;
        case OpCode::AddI_R3_R4_X8:
            r3 = reg_add_u64(r3, r4); code++; goto Next;
        case OpCode::AddI_R3_R5_X8:
            r3 = reg_add_u64(r3, r5); code++; goto Next;
        case OpCode::AddI_R3_R6_X8:
            r3 = reg_add_u64(r3, r6); code++; goto Next;
        case OpCode::AddI_R3_R7_X8:
            r3 = reg_add_u64(r3, r7); code++; goto Next;
        case OpCode::AddI_R4_R0_X8:
            r4 = reg_add_u64(r4, r0); code++; goto Next;
        case OpCode::AddI_R4_R1_X8:
            r4 = reg_add_u64(r4, r1); code++; goto Next;
        case OpCode::AddI_R4_R2_X8:
            r4 = reg_add_u64(r4, r2); code++; goto Next;
        case OpCode::AddI_R4_R3_X8:
            r4 = reg_add_u64(r4, r3); code++; goto Next;
        case OpCode::AddI_R4_R4_X8:
            r4 = reg_add_u64(r4, r4); code++; goto Next;
        case OpCode::AddI_R4_R5_X8:
            r4 = reg_add_u64(r4, r5); code++; goto Next;
        case OpCode::AddI_R4_R6_X8:
            r4 = reg_add_u64(r4, r6); code++; goto Next;
        case OpCode::AddI_R4_R7_X8:
            r4 = reg_add_u64(r4, r7); code++; goto Next;
        case OpCode::AddI_R5_R0_X8:
            r5 = reg_add_u64(r5, r0); code++; goto Next;
        case OpCode::AddI_R5_R1_X8:
            r5 = reg_add_u64(r5, r1); code++; goto Next;
        case OpCode::AddI_R5_R2_X8:
            r5 = reg_add_u64(r5, r2); code++; goto Next;
        case OpCode::AddI_R5_R3_X8:
            r5 = reg_add_u64(r5, r3); code++; goto Next;
        case OpCode::AddI_R5_R4_X8:
            r5 = reg_add_u64(r5, r4); code++; goto Next;
        case OpCode::AddI_R5_R5_X8:
            r5 = reg_add_u64(r5, r5); code++; goto Next;
        case OpCode::AddI_R5_R6_X8:
            r5 = reg_add_u64(r5, r6); code++; goto Next;
        case OpCode::AddI_R5_R7_X8:
            r5 = reg_add_u64(r5, r7); code++; goto Next;
        case OpCode::AddI_R6_R0_X8:
            r6 = reg_add_u64(r6, r0); code++; goto Next;
        case OpCode::AddI_R6_R1_X8:
            r6 = reg_add_u64(r6, r1); code++; goto Next;
        case OpCode::AddI_R6_R2_X8:
            r6 = reg_add_u64(r6, r2); code++; goto Next;
        case OpCode::AddI_R6_R3_X8:
            r6 = reg_add_u64(r6, r3); code++; goto Next;
        case OpCode::AddI_R6_R4_X8:
            r6 = reg_add_u64(r6, r4); code++; goto Next;
        case OpCode::AddI_R6_R5_X8:
            r6 = reg_add_u64(r6, r5); code++; goto Next;
        case OpCode::AddI_R6_R6_X8:
            r6 = reg_add_u64(r6, r6); code++; goto Next;
        case OpCode::AddI_R6_R7_X8:
            r6 = reg_add_u64(r6, r7); code++; goto Next;
        case OpCode::AddI_R7_R0_X8:
            r7 = reg_add_u64(r7, r0); code++; goto Next;
        case OpCode::AddI_R7_R1_X8:
            r7 = reg_add_u64(r7, r1); code++; goto Next;
        case OpCode::AddI_R7_R2_X8:
            r7 = reg_add_u64(r7, r2); code++; goto Next;
        case OpCode::AddI_R7_R3_X8:
            r7 = reg_add_u64(r7, r3); code++; goto Next;
        case OpCode::AddI_R7_R4_X8:
            r7 = reg_add_u64(r7, r4); code++; goto Next;
        case OpCode::AddI_R7_R5_X8:
            r7 = reg_add_u64(r7, r5); code++; goto Next;
        case OpCode::AddI_R7_R6_X8:
            r7 = reg_add_u64(r7, r6); code++; goto Next;
        case OpCode::AddI_R7_R7_X8:
            r7 = reg_add_u64(r7, r7); code++; goto Next;

        case OpCode::SubI_R0_R0_X8:
            r0 = reg_sub_u64(r0, r0); code++; goto Next;
        case OpCode::SubI_R0_R1_X8:
            r0 = reg_sub_u64(r0, r1); code++; goto Next;
        case OpCode::SubI_R0_R2_X8:
            r0 = reg_sub_u64(r0, r2); code++; goto Next;
        case OpCode::SubI_R0_R3_X8:
            r0 = reg_sub_u64(r0, r3); code++; goto Next;
        case OpCode::SubI_R0_R4_X8:
            r0 = reg_sub_u64(r0, r4); code++; goto Next;
        case OpCode::SubI_R0_R5_X8:
            r0 = reg_sub_u64(r0, r5); code++; goto Next;
        case OpCode::SubI_R0_R6_X8:
            r0 = reg_sub_u64(r0, r6); code++; goto Next;
        case OpCode::SubI_R0_R7_X8:
            r0 = reg_sub_u64(r0, r7); code++; goto Next;
        case OpCode::SubI_R1_R0_X8:
            r1 = reg_sub_u64(r1, r0); code++; goto Next;
        case OpCode::SubI_R1_R1_X8:
            r1 = reg_sub_u64(r1, r1); code++; goto Next;
        case OpCode::SubI_R1_R2_X8:
            r1 = reg_sub_u64(r1, r2); code++; goto Next;
        case OpCode::SubI_R1_R3_X8:
            r1 = reg_sub_u64(r1, r3); code++; goto Next;
        case OpCode::SubI_R1_R4_X8:
            r1 = reg_sub_u64(r1, r4); code++; goto Next;
        case OpCode::SubI_R1_R5_X8:
            r1 = reg_sub_u64(r1, r5); code++; goto Next;
        case OpCode::SubI_R1_R6_X8:
            r1 = reg_sub_u64(r1, r6); code++; goto Next;
        case OpCode::SubI_R1_R7_X8:
            r1 = reg_sub_u64(r1, r7); code++; goto Next;
        case OpCode::SubI_R2_R0_X8:
            r2 = reg_sub_u64(r2, r0); code++; goto Next;
        case OpCode::SubI_R2_R1_X8:
            r2 = reg_sub_u64(r2, r1); code++; goto Next;
        case OpCode::SubI_R2_R2_X8:
            r2 = reg_sub_u64(r2, r2); code++; goto Next;
        case OpCode::SubI_R2_R3_X8:
            r2 = reg_sub_u64(r2, r3); code++; goto Next;
        case OpCode::SubI_R2_R4_X8:
            r2 = reg_sub_u64(r2, r4); code++; goto Next;
        case OpCode::SubI_R2_R5_X8:
            r2 = reg_sub_u64(r2, r5); code++; goto Next;
        case OpCode::SubI_R2_R6_X8:
            r2 = reg_sub_u64(r2, r6); code++; goto Next;
        case OpCode::SubI_R2_R7_X8:
            r2 = reg_sub_u64(r2, r7); code++; goto Next;
        case OpCode::SubI_R3_R0_X8:
            r3 = reg_sub_u64(r3, r0); code++; goto Next;
        case OpCode::SubI_R3_R1_X8:
            r3 = reg_sub_u64(r3, r1); code++; goto Next;
        case OpCode::SubI_R3_R2_X8:
            r3 = reg_sub_u64(r3, r2); code++; goto Next;
        case OpCode::SubI_R3_R3_X8:
            r3 = reg_sub_u64(r3, r3); code++; goto Next;
        case OpCode::SubI_R3_R4_X8:
            r3 = reg_sub_u64(r3, r4); code++; goto Next;
        case OpCode::SubI_R3_R5_X8:
            r3 = reg_sub_u64(r3, r5); code++; goto Next;
        case OpCode::SubI_R3_R6_X8:
            r3 = reg_sub_u64(r3, r6); code++; goto Next;
        case OpCode::SubI_R3_R7_X8:
            r3 = reg_sub_u64(r3, r7); code++; goto Next;
        case OpCode::SubI_R4_R0_X8:
            r4 = reg_sub_u64(r4, r0); code++; goto Next;
        case OpCode::SubI_R4_R1_X8:
            r4 = reg_sub_u64(r4, r1); code++; goto Next;
        case OpCode::SubI_R4_R2_X8:
            r4 = reg_sub_u64(r4, r2); code++; goto Next;
        case OpCode::SubI_R4_R3_X8:
            r4 = reg_sub_u64(r4, r3); code++; goto Next;
        case OpCode::SubI_R4_R4_X8:
            r4 = reg_sub_u64(r4, r4); code++; goto Next;
        case OpCode::SubI_R4_R5_X8:
            r4 = reg_sub_u64(r4, r5); code++; goto Next;
        case OpCode::SubI_R4_R6_X8:
            r4 = reg_sub_u64(r4, r6); code++; goto Next;
        case OpCode::SubI_R4_R7_X8:
            r4 = reg_sub_u64(r4, r7); code++; goto Next;
        case OpCode::SubI_R5_R0_X8:
            r5 = reg_sub_u64(r5, r0); code++; goto Next;
        case OpCode::SubI_R5_R1_X8:
            r5 = reg_sub_u64(r5, r1); code++; goto Next;
        case OpCode::SubI_R5_R2_X8:
            r5 = reg_sub_u64(r5, r2); code++; goto Next;
        case OpCode::SubI_R5_R3_X8:
            r5 = reg_sub_u64(r5, r3); code++; goto Next;
        case OpCode::SubI_R5_R4_X8:
            r5 = reg_sub_u64(r5, r4); code++; goto Next;
        case OpCode::SubI_R5_R5_X8:
            r5 = reg_sub_u64(r5, r5); code++; goto Next;
        case OpCode::SubI_R5_R6_X8:
            r5 = reg_sub_u64(r5, r6); code++; goto Next;
        case OpCode::SubI_R5_R7_X8:
            r5 = reg_sub_u64(r5, r7); code++; goto Next;
        case OpCode::SubI_R6_R0_X8:
            r6 = reg_sub_u64(r6, r0); code++; goto Next;
        case OpCode::SubI_R6_R1_X8:
            r6 = reg_sub_u64(r6, r1); code++; goto Next;
        case OpCode::SubI_R6_R2_X8:
            r6 = reg_sub_u64(r6, r2); code++; goto Next;
        case OpCode::SubI_R6_R3_X8:
            r6 = reg_sub_u64(r6, r3); code++; goto Next;
        case OpCode::SubI_R6_R4_X8:
            r6 = reg_sub_u64(r6, r4); code++; goto Next;
        case OpCode::SubI_R6_R5_X8:
            r6 = reg_sub_u64(r6, r5); code++; goto Next;
        case OpCode::SubI_R6_R6_X8:
            r6 = reg_sub_u64(r6, r6); code++; goto Next;
        case OpCode::SubI_R6_R7_X8:
            r6 = reg_sub_u64(r6, r7); code++; goto Next;
        case OpCode::SubI_R7_R0_X8:
            r7 = reg_sub_u64(r7, r0); code++; goto Next;
        case OpCode::SubI_R7_R1_X8:
            r7 = reg_sub_u64(r7, r1); code++; goto Next;
        case OpCode::SubI_R7_R2_X8:
            r7 = reg_sub_u64(r7, r2); code++; goto Next;
        case OpCode::SubI_R7_R3_X8:
            r7 = reg_sub_u64(r7, r3); code++; goto Next;
        case OpCode::SubI_R7_R4_X8:
            r7 = reg_sub_u64(r7, r4); code++; goto Next;
        case OpCode::SubI_R7_R5_X8:
            r7 = reg_sub_u64(r7, r5); code++; goto Next;
        case OpCode::SubI_R7_R6_X8:
            r7 = reg_sub_u64(r7, r6); code++; goto Next;
        case OpCode::SubI_R7_R7_X8:
            r7 = reg_sub_u64(r7, r7); code++; goto Next;

        case OpCode::MulI_R0_R0_X8:
            r0 = reg_mul_u64(r0, r0); code++; goto Next;
        case OpCode::MulI_R0_R1_X8:
            r0 = reg_mul_u64(r0, r1); code++; goto Next;
        case OpCode::MulI_R0_R2_X8:
            r0 = reg_mul_u64(r0, r2); code++; goto Next;
        case OpCode::MulI_R0_R3_X8:
            r0 = reg_mul_u64(r0, r3); code++; goto Next;
        case OpCode::MulI_R0_R4_X8:
            r0 = reg_mul_u64(r0, r4); code++; goto Next;
        case OpCode::MulI_R0_R5_X8:
            r0 = reg_mul_u64(r0, r5); code++; goto Next;
        case OpCode::MulI_R0_R6_X8:
            r0 = reg_mul_u64(r0, r6); code++; goto Next;
        case OpCode::MulI_R0_R7_X8:
            r0 = reg_mul_u64(r0, r7); code++; goto Next;
        case OpCode::MulI_R1_R0_X8:
            r1 = reg_mul_u64(r1, r0); code++; goto Next;
        case OpCode::MulI_R1_R1_X8:
            r1 = reg_mul_u64(r1, r1); code++; goto Next;
        case OpCode::MulI_R1_R2_X8:
            r1 = reg_mul_u64(r1, r2); code++; goto Next;
        case OpCode::MulI_R1_R3_X8:
            r1 = reg_mul_u64(r1, r3); code++; goto Next;
        case OpCode::MulI_R1_R4_X8:
            r1 = reg_mul_u64(r1, r4); code++; goto Next;
        case OpCode::MulI_R1_R5_X8:
            r1 = reg_mul_u64(r1, r5); code++; goto Next;
        case OpCode::MulI_R1_R6_X8:
            r1 = reg_mul_u64(r1, r6); code++; goto Next;
        case OpCode::MulI_R1_R7_X8:
            r1 = reg_mul_u64(r1, r7); code++; goto Next;
        case OpCode::MulI_R2_R0_X8:
            r2 = reg_mul_u64(r2, r0); code++; goto Next;
        case OpCode::MulI_R2_R1_X8:
            r2 = reg_mul_u64(r2, r1); code++; goto Next;
        case OpCode::MulI_R2_R2_X8:
            r2 = reg_mul_u64(r2, r2); code++; goto Next;
        case OpCode::MulI_R2_R3_X8:
            r2 = reg_mul_u64(r2, r3); code++; goto Next;
        case OpCode::MulI_R2_R4_X8:
            r2 = reg_mul_u64(r2, r4); code++; goto Next;
        case OpCode::MulI_R2_R5_X8:
            r2 = reg_mul_u64(r2, r5); code++; goto Next;
        case OpCode::MulI_R2_R6_X8:
            r2 = reg_mul_u64(r2, r6); code++; goto Next;
        case OpCode::MulI_R2_R7_X8:
            r2 = reg_mul_u64(r2, r7); code++; goto Next;
        case OpCode::MulI_R3_R0_X8:
            r3 = reg_mul_u64(r3, r0); code++; goto Next;
        case OpCode::MulI_R3_R1_X8:
            r3 = reg_mul_u64(r3, r1); code++; goto Next;
        case OpCode::MulI_R3_R2_X8:
            r3 = reg_mul_u64(r3, r2); code++; goto Next;
        case OpCode::MulI_R3_R3_X8:
            r3 = reg_mul_u64(r3, r3); code++; goto Next;
        case OpCode::MulI_R3_R4_X8:
            r3 = reg_mul_u64(r3, r4); code++; goto Next;
        case OpCode::MulI_R3_R5_X8:
            r3 = reg_mul_u64(r3, r5); code++; goto Next;
        case OpCode::MulI_R3_R6_X8:
            r3 = reg_mul_u64(r3, r6); code++; goto Next;
        case OpCode::MulI_R3_R7_X8:
            r3 = reg_mul_u64(r3, r7); code++; goto Next;
        case OpCode::MulI_R4_R0_X8:
            r4 = reg_mul_u64(r4, r0); code++; goto Next;
        case OpCode::MulI_R4_R1_X8:
            r4 = reg_mul_u64(r4, r1); code++; goto Next;
        case OpCode::MulI_R4_R2_X8:
            r4 = reg_mul_u64(r4, r2); code++; goto Next;
        case OpCode::MulI_R4_R3_X8:
            r4 = reg_mul_u64(r4, r3); code++; goto Next;
        case OpCode::MulI_R4_R4_X8:
            r4 = reg_mul_u64(r4, r4); code++; goto Next;
        case OpCode::MulI_R4_R5_X8:
            r4 = reg_mul_u64(r4, r5); code++; goto Next;
        case OpCode::MulI_R4_R6_X8:
            r4 = reg_mul_u64(r4, r6); code++; goto Next;
        case OpCode::MulI_R4_R7_X8:
            r4 = reg_mul_u64(r4, r7); code++; goto Next;
        case OpCode::MulI_R5_R0_X8:
            r5 = reg_mul_u64(r5, r0); code++; goto Next;
        case OpCode::MulI_R5_R1_X8:
            r5 = reg_mul_u64(r5, r1); code++; goto Next;
        case OpCode::MulI_R5_R2_X8:
            r5 = reg_mul_u64(r5, r2); code++; goto Next;
        case OpCode::MulI_R5_R3_X8:
            r5 = reg_mul_u64(r5, r3); code++; goto Next;
        case OpCode::MulI_R5_R4_X8:
            r5 = reg_mul_u64(r5, r4); code++; goto Next;
        case OpCode::MulI_R5_R5_X8:
            r5 = reg_mul_u64(r5, r5); code++; goto Next;
        case OpCode::MulI_R5_R6_X8:
            r5 = reg_mul_u64(r5, r6); code++; goto Next;
        case OpCode::MulI_R5_R7_X8:
            r5 = reg_mul_u64(r5, r7); code++; goto Next;
        case OpCode::MulI_R6_R0_X8:
            r6 = reg_mul_u64(r6, r0); code++; goto Next;
        case OpCode::MulI_R6_R1_X8:
            r6 = reg_mul_u64(r6, r1); code++; goto Next;
        case OpCode::MulI_R6_R2_X8:
            r6 = reg_mul_u64(r6, r2); code++; goto Next;
        case OpCode::MulI_R6_R3_X8:
            r6 = reg_mul_u64(r6, r3); code++; goto Next;
        case OpCode::MulI_R6_R4_X8:
            r6 = reg_mul_u64(r6, r4); code++; goto Next;
        case OpCode::MulI_R6_R5_X8:
            r6 = reg_mul_u64(r6, r5); code++; goto Next;
        case OpCode::MulI_R6_R6_X8:
            r6 = reg_mul_u64(r6, r6); code++; goto Next;
        case OpCode::MulI_R6_R7_X8:
            r6 = reg_mul_u64(r6, r7); code++; goto Next;
        case OpCode::MulI_R7_R0_X8:
            r7 = reg_mul_u64(r7, r0); code++; goto Next;
        case OpCode::MulI_R7_R1_X8:
            r7 = reg_mul_u64(r7, r1); code++; goto Next;
        case OpCode::MulI_R7_R2_X8:
            r7 = reg_mul_u64(r7, r2); code++; goto Next;
        case OpCode::MulI_R7_R3_X8:
            r7 = reg_mul_u64(r7, r3); code++; goto Next;
        case OpCode::MulI_R7_R4_X8:
            r7 = reg_mul_u64(r7, r4); code++; goto Next;
        case OpCode::MulI_R7_R5_X8:
            r7 = reg_mul_u64(r7, r5); code++; goto Next;
        case OpCode::MulI_R7_R6_X8:
            r7 = reg_mul_u64(r7, r6); code++; goto Next;
        case OpCode::MulI_R7_R7_X8:
            r7 = reg_mul_u64(r7, r7); code++; goto Next;

        case OpCode::DivI_R0_R0_X8:
            r0 = reg_div_u64(r0, r0); code++; goto Next;
        case OpCode::DivI_R0_R1_X8:
            r0 = reg_div_u64(r0, r1); code++; goto Next;
        case OpCode::DivI_R0_R2_X8:
            r0 = reg_div_u64(r0, r2); code++; goto Next;
        case OpCode::DivI_R0_R3_X8:
            r0 = reg_div_u64(r0, r3); code++; goto Next;
        case OpCode::DivI_R0_R4_X8:
            r0 = reg_div_u64(r0, r4); code++; goto Next;
        case OpCode::DivI_R0_R5_X8:
            r0 = reg_div_u64(r0, r5); code++; goto Next;
        case OpCode::DivI_R0_R6_X8:
            r0 = reg_div_u64(r0, r6); code++; goto Next;
        case OpCode::DivI_R0_R7_X8:
            r0 = reg_div_u64(r0, r7); code++; goto Next;
        case OpCode::DivI_R1_R0_X8:
            r1 = reg_div_u64(r1, r0); code++; goto Next;
        case OpCode::DivI_R1_R1_X8:
            r1 = reg_div_u64(r1, r1); code++; goto Next;
        case OpCode::DivI_R1_R2_X8:
            r1 = reg_div_u64(r1, r2); code++; goto Next;
        case OpCode::DivI_R1_R3_X8:
            r1 = reg_div_u64(r1, r3); code++; goto Next;
        case OpCode::DivI_R1_R4_X8:
            r1 = reg_div_u64(r1, r4); code++; goto Next;
        case OpCode::DivI_R1_R5_X8:
            r1 = reg_div_u64(r1, r5); code++; goto Next;
        case OpCode::DivI_R1_R6_X8:
            r1 = reg_div_u64(r1, r6); code++; goto Next;
        case OpCode::DivI_R1_R7_X8:
            r1 = reg_div_u64(r1, r7); code++; goto Next;
        case OpCode::DivI_R2_R0_X8:
            r2 = reg_div_u64(r2, r0); code++; goto Next;
        case OpCode::DivI_R2_R1_X8:
            r2 = reg_div_u64(r2, r1); code++; goto Next;
        case OpCode::DivI_R2_R2_X8:
            r2 = reg_div_u64(r2, r2); code++; goto Next;
        case OpCode::DivI_R2_R3_X8:
            r2 = reg_div_u64(r2, r3); code++; goto Next;
        case OpCode::DivI_R2_R4_X8:
            r2 = reg_div_u64(r2, r4); code++; goto Next;
        case OpCode::DivI_R2_R5_X8:
            r2 = reg_div_u64(r2, r5); code++; goto Next;
        case OpCode::DivI_R2_R6_X8:
            r2 = reg_div_u64(r2, r6); code++; goto Next;
        case OpCode::DivI_R2_R7_X8:
            r2 = reg_div_u64(r2, r7); code++; goto Next;
        case OpCode::DivI_R3_R0_X8:
            r3 = reg_div_u64(r3, r0); code++; goto Next;
        case OpCode::DivI_R3_R1_X8:
            r3 = reg_div_u64(r3, r1); code++; goto Next;
        case OpCode::DivI_R3_R2_X8:
            r3 = reg_div_u64(r3, r2); code++; goto Next;
        case OpCode::DivI_R3_R3_X8:
            r3 = reg_div_u64(r3, r3); code++; goto Next;
        case OpCode::DivI_R3_R4_X8:
            r3 = reg_div_u64(r3, r4); code++; goto Next;
        case OpCode::DivI_R3_R5_X8:
            r3 = reg_div_u64(r3, r5); code++; goto Next;
        case OpCode::DivI_R3_R6_X8:
            r3 = reg_div_u64(r3, r6); code++; goto Next;
        case OpCode::DivI_R3_R7_X8:
            r3 = reg_div_u64(r3, r7); code++; goto Next;
        case OpCode::DivI_R4_R0_X8:
            r4 = reg_div_u64(r4, r0); code++; goto Next;
        case OpCode::DivI_R4_R1_X8:
            r4 = reg_div_u64(r4, r1); code++; goto Next;
        case OpCode::DivI_R4_R2_X8:
            r4 = reg_div_u64(r4, r2); code++; goto Next;
        case OpCode::DivI_R4_R3_X8:
            r4 = reg_div_u64(r4, r3); code++; goto Next;
        case OpCode::DivI_R4_R4_X8:
            r4 = reg_div_u64(r4, r4); code++; goto Next;
        case OpCode::DivI_R4_R5_X8:
            r4 = reg_div_u64(r4, r5); code++; goto Next;
        case OpCode::DivI_R4_R6_X8:
            r4 = reg_div_u64(r4, r6); code++; goto Next;
        case OpCode::DivI_R4_R7_X8:
            r4 = reg_div_u64(r4, r7); code++; goto Next;
        case OpCode::DivI_R5_R0_X8:
            r5 = reg_div_u64(r5, r0); code++; goto Next;
        case OpCode::DivI_R5_R1_X8:
            r5 = reg_div_u64(r5, r1); code++; goto Next;
        case OpCode::DivI_R5_R2_X8:
            r5 = reg_div_u64(r5, r2); code++; goto Next;
        case OpCode::DivI_R5_R3_X8:
            r5 = reg_div_u64(r5, r3); code++; goto Next;
        case OpCode::DivI_R5_R4_X8:
            r5 = reg_div_u64(r5, r4); code++; goto Next;
        case OpCode::DivI_R5_R5_X8:
            r5 = reg_div_u64(r5, r5); code++; goto Next;
        case OpCode::DivI_R5_R6_X8:
            r5 = reg_div_u64(r5, r6); code++; goto Next;
        case OpCode::DivI_R5_R7_X8:
            r5 = reg_div_u64(r5, r7); code++; goto Next;
        case OpCode::DivI_R6_R0_X8:
            r6 = reg_div_u64(r6, r0); code++; goto Next;
        case OpCode::DivI_R6_R1_X8:
            r6 = reg_div_u64(r6, r1); code++; goto Next;
        case OpCode::DivI_R6_R2_X8:
            r6 = reg_div_u64(r6, r2); code++; goto Next;
        case OpCode::DivI_R6_R3_X8:
            r6 = reg_div_u64(r6, r3); code++; goto Next;
        case OpCode::DivI_R6_R4_X8:
            r6 = reg_div_u64(r6, r4); code++; goto Next;
        case OpCode::DivI_R6_R5_X8:
            r6 = reg_div_u64(r6, r5); code++; goto Next;
        case OpCode::DivI_R6_R6_X8:
            r6 = reg_div_u64(r6, r6); code++; goto Next;
        case OpCode::DivI_R6_R7_X8:
            r6 = reg_div_u64(r6, r7); code++; goto Next;
        case OpCode::DivI_R7_R0_X8:
            r7 = reg_div_u64(r7, r0); code++; goto Next;
        case OpCode::DivI_R7_R1_X8:
            r7 = reg_div_u64(r7, r1); code++; goto Next;
        case OpCode::DivI_R7_R2_X8:
            r7 = reg_div_u64(r7, r2); code++; goto Next;
        case OpCode::DivI_R7_R3_X8:
            r7 = reg_div_u64(r7, r3); code++; goto Next;
        case OpCode::DivI_R7_R4_X8:
            r7 = reg_div_u64(r7, r4); code++; goto Next;
        case OpCode::DivI_R7_R5_X8:
            r7 = reg_div_u64(r7, r5); code++; goto Next;
        case OpCode::DivI_R7_R6_X8:
            r7 = reg_div_u64(r7, r6); code++; goto Next;
        case OpCode::DivI_R7_R7_X8:
            r7 = reg_div_u64(r7, r7); code++; goto Next;

        case OpCode::AddU_R0_R0_X1:
            r0 = reg_add_u8(r0, r0); code++; goto Next;
        case OpCode::AddU_R0_R1_X1:
            r0 = reg_add_u8(r0, r1); code++; goto Next;
        case OpCode::AddU_R0_R2_X1:
            r0 = reg_add_u8(r0, r2); code++; goto Next;
        case OpCode::AddU_R0_R3_X1:
            r0 = reg_add_u8(r0, r3); code++; goto Next;
        case OpCode::AddU_R0_R4_X1:
            r0 = reg_add_u8(r0, r4); code++; goto Next;
        case OpCode::AddU_R0_R5_X1:
            r0 = reg_add_u8(r0, r5); code++; goto Next;
        case OpCode::AddU_R0_R6_X1:
            r0 = reg_add_u8(r0, r6); code++; goto Next;
        case OpCode::AddU_R0_R7_X1:
            r0 = reg_add_u8(r0, r7); code++; goto Next;
        case OpCode::AddU_R1_R0_X1:
            r1 = reg_add_u8(r1, r0); code++; goto Next;
        case OpCode::AddU_R1_R1_X1:
            r1 = reg_add_u8(r1, r1); code++; goto Next;
        case OpCode::AddU_R1_R2_X1:
            r1 = reg_add_u8(r1, r2); code++; goto Next;
        case OpCode::AddU_R1_R3_X1:
            r1 = reg_add_u8(r1, r3); code++; goto Next;
        case OpCode::AddU_R1_R4_X1:
            r1 = reg_add_u8(r1, r4); code++; goto Next;
        case OpCode::AddU_R1_R5_X1:
            r1 = reg_add_u8(r1, r5); code++; goto Next;
        case OpCode::AddU_R1_R6_X1:
            r1 = reg_add_u8(r1, r6); code++; goto Next;
        case OpCode::AddU_R1_R7_X1:
            r1 = reg_add_u8(r1, r7); code++; goto Next;
        case OpCode::AddU_R2_R0_X1:
            r2 = reg_add_u8(r2, r0); code++; goto Next;
        case OpCode::AddU_R2_R1_X1:
            r2 = reg_add_u8(r2, r1); code++; goto Next;
        case OpCode::AddU_R2_R2_X1:
            r2 = reg_add_u8(r2, r2); code++; goto Next;
        case OpCode::AddU_R2_R3_X1:
            r2 = reg_add_u8(r2, r3); code++; goto Next;
        case OpCode::AddU_R2_R4_X1:
            r2 = reg_add_u8(r2, r4); code++; goto Next;
        case OpCode::AddU_R2_R5_X1:
            r2 = reg_add_u8(r2, r5); code++; goto Next;
        case OpCode::AddU_R2_R6_X1:
            r2 = reg_add_u8(r2, r6); code++; goto Next;
        case OpCode::AddU_R2_R7_X1:
            r2 = reg_add_u8(r2, r7); code++; goto Next;
        case OpCode::AddU_R3_R0_X1:
            r3 = reg_add_u8(r3, r0); code++; goto Next;
        case OpCode::AddU_R3_R1_X1:
            r3 = reg_add_u8(r3, r1); code++; goto Next;
        case OpCode::AddU_R3_R2_X1:
            r3 = reg_add_u8(r3, r2); code++; goto Next;
        case OpCode::AddU_R3_R3_X1:
            r3 = reg_add_u8(r3, r3); code++; goto Next;
        case OpCode::AddU_R3_R4_X1:
            r3 = reg_add_u8(r3, r4); code++; goto Next;
        case OpCode::AddU_R3_R5_X1:
            r3 = reg_add_u8(r3, r5); code++; goto Next;
        case OpCode::AddU_R3_R6_X1:
            r3 = reg_add_u8(r3, r6); code++; goto Next;
        case OpCode::AddU_R3_R7_X1:
            r3 = reg_add_u8(r3, r7); code++; goto Next;
        case OpCode::AddU_R4_R0_X1:
            r4 = reg_add_u8(r4, r0); code++; goto Next;
        case OpCode::AddU_R4_R1_X1:
            r4 = reg_add_u8(r4, r1); code++; goto Next;
        case OpCode::AddU_R4_R2_X1:
            r4 = reg_add_u8(r4, r2); code++; goto Next;
        case OpCode::AddU_R4_R3_X1:
            r4 = reg_add_u8(r4, r3); code++; goto Next;
        case OpCode::AddU_R4_R4_X1:
            r4 = reg_add_u8(r4, r4); code++; goto Next;
        case OpCode::AddU_R4_R5_X1:
            r4 = reg_add_u8(r4, r5); code++; goto Next;
        case OpCode::AddU_R4_R6_X1:
            r4 = reg_add_u8(r4, r6); code++; goto Next;
        case OpCode::AddU_R4_R7_X1:
            r4 = reg_add_u8(r4, r7); code++; goto Next;
        case OpCode::AddU_R5_R0_X1:
            r5 = reg_add_u8(r5, r0); code++; goto Next;
        case OpCode::AddU_R5_R1_X1:
            r5 = reg_add_u8(r5, r1); code++; goto Next;
        case OpCode::AddU_R5_R2_X1:
            r5 = reg_add_u8(r5, r2); code++; goto Next;
        case OpCode::AddU_R5_R3_X1:
            r5 = reg_add_u8(r5, r3); code++; goto Next;
        case OpCode::AddU_R5_R4_X1:
            r5 = reg_add_u8(r5, r4); code++; goto Next;
        case OpCode::AddU_R5_R5_X1:
            r5 = reg_add_u8(r5, r5); code++; goto Next;
        case OpCode::AddU_R5_R6_X1:
            r5 = reg_add_u8(r5, r6); code++; goto Next;
        case OpCode::AddU_R5_R7_X1:
            r5 = reg_add_u8(r5, r7); code++; goto Next;
        case OpCode::AddU_R6_R0_X1:
            r6 = reg_add_u8(r6, r0); code++; goto Next;
        case OpCode::AddU_R6_R1_X1:
            r6 = reg_add_u8(r6, r1); code++; goto Next;
        case OpCode::AddU_R6_R2_X1:
            r6 = reg_add_u8(r6, r2); code++; goto Next;
        case OpCode::AddU_R6_R3_X1:
            r6 = reg_add_u8(r6, r3); code++; goto Next;
        case OpCode::AddU_R6_R4_X1:
            r6 = reg_add_u8(r6, r4); code++; goto Next;
        case OpCode::AddU_R6_R5_X1:
            r6 = reg_add_u8(r6, r5); code++; goto Next;
        case OpCode::AddU_R6_R6_X1:
            r6 = reg_add_u8(r6, r6); code++; goto Next;
        case OpCode::AddU_R6_R7_X1:
            r6 = reg_add_u8(r6, r7); code++; goto Next;
        case OpCode::AddU_R7_R0_X1:
            r7 = reg_add_u8(r7, r0); code++; goto Next;
        case OpCode::AddU_R7_R1_X1:
            r7 = reg_add_u8(r7, r1); code++; goto Next;
        case OpCode::AddU_R7_R2_X1:
            r7 = reg_add_u8(r7, r2); code++; goto Next;
        case OpCode::AddU_R7_R3_X1:
            r7 = reg_add_u8(r7, r3); code++; goto Next;
        case OpCode::AddU_R7_R4_X1:
            r7 = reg_add_u8(r7, r4); code++; goto Next;
        case OpCode::AddU_R7_R5_X1:
            r7 = reg_add_u8(r7, r5); code++; goto Next;
        case OpCode::AddU_R7_R6_X1:
            r7 = reg_add_u8(r7, r6); code++; goto Next;
        case OpCode::AddU_R7_R7_X1:
            r7 = reg_add_u8(r7, r7); code++; goto Next;

        case OpCode::SubU_R0_R0_X1:
            r0 = reg_sub_u8(r0, r0); code++; goto Next;
        case OpCode::SubU_R0_R1_X1:
            r0 = reg_sub_u8(r0, r1); code++; goto Next;
        case OpCode::SubU_R0_R2_X1:
            r0 = reg_sub_u8(r0, r2); code++; goto Next;
        case OpCode::SubU_R0_R3_X1:
            r0 = reg_sub_u8(r0, r3); code++; goto Next;
        case OpCode::SubU_R0_R4_X1:
            r0 = reg_sub_u8(r0, r4); code++; goto Next;
        case OpCode::SubU_R0_R5_X1:
            r0 = reg_sub_u8(r0, r5); code++; goto Next;
        case OpCode::SubU_R0_R6_X1:
            r0 = reg_sub_u8(r0, r6); code++; goto Next;
        case OpCode::SubU_R0_R7_X1:
            r0 = reg_sub_u8(r0, r7); code++; goto Next;
        case OpCode::SubU_R1_R0_X1:
            r1 = reg_sub_u8(r1, r0); code++; goto Next;
        case OpCode::SubU_R1_R1_X1:
            r1 = reg_sub_u8(r1, r1); code++; goto Next;
        case OpCode::SubU_R1_R2_X1:
            r1 = reg_sub_u8(r1, r2); code++; goto Next;
        case OpCode::SubU_R1_R3_X1:
            r1 = reg_sub_u8(r1, r3); code++; goto Next;
        case OpCode::SubU_R1_R4_X1:
            r1 = reg_sub_u8(r1, r4); code++; goto Next;
        case OpCode::SubU_R1_R5_X1:
            r1 = reg_sub_u8(r1, r5); code++; goto Next;
        case OpCode::SubU_R1_R6_X1:
            r1 = reg_sub_u8(r1, r6); code++; goto Next;
        case OpCode::SubU_R1_R7_X1:
            r1 = reg_sub_u8(r1, r7); code++; goto Next;
        case OpCode::SubU_R2_R0_X1:
            r2 = reg_sub_u8(r2, r0); code++; goto Next;
        case OpCode::SubU_R2_R1_X1:
            r2 = reg_sub_u8(r2, r1); code++; goto Next;
        case OpCode::SubU_R2_R2_X1:
            r2 = reg_sub_u8(r2, r2); code++; goto Next;
        case OpCode::SubU_R2_R3_X1:
            r2 = reg_sub_u8(r2, r3); code++; goto Next;
        case OpCode::SubU_R2_R4_X1:
            r2 = reg_sub_u8(r2, r4); code++; goto Next;
        case OpCode::SubU_R2_R5_X1:
            r2 = reg_sub_u8(r2, r5); code++; goto Next;
        case OpCode::SubU_R2_R6_X1:
            r2 = reg_sub_u8(r2, r6); code++; goto Next;
        case OpCode::SubU_R2_R7_X1:
            r2 = reg_sub_u8(r2, r7); code++; goto Next;
        case OpCode::SubU_R3_R0_X1:
            r3 = reg_sub_u8(r3, r0); code++; goto Next;
        case OpCode::SubU_R3_R1_X1:
            r3 = reg_sub_u8(r3, r1); code++; goto Next;
        case OpCode::SubU_R3_R2_X1:
            r3 = reg_sub_u8(r3, r2); code++; goto Next;
        case OpCode::SubU_R3_R3_X1:
            r3 = reg_sub_u8(r3, r3); code++; goto Next;
        case OpCode::SubU_R3_R4_X1:
            r3 = reg_sub_u8(r3, r4); code++; goto Next;
        case OpCode::SubU_R3_R5_X1:
            r3 = reg_sub_u8(r3, r5); code++; goto Next;
        case OpCode::SubU_R3_R6_X1:
            r3 = reg_sub_u8(r3, r6); code++; goto Next;
        case OpCode::SubU_R3_R7_X1:
            r3 = reg_sub_u8(r3, r7); code++; goto Next;
        case OpCode::SubU_R4_R0_X1:
            r4 = reg_sub_u8(r4, r0); code++; goto Next;
        case OpCode::SubU_R4_R1_X1:
            r4 = reg_sub_u8(r4, r1); code++; goto Next;
        case OpCode::SubU_R4_R2_X1:
            r4 = reg_sub_u8(r4, r2); code++; goto Next;
        case OpCode::SubU_R4_R3_X1:
            r4 = reg_sub_u8(r4, r3); code++; goto Next;
        case OpCode::SubU_R4_R4_X1:
            r4 = reg_sub_u8(r4, r4); code++; goto Next;
        case OpCode::SubU_R4_R5_X1:
            r4 = reg_sub_u8(r4, r5); code++; goto Next;
        case OpCode::SubU_R4_R6_X1:
            r4 = reg_sub_u8(r4, r6); code++; goto Next;
        case OpCode::SubU_R4_R7_X1:
            r4 = reg_sub_u8(r4, r7); code++; goto Next;
        case OpCode::SubU_R5_R0_X1:
            r5 = reg_sub_u8(r5, r0); code++; goto Next;
        case OpCode::SubU_R5_R1_X1:
            r5 = reg_sub_u8(r5, r1); code++; goto Next;
        case OpCode::SubU_R5_R2_X1:
            r5 = reg_sub_u8(r5, r2); code++; goto Next;
        case OpCode::SubU_R5_R3_X1:
            r5 = reg_sub_u8(r5, r3); code++; goto Next;
        case OpCode::SubU_R5_R4_X1:
            r5 = reg_sub_u8(r5, r4); code++; goto Next;
        case OpCode::SubU_R5_R5_X1:
            r5 = reg_sub_u8(r5, r5); code++; goto Next;
        case OpCode::SubU_R5_R6_X1:
            r5 = reg_sub_u8(r5, r6); code++; goto Next;
        case OpCode::SubU_R5_R7_X1:
            r5 = reg_sub_u8(r5, r7); code++; goto Next;
        case OpCode::SubU_R6_R0_X1:
            r6 = reg_sub_u8(r6, r0); code++; goto Next;
        case OpCode::SubU_R6_R1_X1:
            r6 = reg_sub_u8(r6, r1); code++; goto Next;
        case OpCode::SubU_R6_R2_X1:
            r6 = reg_sub_u8(r6, r2); code++; goto Next;
        case OpCode::SubU_R6_R3_X1:
            r6 = reg_sub_u8(r6, r3); code++; goto Next;
        case OpCode::SubU_R6_R4_X1:
            r6 = reg_sub_u8(r6, r4); code++; goto Next;
        case OpCode::SubU_R6_R5_X1:
            r6 = reg_sub_u8(r6, r5); code++; goto Next;
        case OpCode::SubU_R6_R6_X1:
            r6 = reg_sub_u8(r6, r6); code++; goto Next;
        case OpCode::SubU_R6_R7_X1:
            r6 = reg_sub_u8(r6, r7); code++; goto Next;
        case OpCode::SubU_R7_R0_X1:
            r7 = reg_sub_u8(r7, r0); code++; goto Next;
        case OpCode::SubU_R7_R1_X1:
            r7 = reg_sub_u8(r7, r1); code++; goto Next;
        case OpCode::SubU_R7_R2_X1:
            r7 = reg_sub_u8(r7, r2); code++; goto Next;
        case OpCode::SubU_R7_R3_X1:
            r7 = reg_sub_u8(r7, r3); code++; goto Next;
        case OpCode::SubU_R7_R4_X1:
            r7 = reg_sub_u8(r7, r4); code++; goto Next;
        case OpCode::SubU_R7_R5_X1:
            r7 = reg_sub_u8(r7, r5); code++; goto Next;
        case OpCode::SubU_R7_R6_X1:
            r7 = reg_sub_u8(r7, r6); code++; goto Next;
        case OpCode::SubU_R7_R7_X1:
            r7 = reg_sub_u8(r7, r7); code++; goto Next;

        case OpCode::MulU_R0_R0_X1:
            r0 = reg_mul_u8(r0, r0); code++; goto Next;
        case OpCode::MulU_R0_R1_X1:
            r0 = reg_mul_u8(r0, r1); code++; goto Next;
        case OpCode::MulU_R0_R2_X1:
            r0 = reg_mul_u8(r0, r2); code++; goto Next;
        case OpCode::MulU_R0_R3_X1:
            r0 = reg_mul_u8(r0, r3); code++; goto Next;
        case OpCode::MulU_R0_R4_X1:
            r0 = reg_mul_u8(r0, r4); code++; goto Next;
        case OpCode::MulU_R0_R5_X1:
            r0 = reg_mul_u8(r0, r5); code++; goto Next;
        case OpCode::MulU_R0_R6_X1:
            r0 = reg_mul_u8(r0, r6); code++; goto Next;
        case OpCode::MulU_R0_R7_X1:
            r0 = reg_mul_u8(r0, r7); code++; goto Next;
        case OpCode::MulU_R1_R0_X1:
            r1 = reg_mul_u8(r1, r0); code++; goto Next;
        case OpCode::MulU_R1_R1_X1:
            r1 = reg_mul_u8(r1, r1); code++; goto Next;
        case OpCode::MulU_R1_R2_X1:
            r1 = reg_mul_u8(r1, r2); code++; goto Next;
        case OpCode::MulU_R1_R3_X1:
            r1 = reg_mul_u8(r1, r3); code++; goto Next;
        case OpCode::MulU_R1_R4_X1:
            r1 = reg_mul_u8(r1, r4); code++; goto Next;
        case OpCode::MulU_R1_R5_X1:
            r1 = reg_mul_u8(r1, r5); code++; goto Next;
        case OpCode::MulU_R1_R6_X1:
            r1 = reg_mul_u8(r1, r6); code++; goto Next;
        case OpCode::MulU_R1_R7_X1:
            r1 = reg_mul_u8(r1, r7); code++; goto Next;
        case OpCode::MulU_R2_R0_X1:
            r2 = reg_mul_u8(r2, r0); code++; goto Next;
        case OpCode::MulU_R2_R1_X1:
            r2 = reg_mul_u8(r2, r1); code++; goto Next;
        case OpCode::MulU_R2_R2_X1:
            r2 = reg_mul_u8(r2, r2); code++; goto Next;
        case OpCode::MulU_R2_R3_X1:
            r2 = reg_mul_u8(r2, r3); code++; goto Next;
        case OpCode::MulU_R2_R4_X1:
            r2 = reg_mul_u8(r2, r4); code++; goto Next;
        case OpCode::MulU_R2_R5_X1:
            r2 = reg_mul_u8(r2, r5); code++; goto Next;
        case OpCode::MulU_R2_R6_X1:
            r2 = reg_mul_u8(r2, r6); code++; goto Next;
        case OpCode::MulU_R2_R7_X1:
            r2 = reg_mul_u8(r2, r7); code++; goto Next;
        case OpCode::MulU_R3_R0_X1:
            r3 = reg_mul_u8(r3, r0); code++; goto Next;
        case OpCode::MulU_R3_R1_X1:
            r3 = reg_mul_u8(r3, r1); code++; goto Next;
        case OpCode::MulU_R3_R2_X1:
            r3 = reg_mul_u8(r3, r2); code++; goto Next;
        case OpCode::MulU_R3_R3_X1:
            r3 = reg_mul_u8(r3, r3); code++; goto Next;
        case OpCode::MulU_R3_R4_X1:
            r3 = reg_mul_u8(r3, r4); code++; goto Next;
        case OpCode::MulU_R3_R5_X1:
            r3 = reg_mul_u8(r3, r5); code++; goto Next;
        case OpCode::MulU_R3_R6_X1:
            r3 = reg_mul_u8(r3, r6); code++; goto Next;
        case OpCode::MulU_R3_R7_X1:
            r3 = reg_mul_u8(r3, r7); code++; goto Next;
        case OpCode::MulU_R4_R0_X1:
            r4 = reg_mul_u8(r4, r0); code++; goto Next;
        case OpCode::MulU_R4_R1_X1:
            r4 = reg_mul_u8(r4, r1); code++; goto Next;
        case OpCode::MulU_R4_R2_X1:
            r4 = reg_mul_u8(r4, r2); code++; goto Next;
        case OpCode::MulU_R4_R3_X1:
            r4 = reg_mul_u8(r4, r3); code++; goto Next;
        case OpCode::MulU_R4_R4_X1:
            r4 = reg_mul_u8(r4, r4); code++; goto Next;
        case OpCode::MulU_R4_R5_X1:
            r4 = reg_mul_u8(r4, r5); code++; goto Next;
        case OpCode::MulU_R4_R6_X1:
            r4 = reg_mul_u8(r4, r6); code++; goto Next;
        case OpCode::MulU_R4_R7_X1:
            r4 = reg_mul_u8(r4, r7); code++; goto Next;
        case OpCode::MulU_R5_R0_X1:
            r5 = reg_mul_u8(r5, r0); code++; goto Next;
        case OpCode::MulU_R5_R1_X1:
            r5 = reg_mul_u8(r5, r1); code++; goto Next;
        case OpCode::MulU_R5_R2_X1:
            r5 = reg_mul_u8(r5, r2); code++; goto Next;
        case OpCode::MulU_R5_R3_X1:
            r5 = reg_mul_u8(r5, r3); code++; goto Next;
        case OpCode::MulU_R5_R4_X1:
            r5 = reg_mul_u8(r5, r4); code++; goto Next;
        case OpCode::MulU_R5_R5_X1:
            r5 = reg_mul_u8(r5, r5); code++; goto Next;
        case OpCode::MulU_R5_R6_X1:
            r5 = reg_mul_u8(r5, r6); code++; goto Next;
        case OpCode::MulU_R5_R7_X1:
            r5 = reg_mul_u8(r5, r7); code++; goto Next;
        case OpCode::MulU_R6_R0_X1:
            r6 = reg_mul_u8(r6, r0); code++; goto Next;
        case OpCode::MulU_R6_R1_X1:
            r6 = reg_mul_u8(r6, r1); code++; goto Next;
        case OpCode::MulU_R6_R2_X1:
            r6 = reg_mul_u8(r6, r2); code++; goto Next;
        case OpCode::MulU_R6_R3_X1:
            r6 = reg_mul_u8(r6, r3); code++; goto Next;
        case OpCode::MulU_R6_R4_X1:
            r6 = reg_mul_u8(r6, r4); code++; goto Next;
        case OpCode::MulU_R6_R5_X1:
            r6 = reg_mul_u8(r6, r5); code++; goto Next;
        case OpCode::MulU_R6_R6_X1:
            r6 = reg_mul_u8(r6, r6); code++; goto Next;
        case OpCode::MulU_R6_R7_X1:
            r6 = reg_mul_u8(r6, r7); code++; goto Next;
        case OpCode::MulU_R7_R0_X1:
            r7 = reg_mul_u8(r7, r0); code++; goto Next;
        case OpCode::MulU_R7_R1_X1:
            r7 = reg_mul_u8(r7, r1); code++; goto Next;
        case OpCode::MulU_R7_R2_X1:
            r7 = reg_mul_u8(r7, r2); code++; goto Next;
        case OpCode::MulU_R7_R3_X1:
            r7 = reg_mul_u8(r7, r3); code++; goto Next;
        case OpCode::MulU_R7_R4_X1:
            r7 = reg_mul_u8(r7, r4); code++; goto Next;
        case OpCode::MulU_R7_R5_X1:
            r7 = reg_mul_u8(r7, r5); code++; goto Next;
        case OpCode::MulU_R7_R6_X1:
            r7 = reg_mul_u8(r7, r6); code++; goto Next;
        case OpCode::MulU_R7_R7_X1:
            r7 = reg_mul_u8(r7, r7); code++; goto Next;

        case OpCode::DivU_R0_R0_X1:
            r0 = reg_div_u8(r0, r0); code++; goto Next;
        case OpCode::DivU_R0_R1_X1:
            r0 = reg_div_u8(r0, r1); code++; goto Next;
        case OpCode::DivU_R0_R2_X1:
            r0 = reg_div_u8(r0, r2); code++; goto Next;
        case OpCode::DivU_R0_R3_X1:
            r0 = reg_div_u8(r0, r3); code++; goto Next;
        case OpCode::DivU_R0_R4_X1:
            r0 = reg_div_u8(r0, r4); code++; goto Next;
        case OpCode::DivU_R0_R5_X1:
            r0 = reg_div_u8(r0, r5); code++; goto Next;
        case OpCode::DivU_R0_R6_X1:
            r0 = reg_div_u8(r0, r6); code++; goto Next;
        case OpCode::DivU_R0_R7_X1:
            r0 = reg_div_u8(r0, r7); code++; goto Next;
        case OpCode::DivU_R1_R0_X1:
            r1 = reg_div_u8(r1, r0); code++; goto Next;
        case OpCode::DivU_R1_R1_X1:
            r1 = reg_div_u8(r1, r1); code++; goto Next;
        case OpCode::DivU_R1_R2_X1:
            r1 = reg_div_u8(r1, r2); code++; goto Next;
        case OpCode::DivU_R1_R3_X1:
            r1 = reg_div_u8(r1, r3); code++; goto Next;
        case OpCode::DivU_R1_R4_X1:
            r1 = reg_div_u8(r1, r4); code++; goto Next;
        case OpCode::DivU_R1_R5_X1:
            r1 = reg_div_u8(r1, r5); code++; goto Next;
        case OpCode::DivU_R1_R6_X1:
            r1 = reg_div_u8(r1, r6); code++; goto Next;
        case OpCode::DivU_R1_R7_X1:
            r1 = reg_div_u8(r1, r7); code++; goto Next;
        case OpCode::DivU_R2_R0_X1:
            r2 = reg_div_u8(r2, r0); code++; goto Next;
        case OpCode::DivU_R2_R1_X1:
            r2 = reg_div_u8(r2, r1); code++; goto Next;
        case OpCode::DivU_R2_R2_X1:
            r2 = reg_div_u8(r2, r2); code++; goto Next;
        case OpCode::DivU_R2_R3_X1:
            r2 = reg_div_u8(r2, r3); code++; goto Next;
        case OpCode::DivU_R2_R4_X1:
            r2 = reg_div_u8(r2, r4); code++; goto Next;
        case OpCode::DivU_R2_R5_X1:
            r2 = reg_div_u8(r2, r5); code++; goto Next;
        case OpCode::DivU_R2_R6_X1:
            r2 = reg_div_u8(r2, r6); code++; goto Next;
        case OpCode::DivU_R2_R7_X1:
            r2 = reg_div_u8(r2, r7); code++; goto Next;
        case OpCode::DivU_R3_R0_X1:
            r3 = reg_div_u8(r3, r0); code++; goto Next;
        case OpCode::DivU_R3_R1_X1:
            r3 = reg_div_u8(r3, r1); code++; goto Next;
        case OpCode::DivU_R3_R2_X1:
            r3 = reg_div_u8(r3, r2); code++; goto Next;
        case OpCode::DivU_R3_R3_X1:
            r3 = reg_div_u8(r3, r3); code++; goto Next;
        case OpCode::DivU_R3_R4_X1:
            r3 = reg_div_u8(r3, r4); code++; goto Next;
        case OpCode::DivU_R3_R5_X1:
            r3 = reg_div_u8(r3, r5); code++; goto Next;
        case OpCode::DivU_R3_R6_X1:
            r3 = reg_div_u8(r3, r6); code++; goto Next;
        case OpCode::DivU_R3_R7_X1:
            r3 = reg_div_u8(r3, r7); code++; goto Next;
        case OpCode::DivU_R4_R0_X1:
            r4 = reg_div_u8(r4, r0); code++; goto Next;
        case OpCode::DivU_R4_R1_X1:
            r4 = reg_div_u8(r4, r1); code++; goto Next;
        case OpCode::DivU_R4_R2_X1:
            r4 = reg_div_u8(r4, r2); code++; goto Next;
        case OpCode::DivU_R4_R3_X1:
            r4 = reg_div_u8(r4, r3); code++; goto Next;
        case OpCode::DivU_R4_R4_X1:
            r4 = reg_div_u8(r4, r4); code++; goto Next;
        case OpCode::DivU_R4_R5_X1:
            r4 = reg_div_u8(r4, r5); code++; goto Next;
        case OpCode::DivU_R4_R6_X1:
            r4 = reg_div_u8(r4, r6); code++; goto Next;
        case OpCode::DivU_R4_R7_X1:
            r4 = reg_div_u8(r4, r7); code++; goto Next;
        case OpCode::DivU_R5_R0_X1:
            r5 = reg_div_u8(r5, r0); code++; goto Next;
        case OpCode::DivU_R5_R1_X1:
            r5 = reg_div_u8(r5, r1); code++; goto Next;
        case OpCode::DivU_R5_R2_X1:
            r5 = reg_div_u8(r5, r2); code++; goto Next;
        case OpCode::DivU_R5_R3_X1:
            r5 = reg_div_u8(r5, r3); code++; goto Next;
        case OpCode::DivU_R5_R4_X1:
            r5 = reg_div_u8(r5, r4); code++; goto Next;
        case OpCode::DivU_R5_R5_X1:
            r5 = reg_div_u8(r5, r5); code++; goto Next;
        case OpCode::DivU_R5_R6_X1:
            r5 = reg_div_u8(r5, r6); code++; goto Next;
        case OpCode::DivU_R5_R7_X1:
            r5 = reg_div_u8(r5, r7); code++; goto Next;
        case OpCode::DivU_R6_R0_X1:
            r6 = reg_div_u8(r6, r0); code++; goto Next;
        case OpCode::DivU_R6_R1_X1:
            r6 = reg_div_u8(r6, r1); code++; goto Next;
        case OpCode::DivU_R6_R2_X1:
            r6 = reg_div_u8(r6, r2); code++; goto Next;
        case OpCode::DivU_R6_R3_X1:
            r6 = reg_div_u8(r6, r3); code++; goto Next;
        case OpCode::DivU_R6_R4_X1:
            r6 = reg_div_u8(r6, r4); code++; goto Next;
        case OpCode::DivU_R6_R5_X1:
            r6 = reg_div_u8(r6, r5); code++; goto Next;
        case OpCode::DivU_R6_R6_X1:
            r6 = reg_div_u8(r6, r6); code++; goto Next;
        case OpCode::DivU_R6_R7_X1:
            r6 = reg_div_u8(r6, r7); code++; goto Next;
        case OpCode::DivU_R7_R0_X1:
            r7 = reg_div_u8(r7, r0); code++; goto Next;
        case OpCode::DivU_R7_R1_X1:
            r7 = reg_div_u8(r7, r1); code++; goto Next;
        case OpCode::DivU_R7_R2_X1:
            r7 = reg_div_u8(r7, r2); code++; goto Next;
        case OpCode::DivU_R7_R3_X1:
            r7 = reg_div_u8(r7, r3); code++; goto Next;
        case OpCode::DivU_R7_R4_X1:
            r7 = reg_div_u8(r7, r4); code++; goto Next;
        case OpCode::DivU_R7_R5_X1:
            r7 = reg_div_u8(r7, r5); code++; goto Next;
        case OpCode::DivU_R7_R6_X1:
            r7 = reg_div_u8(r7, r6); code++; goto Next;
        case OpCode::DivU_R7_R7_X1:
            r7 = reg_div_u8(r7, r7); code++; goto Next;

        case OpCode::AddU_R0_R0_X2:
            r0 = reg_add_u16(r0, r0); code++; goto Next;
        case OpCode::AddU_R0_R1_X2:
            r0 = reg_add_u16(r0, r1); code++; goto Next;
        case OpCode::AddU_R0_R2_X2:
            r0 = reg_add_u16(r0, r2); code++; goto Next;
        case OpCode::AddU_R0_R3_X2:
            r0 = reg_add_u16(r0, r3); code++; goto Next;
        case OpCode::AddU_R0_R4_X2:
            r0 = reg_add_u16(r0, r4); code++; goto Next;
        case OpCode::AddU_R0_R5_X2:
            r0 = reg_add_u16(r0, r5); code++; goto Next;
        case OpCode::AddU_R0_R6_X2:
            r0 = reg_add_u16(r0, r6); code++; goto Next;
        case OpCode::AddU_R0_R7_X2:
            r0 = reg_add_u16(r0, r7); code++; goto Next;
        case OpCode::AddU_R1_R0_X2:
            r1 = reg_add_u16(r1, r0); code++; goto Next;
        case OpCode::AddU_R1_R1_X2:
            r1 = reg_add_u16(r1, r1); code++; goto Next;
        case OpCode::AddU_R1_R2_X2:
            r1 = reg_add_u16(r1, r2); code++; goto Next;
        case OpCode::AddU_R1_R3_X2:
            r1 = reg_add_u16(r1, r3); code++; goto Next;
        case OpCode::AddU_R1_R4_X2:
            r1 = reg_add_u16(r1, r4); code++; goto Next;
        case OpCode::AddU_R1_R5_X2:
            r1 = reg_add_u16(r1, r5); code++; goto Next;
        case OpCode::AddU_R1_R6_X2:
            r1 = reg_add_u16(r1, r6); code++; goto Next;
        case OpCode::AddU_R1_R7_X2:
            r1 = reg_add_u16(r1, r7); code++; goto Next;
        case OpCode::AddU_R2_R0_X2:
            r2 = reg_add_u16(r2, r0); code++; goto Next;
        case OpCode::AddU_R2_R1_X2:
            r2 = reg_add_u16(r2, r1); code++; goto Next;
        case OpCode::AddU_R2_R2_X2:
            r2 = reg_add_u16(r2, r2); code++; goto Next;
        case OpCode::AddU_R2_R3_X2:
            r2 = reg_add_u16(r2, r3); code++; goto Next;
        case OpCode::AddU_R2_R4_X2:
            r2 = reg_add_u16(r2, r4); code++; goto Next;
        case OpCode::AddU_R2_R5_X2:
            r2 = reg_add_u16(r2, r5); code++; goto Next;
        case OpCode::AddU_R2_R6_X2:
            r2 = reg_add_u16(r2, r6); code++; goto Next;
        case OpCode::AddU_R2_R7_X2:
            r2 = reg_add_u16(r2, r7); code++; goto Next;
        case OpCode::AddU_R3_R0_X2:
            r3 = reg_add_u16(r3, r0); code++; goto Next;
        case OpCode::AddU_R3_R1_X2:
            r3 = reg_add_u16(r3, r1); code++; goto Next;
        case OpCode::AddU_R3_R2_X2:
            r3 = reg_add_u16(r3, r2); code++; goto Next;
        case OpCode::AddU_R3_R3_X2:
            r3 = reg_add_u16(r3, r3); code++; goto Next;
        case OpCode::AddU_R3_R4_X2:
            r3 = reg_add_u16(r3, r4); code++; goto Next;
        case OpCode::AddU_R3_R5_X2:
            r3 = reg_add_u16(r3, r5); code++; goto Next;
        case OpCode::AddU_R3_R6_X2:
            r3 = reg_add_u16(r3, r6); code++; goto Next;
        case OpCode::AddU_R3_R7_X2:
            r3 = reg_add_u16(r3, r7); code++; goto Next;
        case OpCode::AddU_R4_R0_X2:
            r4 = reg_add_u16(r4, r0); code++; goto Next;
        case OpCode::AddU_R4_R1_X2:
            r4 = reg_add_u16(r4, r1); code++; goto Next;
        case OpCode::AddU_R4_R2_X2:
            r4 = reg_add_u16(r4, r2); code++; goto Next;
        case OpCode::AddU_R4_R3_X2:
            r4 = reg_add_u16(r4, r3); code++; goto Next;
        case OpCode::AddU_R4_R4_X2:
            r4 = reg_add_u16(r4, r4); code++; goto Next;
        case OpCode::AddU_R4_R5_X2:
            r4 = reg_add_u16(r4, r5); code++; goto Next;
        case OpCode::AddU_R4_R6_X2:
            r4 = reg_add_u16(r4, r6); code++; goto Next;
        case OpCode::AddU_R4_R7_X2:
            r4 = reg_add_u16(r4, r7); code++; goto Next;
        case OpCode::AddU_R5_R0_X2:
            r5 = reg_add_u16(r5, r0); code++; goto Next;
        case OpCode::AddU_R5_R1_X2:
            r5 = reg_add_u16(r5, r1); code++; goto Next;
        case OpCode::AddU_R5_R2_X2:
            r5 = reg_add_u16(r5, r2); code++; goto Next;
        case OpCode::AddU_R5_R3_X2:
            r5 = reg_add_u16(r5, r3); code++; goto Next;
        case OpCode::AddU_R5_R4_X2:
            r5 = reg_add_u16(r5, r4); code++; goto Next;
        case OpCode::AddU_R5_R5_X2:
            r5 = reg_add_u16(r5, r5); code++; goto Next;
        case OpCode::AddU_R5_R6_X2:
            r5 = reg_add_u16(r5, r6); code++; goto Next;
        case OpCode::AddU_R5_R7_X2:
            r5 = reg_add_u16(r5, r7); code++; goto Next;
        case OpCode::AddU_R6_R0_X2:
            r6 = reg_add_u16(r6, r0); code++; goto Next;
        case OpCode::AddU_R6_R1_X2:
            r6 = reg_add_u16(r6, r1); code++; goto Next;
        case OpCode::AddU_R6_R2_X2:
            r6 = reg_add_u16(r6, r2); code++; goto Next;
        case OpCode::AddU_R6_R3_X2:
            r6 = reg_add_u16(r6, r3); code++; goto Next;
        case OpCode::AddU_R6_R4_X2:
            r6 = reg_add_u16(r6, r4); code++; goto Next;
        case OpCode::AddU_R6_R5_X2:
            r6 = reg_add_u16(r6, r5); code++; goto Next;
        case OpCode::AddU_R6_R6_X2:
            r6 = reg_add_u16(r6, r6); code++; goto Next;
        case OpCode::AddU_R6_R7_X2:
            r6 = reg_add_u16(r6, r7); code++; goto Next;
        case OpCode::AddU_R7_R0_X2:
            r7 = reg_add_u16(r7, r0); code++; goto Next;
        case OpCode::AddU_R7_R1_X2:
            r7 = reg_add_u16(r7, r1); code++; goto Next;
        case OpCode::AddU_R7_R2_X2:
            r7 = reg_add_u16(r7, r2); code++; goto Next;
        case OpCode::AddU_R7_R3_X2:
            r7 = reg_add_u16(r7, r3); code++; goto Next;
        case OpCode::AddU_R7_R4_X2:
            r7 = reg_add_u16(r7, r4); code++; goto Next;
        case OpCode::AddU_R7_R5_X2:
            r7 = reg_add_u16(r7, r5); code++; goto Next;
        case OpCode::AddU_R7_R6_X2:
            r7 = reg_add_u16(r7, r6); code++; goto Next;
        case OpCode::AddU_R7_R7_X2:
            r7 = reg_add_u16(r7, r7); code++; goto Next;

        case OpCode::SubU_R0_R0_X2:
            r0 = reg_sub_u16(r0, r0); code++; goto Next;
        case OpCode::SubU_R0_R1_X2:
            r0 = reg_sub_u16(r0, r1); code++; goto Next;
        case OpCode::SubU_R0_R2_X2:
            r0 = reg_sub_u16(r0, r2); code++; goto Next;
        case OpCode::SubU_R0_R3_X2:
            r0 = reg_sub_u16(r0, r3); code++; goto Next;
        case OpCode::SubU_R0_R4_X2:
            r0 = reg_sub_u16(r0, r4); code++; goto Next;
        case OpCode::SubU_R0_R5_X2:
            r0 = reg_sub_u16(r0, r5); code++; goto Next;
        case OpCode::SubU_R0_R6_X2:
            r0 = reg_sub_u16(r0, r6); code++; goto Next;
        case OpCode::SubU_R0_R7_X2:
            r0 = reg_sub_u16(r0, r7); code++; goto Next;
        case OpCode::SubU_R1_R0_X2:
            r1 = reg_sub_u16(r1, r0); code++; goto Next;
        case OpCode::SubU_R1_R1_X2:
            r1 = reg_sub_u16(r1, r1); code++; goto Next;
        case OpCode::SubU_R1_R2_X2:
            r1 = reg_sub_u16(r1, r2); code++; goto Next;
        case OpCode::SubU_R1_R3_X2:
            r1 = reg_sub_u16(r1, r3); code++; goto Next;
        case OpCode::SubU_R1_R4_X2:
            r1 = reg_sub_u16(r1, r4); code++; goto Next;
        case OpCode::SubU_R1_R5_X2:
            r1 = reg_sub_u16(r1, r5); code++; goto Next;
        case OpCode::SubU_R1_R6_X2:
            r1 = reg_sub_u16(r1, r6); code++; goto Next;
        case OpCode::SubU_R1_R7_X2:
            r1 = reg_sub_u16(r1, r7); code++; goto Next;
        case OpCode::SubU_R2_R0_X2:
            r2 = reg_sub_u16(r2, r0); code++; goto Next;
        case OpCode::SubU_R2_R1_X2:
            r2 = reg_sub_u16(r2, r1); code++; goto Next;
        case OpCode::SubU_R2_R2_X2:
            r2 = reg_sub_u16(r2, r2); code++; goto Next;
        case OpCode::SubU_R2_R3_X2:
            r2 = reg_sub_u16(r2, r3); code++; goto Next;
        case OpCode::SubU_R2_R4_X2:
            r2 = reg_sub_u16(r2, r4); code++; goto Next;
        case OpCode::SubU_R2_R5_X2:
            r2 = reg_sub_u16(r2, r5); code++; goto Next;
        case OpCode::SubU_R2_R6_X2:
            r2 = reg_sub_u16(r2, r6); code++; goto Next;
        case OpCode::SubU_R2_R7_X2:
            r2 = reg_sub_u16(r2, r7); code++; goto Next;
        case OpCode::SubU_R3_R0_X2:
            r3 = reg_sub_u16(r3, r0); code++; goto Next;
        case OpCode::SubU_R3_R1_X2:
            r3 = reg_sub_u16(r3, r1); code++; goto Next;
        case OpCode::SubU_R3_R2_X2:
            r3 = reg_sub_u16(r3, r2); code++; goto Next;
        case OpCode::SubU_R3_R3_X2:
            r3 = reg_sub_u16(r3, r3); code++; goto Next;
        case OpCode::SubU_R3_R4_X2:
            r3 = reg_sub_u16(r3, r4); code++; goto Next;
        case OpCode::SubU_R3_R5_X2:
            r3 = reg_sub_u16(r3, r5); code++; goto Next;
        case OpCode::SubU_R3_R6_X2:
            r3 = reg_sub_u16(r3, r6); code++; goto Next;
        case OpCode::SubU_R3_R7_X2:
            r3 = reg_sub_u16(r3, r7); code++; goto Next;
        case OpCode::SubU_R4_R0_X2:
            r4 = reg_sub_u16(r4, r0); code++; goto Next;
        case OpCode::SubU_R4_R1_X2:
            r4 = reg_sub_u16(r4, r1); code++; goto Next;
        case OpCode::SubU_R4_R2_X2:
            r4 = reg_sub_u16(r4, r2); code++; goto Next;
        case OpCode::SubU_R4_R3_X2:
            r4 = reg_sub_u16(r4, r3); code++; goto Next;
        case OpCode::SubU_R4_R4_X2:
            r4 = reg_sub_u16(r4, r4); code++; goto Next;
        case OpCode::SubU_R4_R5_X2:
            r4 = reg_sub_u16(r4, r5); code++; goto Next;
        case OpCode::SubU_R4_R6_X2:
            r4 = reg_sub_u16(r4, r6); code++; goto Next;
        case OpCode::SubU_R4_R7_X2:
            r4 = reg_sub_u16(r4, r7); code++; goto Next;
        case OpCode::SubU_R5_R0_X2:
            r5 = reg_sub_u16(r5, r0); code++; goto Next;
        case OpCode::SubU_R5_R1_X2:
            r5 = reg_sub_u16(r5, r1); code++; goto Next;
        case OpCode::SubU_R5_R2_X2:
            r5 = reg_sub_u16(r5, r2); code++; goto Next;
        case OpCode::SubU_R5_R3_X2:
            r5 = reg_sub_u16(r5, r3); code++; goto Next;
        case OpCode::SubU_R5_R4_X2:
            r5 = reg_sub_u16(r5, r4); code++; goto Next;
        case OpCode::SubU_R5_R5_X2:
            r5 = reg_sub_u16(r5, r5); code++; goto Next;
        case OpCode::SubU_R5_R6_X2:
            r5 = reg_sub_u16(r5, r6); code++; goto Next;
        case OpCode::SubU_R5_R7_X2:
            r5 = reg_sub_u16(r5, r7); code++; goto Next;
        case OpCode::SubU_R6_R0_X2:
            r6 = reg_sub_u16(r6, r0); code++; goto Next;
        case OpCode::SubU_R6_R1_X2:
            r6 = reg_sub_u16(r6, r1); code++; goto Next;
        case OpCode::SubU_R6_R2_X2:
            r6 = reg_sub_u16(r6, r2); code++; goto Next;
        case OpCode::SubU_R6_R3_X2:
            r6 = reg_sub_u16(r6, r3); code++; goto Next;
        case OpCode::SubU_R6_R4_X2:
            r6 = reg_sub_u16(r6, r4); code++; goto Next;
        case OpCode::SubU_R6_R5_X2:
            r6 = reg_sub_u16(r6, r5); code++; goto Next;
        case OpCode::SubU_R6_R6_X2:
            r6 = reg_sub_u16(r6, r6); code++; goto Next;
        case OpCode::SubU_R6_R7_X2:
            r6 = reg_sub_u16(r6, r7); code++; goto Next;
        case OpCode::SubU_R7_R0_X2:
            r7 = reg_sub_u16(r7, r0); code++; goto Next;
        case OpCode::SubU_R7_R1_X2:
            r7 = reg_sub_u16(r7, r1); code++; goto Next;
        case OpCode::SubU_R7_R2_X2:
            r7 = reg_sub_u16(r7, r2); code++; goto Next;
        case OpCode::SubU_R7_R3_X2:
            r7 = reg_sub_u16(r7, r3); code++; goto Next;
        case OpCode::SubU_R7_R4_X2:
            r7 = reg_sub_u16(r7, r4); code++; goto Next;
        case OpCode::SubU_R7_R5_X2:
            r7 = reg_sub_u16(r7, r5); code++; goto Next;
        case OpCode::SubU_R7_R6_X2:
            r7 = reg_sub_u16(r7, r6); code++; goto Next;
        case OpCode::SubU_R7_R7_X2:
            r7 = reg_sub_u16(r7, r7); code++; goto Next;

        case OpCode::MulU_R0_R0_X2:
            r0 = reg_mul_u16(r0, r0); code++; goto Next;
        case OpCode::MulU_R0_R1_X2:
            r0 = reg_mul_u16(r0, r1); code++; goto Next;
        case OpCode::MulU_R0_R2_X2:
            r0 = reg_mul_u16(r0, r2); code++; goto Next;
        case OpCode::MulU_R0_R3_X2:
            r0 = reg_mul_u16(r0, r3); code++; goto Next;
        case OpCode::MulU_R0_R4_X2:
            r0 = reg_mul_u16(r0, r4); code++; goto Next;
        case OpCode::MulU_R0_R5_X2:
            r0 = reg_mul_u16(r0, r5); code++; goto Next;
        case OpCode::MulU_R0_R6_X2:
            r0 = reg_mul_u16(r0, r6); code++; goto Next;
        case OpCode::MulU_R0_R7_X2:
            r0 = reg_mul_u16(r0, r7); code++; goto Next;
        case OpCode::MulU_R1_R0_X2:
            r1 = reg_mul_u16(r1, r0); code++; goto Next;
        case OpCode::MulU_R1_R1_X2:
            r1 = reg_mul_u16(r1, r1); code++; goto Next;
        case OpCode::MulU_R1_R2_X2:
            r1 = reg_mul_u16(r1, r2); code++; goto Next;
        case OpCode::MulU_R1_R3_X2:
            r1 = reg_mul_u16(r1, r3); code++; goto Next;
        case OpCode::MulU_R1_R4_X2:
            r1 = reg_mul_u16(r1, r4); code++; goto Next;
        case OpCode::MulU_R1_R5_X2:
            r1 = reg_mul_u16(r1, r5); code++; goto Next;
        case OpCode::MulU_R1_R6_X2:
            r1 = reg_mul_u16(r1, r6); code++; goto Next;
        case OpCode::MulU_R1_R7_X2:
            r1 = reg_mul_u16(r1, r7); code++; goto Next;
        case OpCode::MulU_R2_R0_X2:
            r2 = reg_mul_u16(r2, r0); code++; goto Next;
        case OpCode::MulU_R2_R1_X2:
            r2 = reg_mul_u16(r2, r1); code++; goto Next;
        case OpCode::MulU_R2_R2_X2:
            r2 = reg_mul_u16(r2, r2); code++; goto Next;
        case OpCode::MulU_R2_R3_X2:
            r2 = reg_mul_u16(r2, r3); code++; goto Next;
        case OpCode::MulU_R2_R4_X2:
            r2 = reg_mul_u16(r2, r4); code++; goto Next;
        case OpCode::MulU_R2_R5_X2:
            r2 = reg_mul_u16(r2, r5); code++; goto Next;
        case OpCode::MulU_R2_R6_X2:
            r2 = reg_mul_u16(r2, r6); code++; goto Next;
        case OpCode::MulU_R2_R7_X2:
            r2 = reg_mul_u16(r2, r7); code++; goto Next;
        case OpCode::MulU_R3_R0_X2:
            r3 = reg_mul_u16(r3, r0); code++; goto Next;
        case OpCode::MulU_R3_R1_X2:
            r3 = reg_mul_u16(r3, r1); code++; goto Next;
        case OpCode::MulU_R3_R2_X2:
            r3 = reg_mul_u16(r3, r2); code++; goto Next;
        case OpCode::MulU_R3_R3_X2:
            r3 = reg_mul_u16(r3, r3); code++; goto Next;
        case OpCode::MulU_R3_R4_X2:
            r3 = reg_mul_u16(r3, r4); code++; goto Next;
        case OpCode::MulU_R3_R5_X2:
            r3 = reg_mul_u16(r3, r5); code++; goto Next;
        case OpCode::MulU_R3_R6_X2:
            r3 = reg_mul_u16(r3, r6); code++; goto Next;
        case OpCode::MulU_R3_R7_X2:
            r3 = reg_mul_u16(r3, r7); code++; goto Next;
        case OpCode::MulU_R4_R0_X2:
            r4 = reg_mul_u16(r4, r0); code++; goto Next;
        case OpCode::MulU_R4_R1_X2:
            r4 = reg_mul_u16(r4, r1); code++; goto Next;
        case OpCode::MulU_R4_R2_X2:
            r4 = reg_mul_u16(r4, r2); code++; goto Next;
        case OpCode::MulU_R4_R3_X2:
            r4 = reg_mul_u16(r4, r3); code++; goto Next;
        case OpCode::MulU_R4_R4_X2:
            r4 = reg_mul_u16(r4, r4); code++; goto Next;
        case OpCode::MulU_R4_R5_X2:
            r4 = reg_mul_u16(r4, r5); code++; goto Next;
        case OpCode::MulU_R4_R6_X2:
            r4 = reg_mul_u16(r4, r6); code++; goto Next;
        case OpCode::MulU_R4_R7_X2:
            r4 = reg_mul_u16(r4, r7); code++; goto Next;
        case OpCode::MulU_R5_R0_X2:
            r5 = reg_mul_u16(r5, r0); code++; goto Next;
        case OpCode::MulU_R5_R1_X2:
            r5 = reg_mul_u16(r5, r1); code++; goto Next;
        case OpCode::MulU_R5_R2_X2:
            r5 = reg_mul_u16(r5, r2); code++; goto Next;
        case OpCode::MulU_R5_R3_X2:
            r5 = reg_mul_u16(r5, r3); code++; goto Next;
        case OpCode::MulU_R5_R4_X2:
            r5 = reg_mul_u16(r5, r4); code++; goto Next;
        case OpCode::MulU_R5_R5_X2:
            r5 = reg_mul_u16(r5, r5); code++; goto Next;
        case OpCode::MulU_R5_R6_X2:
            r5 = reg_mul_u16(r5, r6); code++; goto Next;
        case OpCode::MulU_R5_R7_X2:
            r5 = reg_mul_u16(r5, r7); code++; goto Next;
        case OpCode::MulU_R6_R0_X2:
            r6 = reg_mul_u16(r6, r0); code++; goto Next;
        case OpCode::MulU_R6_R1_X2:
            r6 = reg_mul_u16(r6, r1); code++; goto Next;
        case OpCode::MulU_R6_R2_X2:
            r6 = reg_mul_u16(r6, r2); code++; goto Next;
        case OpCode::MulU_R6_R3_X2:
            r6 = reg_mul_u16(r6, r3); code++; goto Next;
        case OpCode::MulU_R6_R4_X2:
            r6 = reg_mul_u16(r6, r4); code++; goto Next;
        case OpCode::MulU_R6_R5_X2:
            r6 = reg_mul_u16(r6, r5); code++; goto Next;
        case OpCode::MulU_R6_R6_X2:
            r6 = reg_mul_u16(r6, r6); code++; goto Next;
        case OpCode::MulU_R6_R7_X2:
            r6 = reg_mul_u16(r6, r7); code++; goto Next;
        case OpCode::MulU_R7_R0_X2:
            r7 = reg_mul_u16(r7, r0); code++; goto Next;
        case OpCode::MulU_R7_R1_X2:
            r7 = reg_mul_u16(r7, r1); code++; goto Next;
        case OpCode::MulU_R7_R2_X2:
            r7 = reg_mul_u16(r7, r2); code++; goto Next;
        case OpCode::MulU_R7_R3_X2:
            r7 = reg_mul_u16(r7, r3); code++; goto Next;
        case OpCode::MulU_R7_R4_X2:
            r7 = reg_mul_u16(r7, r4); code++; goto Next;
        case OpCode::MulU_R7_R5_X2:
            r7 = reg_mul_u16(r7, r5); code++; goto Next;
        case OpCode::MulU_R7_R6_X2:
            r7 = reg_mul_u16(r7, r6); code++; goto Next;
        case OpCode::MulU_R7_R7_X2:
            r7 = reg_mul_u16(r7, r7); code++; goto Next;

        case OpCode::DivU_R0_R0_X2:
            r0 = reg_div_u16(r0, r0); code++; goto Next;
        case OpCode::DivU_R0_R1_X2:
            r0 = reg_div_u16(r0, r1); code++; goto Next;
        case OpCode::DivU_R0_R2_X2:
            r0 = reg_div_u16(r0, r2); code++; goto Next;
        case OpCode::DivU_R0_R3_X2:
            r0 = reg_div_u16(r0, r3); code++; goto Next;
        case OpCode::DivU_R0_R4_X2:
            r0 = reg_div_u16(r0, r4); code++; goto Next;
        case OpCode::DivU_R0_R5_X2:
            r0 = reg_div_u16(r0, r5); code++; goto Next;
        case OpCode::DivU_R0_R6_X2:
            r0 = reg_div_u16(r0, r6); code++; goto Next;
        case OpCode::DivU_R0_R7_X2:
            r0 = reg_div_u16(r0, r7); code++; goto Next;
        case OpCode::DivU_R1_R0_X2:
            r1 = reg_div_u16(r1, r0); code++; goto Next;
        case OpCode::DivU_R1_R1_X2:
            r1 = reg_div_u16(r1, r1); code++; goto Next;
        case OpCode::DivU_R1_R2_X2:
            r1 = reg_div_u16(r1, r2); code++; goto Next;
        case OpCode::DivU_R1_R3_X2:
            r1 = reg_div_u16(r1, r3); code++; goto Next;
        case OpCode::DivU_R1_R4_X2:
            r1 = reg_div_u16(r1, r4); code++; goto Next;
        case OpCode::DivU_R1_R5_X2:
            r1 = reg_div_u16(r1, r5); code++; goto Next;
        case OpCode::DivU_R1_R6_X2:
            r1 = reg_div_u16(r1, r6); code++; goto Next;
        case OpCode::DivU_R1_R7_X2:
            r1 = reg_div_u16(r1, r7); code++; goto Next;
        case OpCode::DivU_R2_R0_X2:
            r2 = reg_div_u16(r2, r0); code++; goto Next;
        case OpCode::DivU_R2_R1_X2:
            r2 = reg_div_u16(r2, r1); code++; goto Next;
        case OpCode::DivU_R2_R2_X2:
            r2 = reg_div_u16(r2, r2); code++; goto Next;
        case OpCode::DivU_R2_R3_X2:
            r2 = reg_div_u16(r2, r3); code++; goto Next;
        case OpCode::DivU_R2_R4_X2:
            r2 = reg_div_u16(r2, r4); code++; goto Next;
        case OpCode::DivU_R2_R5_X2:
            r2 = reg_div_u16(r2, r5); code++; goto Next;
        case OpCode::DivU_R2_R6_X2:
            r2 = reg_div_u16(r2, r6); code++; goto Next;
        case OpCode::DivU_R2_R7_X2:
            r2 = reg_div_u16(r2, r7); code++; goto Next;
        case OpCode::DivU_R3_R0_X2:
            r3 = reg_div_u16(r3, r0); code++; goto Next;
        case OpCode::DivU_R3_R1_X2:
            r3 = reg_div_u16(r3, r1); code++; goto Next;
        case OpCode::DivU_R3_R2_X2:
            r3 = reg_div_u16(r3, r2); code++; goto Next;
        case OpCode::DivU_R3_R3_X2:
            r3 = reg_div_u16(r3, r3); code++; goto Next;
        case OpCode::DivU_R3_R4_X2:
            r3 = reg_div_u16(r3, r4); code++; goto Next;
        case OpCode::DivU_R3_R5_X2:
            r3 = reg_div_u16(r3, r5); code++; goto Next;
        case OpCode::DivU_R3_R6_X2:
            r3 = reg_div_u16(r3, r6); code++; goto Next;
        case OpCode::DivU_R3_R7_X2:
            r3 = reg_div_u16(r3, r7); code++; goto Next;
        case OpCode::DivU_R4_R0_X2:
            r4 = reg_div_u16(r4, r0); code++; goto Next;
        case OpCode::DivU_R4_R1_X2:
            r4 = reg_div_u16(r4, r1); code++; goto Next;
        case OpCode::DivU_R4_R2_X2:
            r4 = reg_div_u16(r4, r2); code++; goto Next;
        case OpCode::DivU_R4_R3_X2:
            r4 = reg_div_u16(r4, r3); code++; goto Next;
        case OpCode::DivU_R4_R4_X2:
            r4 = reg_div_u16(r4, r4); code++; goto Next;
        case OpCode::DivU_R4_R5_X2:
            r4 = reg_div_u16(r4, r5); code++; goto Next;
        case OpCode::DivU_R4_R6_X2:
            r4 = reg_div_u16(r4, r6); code++; goto Next;
        case OpCode::DivU_R4_R7_X2:
            r4 = reg_div_u16(r4, r7); code++; goto Next;
        case OpCode::DivU_R5_R0_X2:
            r5 = reg_div_u16(r5, r0); code++; goto Next;
        case OpCode::DivU_R5_R1_X2:
            r5 = reg_div_u16(r5, r1); code++; goto Next;
        case OpCode::DivU_R5_R2_X2:
            r5 = reg_div_u16(r5, r2); code++; goto Next;
        case OpCode::DivU_R5_R3_X2:
            r5 = reg_div_u16(r5, r3); code++; goto Next;
        case OpCode::DivU_R5_R4_X2:
            r5 = reg_div_u16(r5, r4); code++; goto Next;
        case OpCode::DivU_R5_R5_X2:
            r5 = reg_div_u16(r5, r5); code++; goto Next;
        case OpCode::DivU_R5_R6_X2:
            r5 = reg_div_u16(r5, r6); code++; goto Next;
        case OpCode::DivU_R5_R7_X2:
            r5 = reg_div_u16(r5, r7); code++; goto Next;
        case OpCode::DivU_R6_R0_X2:
            r6 = reg_div_u16(r6, r0); code++; goto Next;
        case OpCode::DivU_R6_R1_X2:
            r6 = reg_div_u16(r6, r1); code++; goto Next;
        case OpCode::DivU_R6_R2_X2:
            r6 = reg_div_u16(r6, r2); code++; goto Next;
        case OpCode::DivU_R6_R3_X2:
            r6 = reg_div_u16(r6, r3); code++; goto Next;
        case OpCode::DivU_R6_R4_X2:
            r6 = reg_div_u16(r6, r4); code++; goto Next;
        case OpCode::DivU_R6_R5_X2:
            r6 = reg_div_u16(r6, r5); code++; goto Next;
        case OpCode::DivU_R6_R6_X2:
            r6 = reg_div_u16(r6, r6); code++; goto Next;
        case OpCode::DivU_R6_R7_X2:
            r6 = reg_div_u16(r6, r7); code++; goto Next;
        case OpCode::DivU_R7_R0_X2:
            r7 = reg_div_u16(r7, r0); code++; goto Next;
        case OpCode::DivU_R7_R1_X2:
            r7 = reg_div_u16(r7, r1); code++; goto Next;
        case OpCode::DivU_R7_R2_X2:
            r7 = reg_div_u16(r7, r2); code++; goto Next;
        case OpCode::DivU_R7_R3_X2:
            r7 = reg_div_u16(r7, r3); code++; goto Next;
        case OpCode::DivU_R7_R4_X2:
            r7 = reg_div_u16(r7, r4); code++; goto Next;
        case OpCode::DivU_R7_R5_X2:
            r7 = reg_div_u16(r7, r5); code++; goto Next;
        case OpCode::DivU_R7_R6_X2:
            r7 = reg_div_u16(r7, r6); code++; goto Next;
        case OpCode::DivU_R7_R7_X2:
            r7 = reg_div_u16(r7, r7); code++; goto Next;

        case OpCode::AddU_R0_R0_X4:
            r0 = reg_add_u32(r0, r0); code++; goto Next;
        case OpCode::AddU_R0_R1_X4:
            r0 = reg_add_u32(r0, r1); code++; goto Next;
        case OpCode::AddU_R0_R2_X4:
            r0 = reg_add_u32(r0, r2); code++; goto Next;
        case OpCode::AddU_R0_R3_X4:
            r0 = reg_add_u32(r0, r3); code++; goto Next;
        case OpCode::AddU_R0_R4_X4:
            r0 = reg_add_u32(r0, r4); code++; goto Next;
        case OpCode::AddU_R0_R5_X4:
            r0 = reg_add_u32(r0, r5); code++; goto Next;
        case OpCode::AddU_R0_R6_X4:
            r0 = reg_add_u32(r0, r6); code++; goto Next;
        case OpCode::AddU_R0_R7_X4:
            r0 = reg_add_u32(r0, r7); code++; goto Next;
        case OpCode::AddU_R1_R0_X4:
            r1 = reg_add_u32(r1, r0); code++; goto Next;
        case OpCode::AddU_R1_R1_X4:
            r1 = reg_add_u32(r1, r1); code++; goto Next;
        case OpCode::AddU_R1_R2_X4:
            r1 = reg_add_u32(r1, r2); code++; goto Next;
        case OpCode::AddU_R1_R3_X4:
            r1 = reg_add_u32(r1, r3); code++; goto Next;
        case OpCode::AddU_R1_R4_X4:
            r1 = reg_add_u32(r1, r4); code++; goto Next;
        case OpCode::AddU_R1_R5_X4:
            r1 = reg_add_u32(r1, r5); code++; goto Next;
        case OpCode::AddU_R1_R6_X4:
            r1 = reg_add_u32(r1, r6); code++; goto Next;
        case OpCode::AddU_R1_R7_X4:
            r1 = reg_add_u32(r1, r7); code++; goto Next;
        case OpCode::AddU_R2_R0_X4:
            r2 = reg_add_u32(r2, r0); code++; goto Next;
        case OpCode::AddU_R2_R1_X4:
            r2 = reg_add_u32(r2, r1); code++; goto Next;
        case OpCode::AddU_R2_R2_X4:
            r2 = reg_add_u32(r2, r2); code++; goto Next;
        case OpCode::AddU_R2_R3_X4:
            r2 = reg_add_u32(r2, r3); code++; goto Next;
        case OpCode::AddU_R2_R4_X4:
            r2 = reg_add_u32(r2, r4); code++; goto Next;
        case OpCode::AddU_R2_R5_X4:
            r2 = reg_add_u32(r2, r5); code++; goto Next;
        case OpCode::AddU_R2_R6_X4:
            r2 = reg_add_u32(r2, r6); code++; goto Next;
        case OpCode::AddU_R2_R7_X4:
            r2 = reg_add_u32(r2, r7); code++; goto Next;
        case OpCode::AddU_R3_R0_X4:
            r3 = reg_add_u32(r3, r0); code++; goto Next;
        case OpCode::AddU_R3_R1_X4:
            r3 = reg_add_u32(r3, r1); code++; goto Next;
        case OpCode::AddU_R3_R2_X4:
            r3 = reg_add_u32(r3, r2); code++; goto Next;
        case OpCode::AddU_R3_R3_X4:
            r3 = reg_add_u32(r3, r3); code++; goto Next;
        case OpCode::AddU_R3_R4_X4:
            r3 = reg_add_u32(r3, r4); code++; goto Next;
        case OpCode::AddU_R3_R5_X4:
            r3 = reg_add_u32(r3, r5); code++; goto Next;
        case OpCode::AddU_R3_R6_X4:
            r3 = reg_add_u32(r3, r6); code++; goto Next;
        case OpCode::AddU_R3_R7_X4:
            r3 = reg_add_u32(r3, r7); code++; goto Next;
        case OpCode::AddU_R4_R0_X4:
            r4 = reg_add_u32(r4, r0); code++; goto Next;
        case OpCode::AddU_R4_R1_X4:
            r4 = reg_add_u32(r4, r1); code++; goto Next;
        case OpCode::AddU_R4_R2_X4:
            r4 = reg_add_u32(r4, r2); code++; goto Next;
        case OpCode::AddU_R4_R3_X4:
            r4 = reg_add_u32(r4, r3); code++; goto Next;
        case OpCode::AddU_R4_R4_X4:
            r4 = reg_add_u32(r4, r4); code++; goto Next;
        case OpCode::AddU_R4_R5_X4:
            r4 = reg_add_u32(r4, r5); code++; goto Next;
        case OpCode::AddU_R4_R6_X4:
            r4 = reg_add_u32(r4, r6); code++; goto Next;
        case OpCode::AddU_R4_R7_X4:
            r4 = reg_add_u32(r4, r7); code++; goto Next;
        case OpCode::AddU_R5_R0_X4:
            r5 = reg_add_u32(r5, r0); code++; goto Next;
        case OpCode::AddU_R5_R1_X4:
            r5 = reg_add_u32(r5, r1); code++; goto Next;
        case OpCode::AddU_R5_R2_X4:
            r5 = reg_add_u32(r5, r2); code++; goto Next;
        case OpCode::AddU_R5_R3_X4:
            r5 = reg_add_u32(r5, r3); code++; goto Next;
        case OpCode::AddU_R5_R4_X4:
            r5 = reg_add_u32(r5, r4); code++; goto Next;
        case OpCode::AddU_R5_R5_X4:
            r5 = reg_add_u32(r5, r5); code++; goto Next;
        case OpCode::AddU_R5_R6_X4:
            r5 = reg_add_u32(r5, r6); code++; goto Next;
        case OpCode::AddU_R5_R7_X4:
            r5 = reg_add_u32(r5, r7); code++; goto Next;
        case OpCode::AddU_R6_R0_X4:
            r6 = reg_add_u32(r6, r0); code++; goto Next;
        case OpCode::AddU_R6_R1_X4:
            r6 = reg_add_u32(r6, r1); code++; goto Next;
        case OpCode::AddU_R6_R2_X4:
            r6 = reg_add_u32(r6, r2); code++; goto Next;
        case OpCode::AddU_R6_R3_X4:
            r6 = reg_add_u32(r6, r3); code++; goto Next;
        case OpCode::AddU_R6_R4_X4:
            r6 = reg_add_u32(r6, r4); code++; goto Next;
        case OpCode::AddU_R6_R5_X4:
            r6 = reg_add_u32(r6, r5); code++; goto Next;
        case OpCode::AddU_R6_R6_X4:
            r6 = reg_add_u32(r6, r6); code++; goto Next;
        case OpCode::AddU_R6_R7_X4:
            r6 = reg_add_u32(r6, r7); code++; goto Next;
        case OpCode::AddU_R7_R0_X4:
            r7 = reg_add_u32(r7, r0); code++; goto Next;
        case OpCode::AddU_R7_R1_X4:
            r7 = reg_add_u32(r7, r1); code++; goto Next;
        case OpCode::AddU_R7_R2_X4:
            r7 = reg_add_u32(r7, r2); code++; goto Next;
        case OpCode::AddU_R7_R3_X4:
            r7 = reg_add_u32(r7, r3); code++; goto Next;
        case OpCode::AddU_R7_R4_X4:
            r7 = reg_add_u32(r7, r4); code++; goto Next;
        case OpCode::AddU_R7_R5_X4:
            r7 = reg_add_u32(r7, r5); code++; goto Next;
        case OpCode::AddU_R7_R6_X4:
            r7 = reg_add_u32(r7, r6); code++; goto Next;
        case OpCode::AddU_R7_R7_X4:
            r7 = reg_add_u32(r7, r7); code++; goto Next;

        case OpCode::SubU_R0_R0_X4:
            r0 = reg_sub_u32(r0, r0); code++; goto Next;
        case OpCode::SubU_R0_R1_X4:
            r0 = reg_sub_u32(r0, r1); code++; goto Next;
        case OpCode::SubU_R0_R2_X4:
            r0 = reg_sub_u32(r0, r2); code++; goto Next;
        case OpCode::SubU_R0_R3_X4:
            r0 = reg_sub_u32(r0, r3); code++; goto Next;
        case OpCode::SubU_R0_R4_X4:
            r0 = reg_sub_u32(r0, r4); code++; goto Next;
        case OpCode::SubU_R0_R5_X4:
            r0 = reg_sub_u32(r0, r5); code++; goto Next;
        case OpCode::SubU_R0_R6_X4:
            r0 = reg_sub_u32(r0, r6); code++; goto Next;
        case OpCode::SubU_R0_R7_X4:
            r0 = reg_sub_u32(r0, r7); code++; goto Next;
        case OpCode::SubU_R1_R0_X4:
            r1 = reg_sub_u32(r1, r0); code++; goto Next;
        case OpCode::SubU_R1_R1_X4:
            r1 = reg_sub_u32(r1, r1); code++; goto Next;
        case OpCode::SubU_R1_R2_X4:
            r1 = reg_sub_u32(r1, r2); code++; goto Next;
        case OpCode::SubU_R1_R3_X4:
            r1 = reg_sub_u32(r1, r3); code++; goto Next;
        case OpCode::SubU_R1_R4_X4:
            r1 = reg_sub_u32(r1, r4); code++; goto Next;
        case OpCode::SubU_R1_R5_X4:
            r1 = reg_sub_u32(r1, r5); code++; goto Next;
        case OpCode::SubU_R1_R6_X4:
            r1 = reg_sub_u32(r1, r6); code++; goto Next;
        case OpCode::SubU_R1_R7_X4:
            r1 = reg_sub_u32(r1, r7); code++; goto Next;
        case OpCode::SubU_R2_R0_X4:
            r2 = reg_sub_u32(r2, r0); code++; goto Next;
        case OpCode::SubU_R2_R1_X4:
            r2 = reg_sub_u32(r2, r1); code++; goto Next;
        case OpCode::SubU_R2_R2_X4:
            r2 = reg_sub_u32(r2, r2); code++; goto Next;
        case OpCode::SubU_R2_R3_X4:
            r2 = reg_sub_u32(r2, r3); code++; goto Next;
        case OpCode::SubU_R2_R4_X4:
            r2 = reg_sub_u32(r2, r4); code++; goto Next;
        case OpCode::SubU_R2_R5_X4:
            r2 = reg_sub_u32(r2, r5); code++; goto Next;
        case OpCode::SubU_R2_R6_X4:
            r2 = reg_sub_u32(r2, r6); code++; goto Next;
        case OpCode::SubU_R2_R7_X4:
            r2 = reg_sub_u32(r2, r7); code++; goto Next;
        case OpCode::SubU_R3_R0_X4:
            r3 = reg_sub_u32(r3, r0); code++; goto Next;
        case OpCode::SubU_R3_R1_X4:
            r3 = reg_sub_u32(r3, r1); code++; goto Next;
        case OpCode::SubU_R3_R2_X4:
            r3 = reg_sub_u32(r3, r2); code++; goto Next;
        case OpCode::SubU_R3_R3_X4:
            r3 = reg_sub_u32(r3, r3); code++; goto Next;
        case OpCode::SubU_R3_R4_X4:
            r3 = reg_sub_u32(r3, r4); code++; goto Next;
        case OpCode::SubU_R3_R5_X4:
            r3 = reg_sub_u32(r3, r5); code++; goto Next;
        case OpCode::SubU_R3_R6_X4:
            r3 = reg_sub_u32(r3, r6); code++; goto Next;
        case OpCode::SubU_R3_R7_X4:
            r3 = reg_sub_u32(r3, r7); code++; goto Next;
        case OpCode::SubU_R4_R0_X4:
            r4 = reg_sub_u32(r4, r0); code++; goto Next;
        case OpCode::SubU_R4_R1_X4:
            r4 = reg_sub_u32(r4, r1); code++; goto Next;
        case OpCode::SubU_R4_R2_X4:
            r4 = reg_sub_u32(r4, r2); code++; goto Next;
        case OpCode::SubU_R4_R3_X4:
            r4 = reg_sub_u32(r4, r3); code++; goto Next;
        case OpCode::SubU_R4_R4_X4:
            r4 = reg_sub_u32(r4, r4); code++; goto Next;
        case OpCode::SubU_R4_R5_X4:
            r4 = reg_sub_u32(r4, r5); code++; goto Next;
        case OpCode::SubU_R4_R6_X4:
            r4 = reg_sub_u32(r4, r6); code++; goto Next;
        case OpCode::SubU_R4_R7_X4:
            r4 = reg_sub_u32(r4, r7); code++; goto Next;
        case OpCode::SubU_R5_R0_X4:
            r5 = reg_sub_u32(r5, r0); code++; goto Next;
        case OpCode::SubU_R5_R1_X4:
            r5 = reg_sub_u32(r5, r1); code++; goto Next;
        case OpCode::SubU_R5_R2_X4:
            r5 = reg_sub_u32(r5, r2); code++; goto Next;
        case OpCode::SubU_R5_R3_X4:
            r5 = reg_sub_u32(r5, r3); code++; goto Next;
        case OpCode::SubU_R5_R4_X4:
            r5 = reg_sub_u32(r5, r4); code++; goto Next;
        case OpCode::SubU_R5_R5_X4:
            r5 = reg_sub_u32(r5, r5); code++; goto Next;
        case OpCode::SubU_R5_R6_X4:
            r5 = reg_sub_u32(r5, r6); code++; goto Next;
        case OpCode::SubU_R5_R7_X4:
            r5 = reg_sub_u32(r5, r7); code++; goto Next;
        case OpCode::SubU_R6_R0_X4:
            r6 = reg_sub_u32(r6, r0); code++; goto Next;
        case OpCode::SubU_R6_R1_X4:
            r6 = reg_sub_u32(r6, r1); code++; goto Next;
        case OpCode::SubU_R6_R2_X4:
            r6 = reg_sub_u32(r6, r2); code++; goto Next;
        case OpCode::SubU_R6_R3_X4:
            r6 = reg_sub_u32(r6, r3); code++; goto Next;
        case OpCode::SubU_R6_R4_X4:
            r6 = reg_sub_u32(r6, r4); code++; goto Next;
        case OpCode::SubU_R6_R5_X4:
            r6 = reg_sub_u32(r6, r5); code++; goto Next;
        case OpCode::SubU_R6_R6_X4:
            r6 = reg_sub_u32(r6, r6); code++; goto Next;
        case OpCode::SubU_R6_R7_X4:
            r6 = reg_sub_u32(r6, r7); code++; goto Next;
        case OpCode::SubU_R7_R0_X4:
            r7 = reg_sub_u32(r7, r0); code++; goto Next;
        case OpCode::SubU_R7_R1_X4:
            r7 = reg_sub_u32(r7, r1); code++; goto Next;
        case OpCode::SubU_R7_R2_X4:
            r7 = reg_sub_u32(r7, r2); code++; goto Next;
        case OpCode::SubU_R7_R3_X4:
            r7 = reg_sub_u32(r7, r3); code++; goto Next;
        case OpCode::SubU_R7_R4_X4:
            r7 = reg_sub_u32(r7, r4); code++; goto Next;
        case OpCode::SubU_R7_R5_X4:
            r7 = reg_sub_u32(r7, r5); code++; goto Next;
        case OpCode::SubU_R7_R6_X4:
            r7 = reg_sub_u32(r7, r6); code++; goto Next;
        case OpCode::SubU_R7_R7_X4:
            r7 = reg_sub_u32(r7, r7); code++; goto Next;

        case OpCode::MulU_R0_R0_X4:
            r0 = reg_mul_u32(r0, r0); code++; goto Next;
        case OpCode::MulU_R0_R1_X4:
            r0 = reg_mul_u32(r0, r1); code++; goto Next;
        case OpCode::MulU_R0_R2_X4:
            r0 = reg_mul_u32(r0, r2); code++; goto Next;
        case OpCode::MulU_R0_R3_X4:
            r0 = reg_mul_u32(r0, r3); code++; goto Next;
        case OpCode::MulU_R0_R4_X4:
            r0 = reg_mul_u32(r0, r4); code++; goto Next;
        case OpCode::MulU_R0_R5_X4:
            r0 = reg_mul_u32(r0, r5); code++; goto Next;
        case OpCode::MulU_R0_R6_X4:
            r0 = reg_mul_u32(r0, r6); code++; goto Next;
        case OpCode::MulU_R0_R7_X4:
            r0 = reg_mul_u32(r0, r7); code++; goto Next;
        case OpCode::MulU_R1_R0_X4:
            r1 = reg_mul_u32(r1, r0); code++; goto Next;
        case OpCode::MulU_R1_R1_X4:
            r1 = reg_mul_u32(r1, r1); code++; goto Next;
        case OpCode::MulU_R1_R2_X4:
            r1 = reg_mul_u32(r1, r2); code++; goto Next;
        case OpCode::MulU_R1_R3_X4:
            r1 = reg_mul_u32(r1, r3); code++; goto Next;
        case OpCode::MulU_R1_R4_X4:
            r1 = reg_mul_u32(r1, r4); code++; goto Next;
        case OpCode::MulU_R1_R5_X4:
            r1 = reg_mul_u32(r1, r5); code++; goto Next;
        case OpCode::MulU_R1_R6_X4:
            r1 = reg_mul_u32(r1, r6); code++; goto Next;
        case OpCode::MulU_R1_R7_X4:
            r1 = reg_mul_u32(r1, r7); code++; goto Next;
        case OpCode::MulU_R2_R0_X4:
            r2 = reg_mul_u32(r2, r0); code++; goto Next;
        case OpCode::MulU_R2_R1_X4:
            r2 = reg_mul_u32(r2, r1); code++; goto Next;
        case OpCode::MulU_R2_R2_X4:
            r2 = reg_mul_u32(r2, r2); code++; goto Next;
        case OpCode::MulU_R2_R3_X4:
            r2 = reg_mul_u32(r2, r3); code++; goto Next;
        case OpCode::MulU_R2_R4_X4:
            r2 = reg_mul_u32(r2, r4); code++; goto Next;
        case OpCode::MulU_R2_R5_X4:
            r2 = reg_mul_u32(r2, r5); code++; goto Next;
        case OpCode::MulU_R2_R6_X4:
            r2 = reg_mul_u32(r2, r6); code++; goto Next;
        case OpCode::MulU_R2_R7_X4:
            r2 = reg_mul_u32(r2, r7); code++; goto Next;
        case OpCode::MulU_R3_R0_X4:
            r3 = reg_mul_u32(r3, r0); code++; goto Next;
        case OpCode::MulU_R3_R1_X4:
            r3 = reg_mul_u32(r3, r1); code++; goto Next;
        case OpCode::MulU_R3_R2_X4:
            r3 = reg_mul_u32(r3, r2); code++; goto Next;
        case OpCode::MulU_R3_R3_X4:
            r3 = reg_mul_u32(r3, r3); code++; goto Next;
        case OpCode::MulU_R3_R4_X4:
            r3 = reg_mul_u32(r3, r4); code++; goto Next;
        case OpCode::MulU_R3_R5_X4:
            r3 = reg_mul_u32(r3, r5); code++; goto Next;
        case OpCode::MulU_R3_R6_X4:
            r3 = reg_mul_u32(r3, r6); code++; goto Next;
        case OpCode::MulU_R3_R7_X4:
            r3 = reg_mul_u32(r3, r7); code++; goto Next;
        case OpCode::MulU_R4_R0_X4:
            r4 = reg_mul_u32(r4, r0); code++; goto Next;
        case OpCode::MulU_R4_R1_X4:
            r4 = reg_mul_u32(r4, r1); code++; goto Next;
        case OpCode::MulU_R4_R2_X4:
            r4 = reg_mul_u32(r4, r2); code++; goto Next;
        case OpCode::MulU_R4_R3_X4:
            r4 = reg_mul_u32(r4, r3); code++; goto Next;
        case OpCode::MulU_R4_R4_X4:
            r4 = reg_mul_u32(r4, r4); code++; goto Next;
        case OpCode::MulU_R4_R5_X4:
            r4 = reg_mul_u32(r4, r5); code++; goto Next;
        case OpCode::MulU_R4_R6_X4:
            r4 = reg_mul_u32(r4, r6); code++; goto Next;
        case OpCode::MulU_R4_R7_X4:
            r4 = reg_mul_u32(r4, r7); code++; goto Next;
        case OpCode::MulU_R5_R0_X4:
            r5 = reg_mul_u32(r5, r0); code++; goto Next;
        case OpCode::MulU_R5_R1_X4:
            r5 = reg_mul_u32(r5, r1); code++; goto Next;
        case OpCode::MulU_R5_R2_X4:
            r5 = reg_mul_u32(r5, r2); code++; goto Next;
        case OpCode::MulU_R5_R3_X4:
            r5 = reg_mul_u32(r5, r3); code++; goto Next;
        case OpCode::MulU_R5_R4_X4:
            r5 = reg_mul_u32(r5, r4); code++; goto Next;
        case OpCode::MulU_R5_R5_X4:
            r5 = reg_mul_u32(r5, r5); code++; goto Next;
        case OpCode::MulU_R5_R6_X4:
            r5 = reg_mul_u32(r5, r6); code++; goto Next;
        case OpCode::MulU_R5_R7_X4:
            r5 = reg_mul_u32(r5, r7); code++; goto Next;
        case OpCode::MulU_R6_R0_X4:
            r6 = reg_mul_u32(r6, r0); code++; goto Next;
        case OpCode::MulU_R6_R1_X4:
            r6 = reg_mul_u32(r6, r1); code++; goto Next;
        case OpCode::MulU_R6_R2_X4:
            r6 = reg_mul_u32(r6, r2); code++; goto Next;
        case OpCode::MulU_R6_R3_X4:
            r6 = reg_mul_u32(r6, r3); code++; goto Next;
        case OpCode::MulU_R6_R4_X4:
            r6 = reg_mul_u32(r6, r4); code++; goto Next;
        case OpCode::MulU_R6_R5_X4:
            r6 = reg_mul_u32(r6, r5); code++; goto Next;
        case OpCode::MulU_R6_R6_X4:
            r6 = reg_mul_u32(r6, r6); code++; goto Next;
        case OpCode::MulU_R6_R7_X4:
            r6 = reg_mul_u32(r6, r7); code++; goto Next;
        case OpCode::MulU_R7_R0_X4:
            r7 = reg_mul_u32(r7, r0); code++; goto Next;
        case OpCode::MulU_R7_R1_X4:
            r7 = reg_mul_u32(r7, r1); code++; goto Next;
        case OpCode::MulU_R7_R2_X4:
            r7 = reg_mul_u32(r7, r2); code++; goto Next;
        case OpCode::MulU_R7_R3_X4:
            r7 = reg_mul_u32(r7, r3); code++; goto Next;
        case OpCode::MulU_R7_R4_X4:
            r7 = reg_mul_u32(r7, r4); code++; goto Next;
        case OpCode::MulU_R7_R5_X4:
            r7 = reg_mul_u32(r7, r5); code++; goto Next;
        case OpCode::MulU_R7_R6_X4:
            r7 = reg_mul_u32(r7, r6); code++; goto Next;
        case OpCode::MulU_R7_R7_X4:
            r7 = reg_mul_u32(r7, r7); code++; goto Next;

        case OpCode::DivU_R0_R0_X4:
            r0 = reg_div_u32(r0, r0); code++; goto Next;
        case OpCode::DivU_R0_R1_X4:
            r0 = reg_div_u32(r0, r1); code++; goto Next;
        case OpCode::DivU_R0_R2_X4:
            r0 = reg_div_u32(r0, r2); code++; goto Next;
        case OpCode::DivU_R0_R3_X4:
            r0 = reg_div_u32(r0, r3); code++; goto Next;
        case OpCode::DivU_R0_R4_X4:
            r0 = reg_div_u32(r0, r4); code++; goto Next;
        case OpCode::DivU_R0_R5_X4:
            r0 = reg_div_u32(r0, r5); code++; goto Next;
        case OpCode::DivU_R0_R6_X4:
            r0 = reg_div_u32(r0, r6); code++; goto Next;
        case OpCode::DivU_R0_R7_X4:
            r0 = reg_div_u32(r0, r7); code++; goto Next;
        case OpCode::DivU_R1_R0_X4:
            r1 = reg_div_u32(r1, r0); code++; goto Next;
        case OpCode::DivU_R1_R1_X4:
            r1 = reg_div_u32(r1, r1); code++; goto Next;
        case OpCode::DivU_R1_R2_X4:
            r1 = reg_div_u32(r1, r2); code++; goto Next;
        case OpCode::DivU_R1_R3_X4:
            r1 = reg_div_u32(r1, r3); code++; goto Next;
        case OpCode::DivU_R1_R4_X4:
            r1 = reg_div_u32(r1, r4); code++; goto Next;
        case OpCode::DivU_R1_R5_X4:
            r1 = reg_div_u32(r1, r5); code++; goto Next;
        case OpCode::DivU_R1_R6_X4:
            r1 = reg_div_u32(r1, r6); code++; goto Next;
        case OpCode::DivU_R1_R7_X4:
            r1 = reg_div_u32(r1, r7); code++; goto Next;
        case OpCode::DivU_R2_R0_X4:
            r2 = reg_div_u32(r2, r0); code++; goto Next;
        case OpCode::DivU_R2_R1_X4:
            r2 = reg_div_u32(r2, r1); code++; goto Next;
        case OpCode::DivU_R2_R2_X4:
            r2 = reg_div_u32(r2, r2); code++; goto Next;
        case OpCode::DivU_R2_R3_X4:
            r2 = reg_div_u32(r2, r3); code++; goto Next;
        case OpCode::DivU_R2_R4_X4:
            r2 = reg_div_u32(r2, r4); code++; goto Next;
        case OpCode::DivU_R2_R5_X4:
            r2 = reg_div_u32(r2, r5); code++; goto Next;
        case OpCode::DivU_R2_R6_X4:
            r2 = reg_div_u32(r2, r6); code++; goto Next;
        case OpCode::DivU_R2_R7_X4:
            r2 = reg_div_u32(r2, r7); code++; goto Next;
        case OpCode::DivU_R3_R0_X4:
            r3 = reg_div_u32(r3, r0); code++; goto Next;
        case OpCode::DivU_R3_R1_X4:
            r3 = reg_div_u32(r3, r1); code++; goto Next;
        case OpCode::DivU_R3_R2_X4:
            r3 = reg_div_u32(r3, r2); code++; goto Next;
        case OpCode::DivU_R3_R3_X4:
            r3 = reg_div_u32(r3, r3); code++; goto Next;
        case OpCode::DivU_R3_R4_X4:
            r3 = reg_div_u32(r3, r4); code++; goto Next;
        case OpCode::DivU_R3_R5_X4:
            r3 = reg_div_u32(r3, r5); code++; goto Next;
        case OpCode::DivU_R3_R6_X4:
            r3 = reg_div_u32(r3, r6); code++; goto Next;
        case OpCode::DivU_R3_R7_X4:
            r3 = reg_div_u32(r3, r7); code++; goto Next;
        case OpCode::DivU_R4_R0_X4:
            r4 = reg_div_u32(r4, r0); code++; goto Next;
        case OpCode::DivU_R4_R1_X4:
            r4 = reg_div_u32(r4, r1); code++; goto Next;
        case OpCode::DivU_R4_R2_X4:
            r4 = reg_div_u32(r4, r2); code++; goto Next;
        case OpCode::DivU_R4_R3_X4:
            r4 = reg_div_u32(r4, r3); code++; goto Next;
        case OpCode::DivU_R4_R4_X4:
            r4 = reg_div_u32(r4, r4); code++; goto Next;
        case OpCode::DivU_R4_R5_X4:
            r4 = reg_div_u32(r4, r5); code++; goto Next;
        case OpCode::DivU_R4_R6_X4:
            r4 = reg_div_u32(r4, r6); code++; goto Next;
        case OpCode::DivU_R4_R7_X4:
            r4 = reg_div_u32(r4, r7); code++; goto Next;
        case OpCode::DivU_R5_R0_X4:
            r5 = reg_div_u32(r5, r0); code++; goto Next;
        case OpCode::DivU_R5_R1_X4:
            r5 = reg_div_u32(r5, r1); code++; goto Next;
        case OpCode::DivU_R5_R2_X4:
            r5 = reg_div_u32(r5, r2); code++; goto Next;
        case OpCode::DivU_R5_R3_X4:
            r5 = reg_div_u32(r5, r3); code++; goto Next;
        case OpCode::DivU_R5_R4_X4:
            r5 = reg_div_u32(r5, r4); code++; goto Next;
        case OpCode::DivU_R5_R5_X4:
            r5 = reg_div_u32(r5, r5); code++; goto Next;
        case OpCode::DivU_R5_R6_X4:
            r5 = reg_div_u32(r5, r6); code++; goto Next;
        case OpCode::DivU_R5_R7_X4:
            r5 = reg_div_u32(r5, r7); code++; goto Next;
        case OpCode::DivU_R6_R0_X4:
            r6 = reg_div_u32(r6, r0); code++; goto Next;
        case OpCode::DivU_R6_R1_X4:
            r6 = reg_div_u32(r6, r1); code++; goto Next;
        case OpCode::DivU_R6_R2_X4:
            r6 = reg_div_u32(r6, r2); code++; goto Next;
        case OpCode::DivU_R6_R3_X4:
            r6 = reg_div_u32(r6, r3); code++; goto Next;
        case OpCode::DivU_R6_R4_X4:
            r6 = reg_div_u32(r6, r4); code++; goto Next;
        case OpCode::DivU_R6_R5_X4:
            r6 = reg_div_u32(r6, r5); code++; goto Next;
        case OpCode::DivU_R6_R6_X4:
            r6 = reg_div_u32(r6, r6); code++; goto Next;
        case OpCode::DivU_R6_R7_X4:
            r6 = reg_div_u32(r6, r7); code++; goto Next;
        case OpCode::DivU_R7_R0_X4:
            r7 = reg_div_u32(r7, r0); code++; goto Next;
        case OpCode::DivU_R7_R1_X4:
            r7 = reg_div_u32(r7, r1); code++; goto Next;
        case OpCode::DivU_R7_R2_X4:
            r7 = reg_div_u32(r7, r2); code++; goto Next;
        case OpCode::DivU_R7_R3_X4:
            r7 = reg_div_u32(r7, r3); code++; goto Next;
        case OpCode::DivU_R7_R4_X4:
            r7 = reg_div_u32(r7, r4); code++; goto Next;
        case OpCode::DivU_R7_R5_X4:
            r7 = reg_div_u32(r7, r5); code++; goto Next;
        case OpCode::DivU_R7_R6_X4:
            r7 = reg_div_u32(r7, r6); code++; goto Next;
        case OpCode::DivU_R7_R7_X4:
            r7 = reg_div_u32(r7, r7); code++; goto Next;

        case OpCode::AddU_R0_R0_X8:
            r0 = reg_add_u64(r0, r0); code++; goto Next;
        case OpCode::AddU_R0_R1_X8:
            r0 = reg_add_u64(r0, r1); code++; goto Next;
        case OpCode::AddU_R0_R2_X8:
            r0 = reg_add_u64(r0, r2); code++; goto Next;
        case OpCode::AddU_R0_R3_X8:
            r0 = reg_add_u64(r0, r3); code++; goto Next;
        case OpCode::AddU_R0_R4_X8:
            r0 = reg_add_u64(r0, r4); code++; goto Next;
        case OpCode::AddU_R0_R5_X8:
            r0 = reg_add_u64(r0, r5); code++; goto Next;
        case OpCode::AddU_R0_R6_X8:
            r0 = reg_add_u64(r0, r6); code++; goto Next;
        case OpCode::AddU_R0_R7_X8:
            r0 = reg_add_u64(r0, r7); code++; goto Next;
        case OpCode::AddU_R1_R0_X8:
            r1 = reg_add_u64(r1, r0); code++; goto Next;
        case OpCode::AddU_R1_R1_X8:
            r1 = reg_add_u64(r1, r1); code++; goto Next;
        case OpCode::AddU_R1_R2_X8:
            r1 = reg_add_u64(r1, r2); code++; goto Next;
        case OpCode::AddU_R1_R3_X8:
            r1 = reg_add_u64(r1, r3); code++; goto Next;
        case OpCode::AddU_R1_R4_X8:
            r1 = reg_add_u64(r1, r4); code++; goto Next;
        case OpCode::AddU_R1_R5_X8:
            r1 = reg_add_u64(r1, r5); code++; goto Next;
        case OpCode::AddU_R1_R6_X8:
            r1 = reg_add_u64(r1, r6); code++; goto Next;
        case OpCode::AddU_R1_R7_X8:
            r1 = reg_add_u64(r1, r7); code++; goto Next;
        case OpCode::AddU_R2_R0_X8:
            r2 = reg_add_u64(r2, r0); code++; goto Next;
        case OpCode::AddU_R2_R1_X8:
            r2 = reg_add_u64(r2, r1); code++; goto Next;
        case OpCode::AddU_R2_R2_X8:
            r2 = reg_add_u64(r2, r2); code++; goto Next;
        case OpCode::AddU_R2_R3_X8:
            r2 = reg_add_u64(r2, r3); code++; goto Next;
        case OpCode::AddU_R2_R4_X8:
            r2 = reg_add_u64(r2, r4); code++; goto Next;
        case OpCode::AddU_R2_R5_X8:
            r2 = reg_add_u64(r2, r5); code++; goto Next;
        case OpCode::AddU_R2_R6_X8:
            r2 = reg_add_u64(r2, r6); code++; goto Next;
        case OpCode::AddU_R2_R7_X8:
            r2 = reg_add_u64(r2, r7); code++; goto Next;
        case OpCode::AddU_R3_R0_X8:
            r3 = reg_add_u64(r3, r0); code++; goto Next;
        case OpCode::AddU_R3_R1_X8:
            r3 = reg_add_u64(r3, r1); code++; goto Next;
        case OpCode::AddU_R3_R2_X8:
            r3 = reg_add_u64(r3, r2); code++; goto Next;
        case OpCode::AddU_R3_R3_X8:
            r3 = reg_add_u64(r3, r3); code++; goto Next;
        case OpCode::AddU_R3_R4_X8:
            r3 = reg_add_u64(r3, r4); code++; goto Next;
        case OpCode::AddU_R3_R5_X8:
            r3 = reg_add_u64(r3, r5); code++; goto Next;
        case OpCode::AddU_R3_R6_X8:
            r3 = reg_add_u64(r3, r6); code++; goto Next;
        case OpCode::AddU_R3_R7_X8:
            r3 = reg_add_u64(r3, r7); code++; goto Next;
        case OpCode::AddU_R4_R0_X8:
            r4 = reg_add_u64(r4, r0); code++; goto Next;
        case OpCode::AddU_R4_R1_X8:
            r4 = reg_add_u64(r4, r1); code++; goto Next;
        case OpCode::AddU_R4_R2_X8:
            r4 = reg_add_u64(r4, r2); code++; goto Next;
        case OpCode::AddU_R4_R3_X8:
            r4 = reg_add_u64(r4, r3); code++; goto Next;
        case OpCode::AddU_R4_R4_X8:
            r4 = reg_add_u64(r4, r4); code++; goto Next;
        case OpCode::AddU_R4_R5_X8:
            r4 = reg_add_u64(r4, r5); code++; goto Next;
        case OpCode::AddU_R4_R6_X8:
            r4 = reg_add_u64(r4, r6); code++; goto Next;
        case OpCode::AddU_R4_R7_X8:
            r4 = reg_add_u64(r4, r7); code++; goto Next;
        case OpCode::AddU_R5_R0_X8:
            r5 = reg_add_u64(r5, r0); code++; goto Next;
        case OpCode::AddU_R5_R1_X8:
            r5 = reg_add_u64(r5, r1); code++; goto Next;
        case OpCode::AddU_R5_R2_X8:
            r5 = reg_add_u64(r5, r2); code++; goto Next;
        case OpCode::AddU_R5_R3_X8:
            r5 = reg_add_u64(r5, r3); code++; goto Next;
        case OpCode::AddU_R5_R4_X8:
            r5 = reg_add_u64(r5, r4); code++; goto Next;
        case OpCode::AddU_R5_R5_X8:
            r5 = reg_add_u64(r5, r5); code++; goto Next;
        case OpCode::AddU_R5_R6_X8:
            r5 = reg_add_u64(r5, r6); code++; goto Next;
        case OpCode::AddU_R5_R7_X8:
            r5 = reg_add_u64(r5, r7); code++; goto Next;
        case OpCode::AddU_R6_R0_X8:
            r6 = reg_add_u64(r6, r0); code++; goto Next;
        case OpCode::AddU_R6_R1_X8:
            r6 = reg_add_u64(r6, r1); code++; goto Next;
        case OpCode::AddU_R6_R2_X8:
            r6 = reg_add_u64(r6, r2); code++; goto Next;
        case OpCode::AddU_R6_R3_X8:
            r6 = reg_add_u64(r6, r3); code++; goto Next;
        case OpCode::AddU_R6_R4_X8:
            r6 = reg_add_u64(r6, r4); code++; goto Next;
        case OpCode::AddU_R6_R5_X8:
            r6 = reg_add_u64(r6, r5); code++; goto Next;
        case OpCode::AddU_R6_R6_X8:
            r6 = reg_add_u64(r6, r6); code++; goto Next;
        case OpCode::AddU_R6_R7_X8:
            r6 = reg_add_u64(r6, r7); code++; goto Next;
        case OpCode::AddU_R7_R0_X8:
            r7 = reg_add_u64(r7, r0); code++; goto Next;
        case OpCode::AddU_R7_R1_X8:
            r7 = reg_add_u64(r7, r1); code++; goto Next;
        case OpCode::AddU_R7_R2_X8:
            r7 = reg_add_u64(r7, r2); code++; goto Next;
        case OpCode::AddU_R7_R3_X8:
            r7 = reg_add_u64(r7, r3); code++; goto Next;
        case OpCode::AddU_R7_R4_X8:
            r7 = reg_add_u64(r7, r4); code++; goto Next;
        case OpCode::AddU_R7_R5_X8:
            r7 = reg_add_u64(r7, r5); code++; goto Next;
        case OpCode::AddU_R7_R6_X8:
            r7 = reg_add_u64(r7, r6); code++; goto Next;
        case OpCode::AddU_R7_R7_X8:
            r7 = reg_add_u64(r7, r7); code++; goto Next;

        case OpCode::SubU_R0_R0_X8:
            r0 = reg_sub_u64(r0, r0); code++; goto Next;
        case OpCode::SubU_R0_R1_X8:
            r0 = reg_sub_u64(r0, r1); code++; goto Next;
        case OpCode::SubU_R0_R2_X8:
            r0 = reg_sub_u64(r0, r2); code++; goto Next;
        case OpCode::SubU_R0_R3_X8:
            r0 = reg_sub_u64(r0, r3); code++; goto Next;
        case OpCode::SubU_R0_R4_X8:
            r0 = reg_sub_u64(r0, r4); code++; goto Next;
        case OpCode::SubU_R0_R5_X8:
            r0 = reg_sub_u64(r0, r5); code++; goto Next;
        case OpCode::SubU_R0_R6_X8:
            r0 = reg_sub_u64(r0, r6); code++; goto Next;
        case OpCode::SubU_R0_R7_X8:
            r0 = reg_sub_u64(r0, r7); code++; goto Next;
        case OpCode::SubU_R1_R0_X8:
            r1 = reg_sub_u64(r1, r0); code++; goto Next;
        case OpCode::SubU_R1_R1_X8:
            r1 = reg_sub_u64(r1, r1); code++; goto Next;
        case OpCode::SubU_R1_R2_X8:
            r1 = reg_sub_u64(r1, r2); code++; goto Next;
        case OpCode::SubU_R1_R3_X8:
            r1 = reg_sub_u64(r1, r3); code++; goto Next;
        case OpCode::SubU_R1_R4_X8:
            r1 = reg_sub_u64(r1, r4); code++; goto Next;
        case OpCode::SubU_R1_R5_X8:
            r1 = reg_sub_u64(r1, r5); code++; goto Next;
        case OpCode::SubU_R1_R6_X8:
            r1 = reg_sub_u64(r1, r6); code++; goto Next;
        case OpCode::SubU_R1_R7_X8:
            r1 = reg_sub_u64(r1, r7); code++; goto Next;
        case OpCode::SubU_R2_R0_X8:
            r2 = reg_sub_u64(r2, r0); code++; goto Next;
        case OpCode::SubU_R2_R1_X8:
            r2 = reg_sub_u64(r2, r1); code++; goto Next;
        case OpCode::SubU_R2_R2_X8:
            r2 = reg_sub_u64(r2, r2); code++; goto Next;
        case OpCode::SubU_R2_R3_X8:
            r2 = reg_sub_u64(r2, r3); code++; goto Next;
        case OpCode::SubU_R2_R4_X8:
            r2 = reg_sub_u64(r2, r4); code++; goto Next;
        case OpCode::SubU_R2_R5_X8:
            r2 = reg_sub_u64(r2, r5); code++; goto Next;
        case OpCode::SubU_R2_R6_X8:
            r2 = reg_sub_u64(r2, r6); code++; goto Next;
        case OpCode::SubU_R2_R7_X8:
            r2 = reg_sub_u64(r2, r7); code++; goto Next;
        case OpCode::SubU_R3_R0_X8:
            r3 = reg_sub_u64(r3, r0); code++; goto Next;
        case OpCode::SubU_R3_R1_X8:
            r3 = reg_sub_u64(r3, r1); code++; goto Next;
        case OpCode::SubU_R3_R2_X8:
            r3 = reg_sub_u64(r3, r2); code++; goto Next;
        case OpCode::SubU_R3_R3_X8:
            r3 = reg_sub_u64(r3, r3); code++; goto Next;
        case OpCode::SubU_R3_R4_X8:
            r3 = reg_sub_u64(r3, r4); code++; goto Next;
        case OpCode::SubU_R3_R5_X8:
            r3 = reg_sub_u64(r3, r5); code++; goto Next;
        case OpCode::SubU_R3_R6_X8:
            r3 = reg_sub_u64(r3, r6); code++; goto Next;
        case OpCode::SubU_R3_R7_X8:
            r3 = reg_sub_u64(r3, r7); code++; goto Next;
        case OpCode::SubU_R4_R0_X8:
            r4 = reg_sub_u64(r4, r0); code++; goto Next;
        case OpCode::SubU_R4_R1_X8:
            r4 = reg_sub_u64(r4, r1); code++; goto Next;
        case OpCode::SubU_R4_R2_X8:
            r4 = reg_sub_u64(r4, r2); code++; goto Next;
        case OpCode::SubU_R4_R3_X8:
            r4 = reg_sub_u64(r4, r3); code++; goto Next;
        case OpCode::SubU_R4_R4_X8:
            r4 = reg_sub_u64(r4, r4); code++; goto Next;
        case OpCode::SubU_R4_R5_X8:
            r4 = reg_sub_u64(r4, r5); code++; goto Next;
        case OpCode::SubU_R4_R6_X8:
            r4 = reg_sub_u64(r4, r6); code++; goto Next;
        case OpCode::SubU_R4_R7_X8:
            r4 = reg_sub_u64(r4, r7); code++; goto Next;
        case OpCode::SubU_R5_R0_X8:
            r5 = reg_sub_u64(r5, r0); code++; goto Next;
        case OpCode::SubU_R5_R1_X8:
            r5 = reg_sub_u64(r5, r1); code++; goto Next;
        case OpCode::SubU_R5_R2_X8:
            r5 = reg_sub_u64(r5, r2); code++; goto Next;
        case OpCode::SubU_R5_R3_X8:
            r5 = reg_sub_u64(r5, r3); code++; goto Next;
        case OpCode::SubU_R5_R4_X8:
            r5 = reg_sub_u64(r5, r4); code++; goto Next;
        case OpCode::SubU_R5_R5_X8:
            r5 = reg_sub_u64(r5, r5); code++; goto Next;
        case OpCode::SubU_R5_R6_X8:
            r5 = reg_sub_u64(r5, r6); code++; goto Next;
        case OpCode::SubU_R5_R7_X8:
            r5 = reg_sub_u64(r5, r7); code++; goto Next;
        case OpCode::SubU_R6_R0_X8:
            r6 = reg_sub_u64(r6, r0); code++; goto Next;
        case OpCode::SubU_R6_R1_X8:
            r6 = reg_sub_u64(r6, r1); code++; goto Next;
        case OpCode::SubU_R6_R2_X8:
            r6 = reg_sub_u64(r6, r2); code++; goto Next;
        case OpCode::SubU_R6_R3_X8:
            r6 = reg_sub_u64(r6, r3); code++; goto Next;
        case OpCode::SubU_R6_R4_X8:
            r6 = reg_sub_u64(r6, r4); code++; goto Next;
        case OpCode::SubU_R6_R5_X8:
            r6 = reg_sub_u64(r6, r5); code++; goto Next;
        case OpCode::SubU_R6_R6_X8:
            r6 = reg_sub_u64(r6, r6); code++; goto Next;
        case OpCode::SubU_R6_R7_X8:
            r6 = reg_sub_u64(r6, r7); code++; goto Next;
        case OpCode::SubU_R7_R0_X8:
            r7 = reg_sub_u64(r7, r0); code++; goto Next;
        case OpCode::SubU_R7_R1_X8:
            r7 = reg_sub_u64(r7, r1); code++; goto Next;
        case OpCode::SubU_R7_R2_X8:
            r7 = reg_sub_u64(r7, r2); code++; goto Next;
        case OpCode::SubU_R7_R3_X8:
            r7 = reg_sub_u64(r7, r3); code++; goto Next;
        case OpCode::SubU_R7_R4_X8:
            r7 = reg_sub_u64(r7, r4); code++; goto Next;
        case OpCode::SubU_R7_R5_X8:
            r7 = reg_sub_u64(r7, r5); code++; goto Next;
        case OpCode::SubU_R7_R6_X8:
            r7 = reg_sub_u64(r7, r6); code++; goto Next;
        case OpCode::SubU_R7_R7_X8:
            r7 = reg_sub_u64(r7, r7); code++; goto Next;

        case OpCode::MulU_R0_R0_X8:
            r0 = reg_mul_u64(r0, r0); code++; goto Next;
        case OpCode::MulU_R0_R1_X8:
            r0 = reg_mul_u64(r0, r1); code++; goto Next;
        case OpCode::MulU_R0_R2_X8:
            r0 = reg_mul_u64(r0, r2); code++; goto Next;
        case OpCode::MulU_R0_R3_X8:
            r0 = reg_mul_u64(r0, r3); code++; goto Next;
        case OpCode::MulU_R0_R4_X8:
            r0 = reg_mul_u64(r0, r4); code++; goto Next;
        case OpCode::MulU_R0_R5_X8:
            r0 = reg_mul_u64(r0, r5); code++; goto Next;
        case OpCode::MulU_R0_R6_X8:
            r0 = reg_mul_u64(r0, r6); code++; goto Next;
        case OpCode::MulU_R0_R7_X8:
            r0 = reg_mul_u64(r0, r7); code++; goto Next;
        case OpCode::MulU_R1_R0_X8:
            r1 = reg_mul_u64(r1, r0); code++; goto Next;
        case OpCode::MulU_R1_R1_X8:
            r1 = reg_mul_u64(r1, r1); code++; goto Next;
        case OpCode::MulU_R1_R2_X8:
            r1 = reg_mul_u64(r1, r2); code++; goto Next;
        case OpCode::MulU_R1_R3_X8:
            r1 = reg_mul_u64(r1, r3); code++; goto Next;
        case OpCode::MulU_R1_R4_X8:
            r1 = reg_mul_u64(r1, r4); code++; goto Next;
        case OpCode::MulU_R1_R5_X8:
            r1 = reg_mul_u64(r1, r5); code++; goto Next;
        case OpCode::MulU_R1_R6_X8:
            r1 = reg_mul_u64(r1, r6); code++; goto Next;
        case OpCode::MulU_R1_R7_X8:
            r1 = reg_mul_u64(r1, r7); code++; goto Next;
        case OpCode::MulU_R2_R0_X8:
            r2 = reg_mul_u64(r2, r0); code++; goto Next;
        case OpCode::MulU_R2_R1_X8:
            r2 = reg_mul_u64(r2, r1); code++; goto Next;
        case OpCode::MulU_R2_R2_X8:
            r2 = reg_mul_u64(r2, r2); code++; goto Next;
        case OpCode::MulU_R2_R3_X8:
            r2 = reg_mul_u64(r2, r3); code++; goto Next;
        case OpCode::MulU_R2_R4_X8:
            r2 = reg_mul_u64(r2, r4); code++; goto Next;
        case OpCode::MulU_R2_R5_X8:
            r2 = reg_mul_u64(r2, r5); code++; goto Next;
        case OpCode::MulU_R2_R6_X8:
            r2 = reg_mul_u64(r2, r6); code++; goto Next;
        case OpCode::MulU_R2_R7_X8:
            r2 = reg_mul_u64(r2, r7); code++; goto Next;
        case OpCode::MulU_R3_R0_X8:
            r3 = reg_mul_u64(r3, r0); code++; goto Next;
        case OpCode::MulU_R3_R1_X8:
            r3 = reg_mul_u64(r3, r1); code++; goto Next;
        case OpCode::MulU_R3_R2_X8:
            r3 = reg_mul_u64(r3, r2); code++; goto Next;
        case OpCode::MulU_R3_R3_X8:
            r3 = reg_mul_u64(r3, r3); code++; goto Next;
        case OpCode::MulU_R3_R4_X8:
            r3 = reg_mul_u64(r3, r4); code++; goto Next;
        case OpCode::MulU_R3_R5_X8:
            r3 = reg_mul_u64(r3, r5); code++; goto Next;
        case OpCode::MulU_R3_R6_X8:
            r3 = reg_mul_u64(r3, r6); code++; goto Next;
        case OpCode::MulU_R3_R7_X8:
            r3 = reg_mul_u64(r3, r7); code++; goto Next;
        case OpCode::MulU_R4_R0_X8:
            r4 = reg_mul_u64(r4, r0); code++; goto Next;
        case OpCode::MulU_R4_R1_X8:
            r4 = reg_mul_u64(r4, r1); code++; goto Next;
        case OpCode::MulU_R4_R2_X8:
            r4 = reg_mul_u64(r4, r2); code++; goto Next;
        case OpCode::MulU_R4_R3_X8:
            r4 = reg_mul_u64(r4, r3); code++; goto Next;
        case OpCode::MulU_R4_R4_X8:
            r4 = reg_mul_u64(r4, r4); code++; goto Next;
        case OpCode::MulU_R4_R5_X8:
            r4 = reg_mul_u64(r4, r5); code++; goto Next;
        case OpCode::MulU_R4_R6_X8:
            r4 = reg_mul_u64(r4, r6); code++; goto Next;
        case OpCode::MulU_R4_R7_X8:
            r4 = reg_mul_u64(r4, r7); code++; goto Next;
        case OpCode::MulU_R5_R0_X8:
            r5 = reg_mul_u64(r5, r0); code++; goto Next;
        case OpCode::MulU_R5_R1_X8:
            r5 = reg_mul_u64(r5, r1); code++; goto Next;
        case OpCode::MulU_R5_R2_X8:
            r5 = reg_mul_u64(r5, r2); code++; goto Next;
        case OpCode::MulU_R5_R3_X8:
            r5 = reg_mul_u64(r5, r3); code++; goto Next;
        case OpCode::MulU_R5_R4_X8:
            r5 = reg_mul_u64(r5, r4); code++; goto Next;
        case OpCode::MulU_R5_R5_X8:
            r5 = reg_mul_u64(r5, r5); code++; goto Next;
        case OpCode::MulU_R5_R6_X8:
            r5 = reg_mul_u64(r5, r6); code++; goto Next;
        case OpCode::MulU_R5_R7_X8:
            r5 = reg_mul_u64(r5, r7); code++; goto Next;
        case OpCode::MulU_R6_R0_X8:
            r6 = reg_mul_u64(r6, r0); code++; goto Next;
        case OpCode::MulU_R6_R1_X8:
            r6 = reg_mul_u64(r6, r1); code++; goto Next;
        case OpCode::MulU_R6_R2_X8:
            r6 = reg_mul_u64(r6, r2); code++; goto Next;
        case OpCode::MulU_R6_R3_X8:
            r6 = reg_mul_u64(r6, r3); code++; goto Next;
        case OpCode::MulU_R6_R4_X8:
            r6 = reg_mul_u64(r6, r4); code++; goto Next;
        case OpCode::MulU_R6_R5_X8:
            r6 = reg_mul_u64(r6, r5); code++; goto Next;
        case OpCode::MulU_R6_R6_X8:
            r6 = reg_mul_u64(r6, r6); code++; goto Next;
        case OpCode::MulU_R6_R7_X8:
            r6 = reg_mul_u64(r6, r7); code++; goto Next;
        case OpCode::MulU_R7_R0_X8:
            r7 = reg_mul_u64(r7, r0); code++; goto Next;
        case OpCode::MulU_R7_R1_X8:
            r7 = reg_mul_u64(r7, r1); code++; goto Next;
        case OpCode::MulU_R7_R2_X8:
            r7 = reg_mul_u64(r7, r2); code++; goto Next;
        case OpCode::MulU_R7_R3_X8:
            r7 = reg_mul_u64(r7, r3); code++; goto Next;
        case OpCode::MulU_R7_R4_X8:
            r7 = reg_mul_u64(r7, r4); code++; goto Next;
        case OpCode::MulU_R7_R5_X8:
            r7 = reg_mul_u64(r7, r5); code++; goto Next;
        case OpCode::MulU_R7_R6_X8:
            r7 = reg_mul_u64(r7, r6); code++; goto Next;
        case OpCode::MulU_R7_R7_X8:
            r7 = reg_mul_u64(r7, r7); code++; goto Next;

        case OpCode::DivU_R0_R0_X8:
            r0 = reg_div_u64(r0, r0); code++; goto Next;
        case OpCode::DivU_R0_R1_X8:
            r0 = reg_div_u64(r0, r1); code++; goto Next;
        case OpCode::DivU_R0_R2_X8:
            r0 = reg_div_u64(r0, r2); code++; goto Next;
        case OpCode::DivU_R0_R3_X8:
            r0 = reg_div_u64(r0, r3); code++; goto Next;
        case OpCode::DivU_R0_R4_X8:
            r0 = reg_div_u64(r0, r4); code++; goto Next;
        case OpCode::DivU_R0_R5_X8:
            r0 = reg_div_u64(r0, r5); code++; goto Next;
        case OpCode::DivU_R0_R6_X8:
            r0 = reg_div_u64(r0, r6); code++; goto Next;
        case OpCode::DivU_R0_R7_X8:
            r0 = reg_div_u64(r0, r7); code++; goto Next;
        case OpCode::DivU_R1_R0_X8:
            r1 = reg_div_u64(r1, r0); code++; goto Next;
        case OpCode::DivU_R1_R1_X8:
            r1 = reg_div_u64(r1, r1); code++; goto Next;
        case OpCode::DivU_R1_R2_X8:
            r1 = reg_div_u64(r1, r2); code++; goto Next;
        case OpCode::DivU_R1_R3_X8:
            r1 = reg_div_u64(r1, r3); code++; goto Next;
        case OpCode::DivU_R1_R4_X8:
            r1 = reg_div_u64(r1, r4); code++; goto Next;
        case OpCode::DivU_R1_R5_X8:
            r1 = reg_div_u64(r1, r5); code++; goto Next;
        case OpCode::DivU_R1_R6_X8:
            r1 = reg_div_u64(r1, r6); code++; goto Next;
        case OpCode::DivU_R1_R7_X8:
            r1 = reg_div_u64(r1, r7); code++; goto Next;
        case OpCode::DivU_R2_R0_X8:
            r2 = reg_div_u64(r2, r0); code++; goto Next;
        case OpCode::DivU_R2_R1_X8:
            r2 = reg_div_u64(r2, r1); code++; goto Next;
        case OpCode::DivU_R2_R2_X8:
            r2 = reg_div_u64(r2, r2); code++; goto Next;
        case OpCode::DivU_R2_R3_X8:
            r2 = reg_div_u64(r2, r3); code++; goto Next;
        case OpCode::DivU_R2_R4_X8:
            r2 = reg_div_u64(r2, r4); code++; goto Next;
        case OpCode::DivU_R2_R5_X8:
            r2 = reg_div_u64(r2, r5); code++; goto Next;
        case OpCode::DivU_R2_R6_X8:
            r2 = reg_div_u64(r2, r6); code++; goto Next;
        case OpCode::DivU_R2_R7_X8:
            r2 = reg_div_u64(r2, r7); code++; goto Next;
        case OpCode::DivU_R3_R0_X8:
            r3 = reg_div_u64(r3, r0); code++; goto Next;
        case OpCode::DivU_R3_R1_X8:
            r3 = reg_div_u64(r3, r1); code++; goto Next;
        case OpCode::DivU_R3_R2_X8:
            r3 = reg_div_u64(r3, r2); code++; goto Next;
        case OpCode::DivU_R3_R3_X8:
            r3 = reg_div_u64(r3, r3); code++; goto Next;
        case OpCode::DivU_R3_R4_X8:
            r3 = reg_div_u64(r3, r4); code++; goto Next;
        case OpCode::DivU_R3_R5_X8:
            r3 = reg_div_u64(r3, r5); code++; goto Next;
        case OpCode::DivU_R3_R6_X8:
            r3 = reg_div_u64(r3, r6); code++; goto Next;
        case OpCode::DivU_R3_R7_X8:
            r3 = reg_div_u64(r3, r7); code++; goto Next;
        case OpCode::DivU_R4_R0_X8:
            r4 = reg_div_u64(r4, r0); code++; goto Next;
        case OpCode::DivU_R4_R1_X8:
            r4 = reg_div_u64(r4, r1); code++; goto Next;
        case OpCode::DivU_R4_R2_X8:
            r4 = reg_div_u64(r4, r2); code++; goto Next;
        case OpCode::DivU_R4_R3_X8:
            r4 = reg_div_u64(r4, r3); code++; goto Next;
        case OpCode::DivU_R4_R4_X8:
            r4 = reg_div_u64(r4, r4); code++; goto Next;
        case OpCode::DivU_R4_R5_X8:
            r4 = reg_div_u64(r4, r5); code++; goto Next;
        case OpCode::DivU_R4_R6_X8:
            r4 = reg_div_u64(r4, r6); code++; goto Next;
        case OpCode::DivU_R4_R7_X8:
            r4 = reg_div_u64(r4, r7); code++; goto Next;
        case OpCode::DivU_R5_R0_X8:
            r5 = reg_div_u64(r5, r0); code++; goto Next;
        case OpCode::DivU_R5_R1_X8:
            r5 = reg_div_u64(r5, r1); code++; goto Next;
        case OpCode::DivU_R5_R2_X8:
            r5 = reg_div_u64(r5, r2); code++; goto Next;
        case OpCode::DivU_R5_R3_X8:
            r5 = reg_div_u64(r5, r3); code++; goto Next;
        case OpCode::DivU_R5_R4_X8:
            r5 = reg_div_u64(r5, r4); code++; goto Next;
        case OpCode::DivU_R5_R5_X8:
            r5 = reg_div_u64(r5, r5); code++; goto Next;
        case OpCode::DivU_R5_R6_X8:
            r5 = reg_div_u64(r5, r6); code++; goto Next;
        case OpCode::DivU_R5_R7_X8:
            r5 = reg_div_u64(r5, r7); code++; goto Next;
        case OpCode::DivU_R6_R0_X8:
            r6 = reg_div_u64(r6, r0); code++; goto Next;
        case OpCode::DivU_R6_R1_X8:
            r6 = reg_div_u64(r6, r1); code++; goto Next;
        case OpCode::DivU_R6_R2_X8:
            r6 = reg_div_u64(r6, r2); code++; goto Next;
        case OpCode::DivU_R6_R3_X8:
            r6 = reg_div_u64(r6, r3); code++; goto Next;
        case OpCode::DivU_R6_R4_X8:
            r6 = reg_div_u64(r6, r4); code++; goto Next;
        case OpCode::DivU_R6_R5_X8:
            r6 = reg_div_u64(r6, r5); code++; goto Next;
        case OpCode::DivU_R6_R6_X8:
            r6 = reg_div_u64(r6, r6); code++; goto Next;
        case OpCode::DivU_R6_R7_X8:
            r6 = reg_div_u64(r6, r7); code++; goto Next;
        case OpCode::DivU_R7_R0_X8:
            r7 = reg_div_u64(r7, r0); code++; goto Next;
        case OpCode::DivU_R7_R1_X8:
            r7 = reg_div_u64(r7, r1); code++; goto Next;
        case OpCode::DivU_R7_R2_X8:
            r7 = reg_div_u64(r7, r2); code++; goto Next;
        case OpCode::DivU_R7_R3_X8:
            r7 = reg_div_u64(r7, r3); code++; goto Next;
        case OpCode::DivU_R7_R4_X8:
            r7 = reg_div_u64(r7, r4); code++; goto Next;
        case OpCode::DivU_R7_R5_X8:
            r7 = reg_div_u64(r7, r5); code++; goto Next;
        case OpCode::DivU_R7_R6_X8:
            r7 = reg_div_u64(r7, r6); code++; goto Next;
        case OpCode::DivU_R7_R7_X8:
            r7 = reg_div_u64(r7, r7); code++; goto Next;

        case OpCode::AddF_R0_R0_X4:
            r0 = reg_add_f32(r0, r0); code++; goto Next;
        case OpCode::AddF_R0_R1_X4:
            r0 = reg_add_f32(r0, r1); code++; goto Next;
        case OpCode::AddF_R0_R2_X4:
            r0 = reg_add_f32(r0, r2); code++; goto Next;
        case OpCode::AddF_R0_R3_X4:
            r0 = reg_add_f32(r0, r3); code++; goto Next;
        case OpCode::AddF_R0_R4_X4:
            r0 = reg_add_f32(r0, r4); code++; goto Next;
        case OpCode::AddF_R0_R5_X4:
            r0 = reg_add_f32(r0, r5); code++; goto Next;
        case OpCode::AddF_R0_R6_X4:
            r0 = reg_add_f32(r0, r6); code++; goto Next;
        case OpCode::AddF_R0_R7_X4:
            r0 = reg_add_f32(r0, r7); code++; goto Next;
        case OpCode::AddF_R1_R0_X4:
            r1 = reg_add_f32(r1, r0); code++; goto Next;
        case OpCode::AddF_R1_R1_X4:
            r1 = reg_add_f32(r1, r1); code++; goto Next;
        case OpCode::AddF_R1_R2_X4:
            r1 = reg_add_f32(r1, r2); code++; goto Next;
        case OpCode::AddF_R1_R3_X4:
            r1 = reg_add_f32(r1, r3); code++; goto Next;
        case OpCode::AddF_R1_R4_X4:
            r1 = reg_add_f32(r1, r4); code++; goto Next;
        case OpCode::AddF_R1_R5_X4:
            r1 = reg_add_f32(r1, r5); code++; goto Next;
        case OpCode::AddF_R1_R6_X4:
            r1 = reg_add_f32(r1, r6); code++; goto Next;
        case OpCode::AddF_R1_R7_X4:
            r1 = reg_add_f32(r1, r7); code++; goto Next;
        case OpCode::AddF_R2_R0_X4:
            r2 = reg_add_f32(r2, r0); code++; goto Next;
        case OpCode::AddF_R2_R1_X4:
            r2 = reg_add_f32(r2, r1); code++; goto Next;
        case OpCode::AddF_R2_R2_X4:
            r2 = reg_add_f32(r2, r2); code++; goto Next;
        case OpCode::AddF_R2_R3_X4:
            r2 = reg_add_f32(r2, r3); code++; goto Next;
        case OpCode::AddF_R2_R4_X4:
            r2 = reg_add_f32(r2, r4); code++; goto Next;
        case OpCode::AddF_R2_R5_X4:
            r2 = reg_add_f32(r2, r5); code++; goto Next;
        case OpCode::AddF_R2_R6_X4:
            r2 = reg_add_f32(r2, r6); code++; goto Next;
        case OpCode::AddF_R2_R7_X4:
            r2 = reg_add_f32(r2, r7); code++; goto Next;
        case OpCode::AddF_R3_R0_X4:
            r3 = reg_add_f32(r3, r0); code++; goto Next;
        case OpCode::AddF_R3_R1_X4:
            r3 = reg_add_f32(r3, r1); code++; goto Next;
        case OpCode::AddF_R3_R2_X4:
            r3 = reg_add_f32(r3, r2); code++; goto Next;
        case OpCode::AddF_R3_R3_X4:
            r3 = reg_add_f32(r3, r3); code++; goto Next;
        case OpCode::AddF_R3_R4_X4:
            r3 = reg_add_f32(r3, r4); code++; goto Next;
        case OpCode::AddF_R3_R5_X4:
            r3 = reg_add_f32(r3, r5); code++; goto Next;
        case OpCode::AddF_R3_R6_X4:
            r3 = reg_add_f32(r3, r6); code++; goto Next;
        case OpCode::AddF_R3_R7_X4:
            r3 = reg_add_f32(r3, r7); code++; goto Next;
        case OpCode::AddF_R4_R0_X4:
            r4 = reg_add_f32(r4, r0); code++; goto Next;
        case OpCode::AddF_R4_R1_X4:
            r4 = reg_add_f32(r4, r1); code++; goto Next;
        case OpCode::AddF_R4_R2_X4:
            r4 = reg_add_f32(r4, r2); code++; goto Next;
        case OpCode::AddF_R4_R3_X4:
            r4 = reg_add_f32(r4, r3); code++; goto Next;
        case OpCode::AddF_R4_R4_X4:
            r4 = reg_add_f32(r4, r4); code++; goto Next;
        case OpCode::AddF_R4_R5_X4:
            r4 = reg_add_f32(r4, r5); code++; goto Next;
        case OpCode::AddF_R4_R6_X4:
            r4 = reg_add_f32(r4, r6); code++; goto Next;
        case OpCode::AddF_R4_R7_X4:
            r4 = reg_add_f32(r4, r7); code++; goto Next;
        case OpCode::AddF_R5_R0_X4:
            r5 = reg_add_f32(r5, r0); code++; goto Next;
        case OpCode::AddF_R5_R1_X4:
            r5 = reg_add_f32(r5, r1); code++; goto Next;
        case OpCode::AddF_R5_R2_X4:
            r5 = reg_add_f32(r5, r2); code++; goto Next;
        case OpCode::AddF_R5_R3_X4:
            r5 = reg_add_f32(r5, r3); code++; goto Next;
        case OpCode::AddF_R5_R4_X4:
            r5 = reg_add_f32(r5, r4); code++; goto Next;
        case OpCode::AddF_R5_R5_X4:
            r5 = reg_add_f32(r5, r5); code++; goto Next;
        case OpCode::AddF_R5_R6_X4:
            r5 = reg_add_f32(r5, r6); code++; goto Next;
        case OpCode::AddF_R5_R7_X4:
            r5 = reg_add_f32(r5, r7); code++; goto Next;
        case OpCode::AddF_R6_R0_X4:
            r6 = reg_add_f32(r6, r0); code++; goto Next;
        case OpCode::AddF_R6_R1_X4:
            r6 = reg_add_f32(r6, r1); code++; goto Next;
        case OpCode::AddF_R6_R2_X4:
            r6 = reg_add_f32(r6, r2); code++; goto Next;
        case OpCode::AddF_R6_R3_X4:
            r6 = reg_add_f32(r6, r3); code++; goto Next;
        case OpCode::AddF_R6_R4_X4:
            r6 = reg_add_f32(r6, r4); code++; goto Next;
        case OpCode::AddF_R6_R5_X4:
            r6 = reg_add_f32(r6, r5); code++; goto Next;
        case OpCode::AddF_R6_R6_X4:
            r6 = reg_add_f32(r6, r6); code++; goto Next;
        case OpCode::AddF_R6_R7_X4:
            r6 = reg_add_f32(r6, r7); code++; goto Next;
        case OpCode::AddF_R7_R0_X4:
            r7 = reg_add_f32(r7, r0); code++; goto Next;
        case OpCode::AddF_R7_R1_X4:
            r7 = reg_add_f32(r7, r1); code++; goto Next;
        case OpCode::AddF_R7_R2_X4:
            r7 = reg_add_f32(r7, r2); code++; goto Next;
        case OpCode::AddF_R7_R3_X4:
            r7 = reg_add_f32(r7, r3); code++; goto Next;
        case OpCode::AddF_R7_R4_X4:
            r7 = reg_add_f32(r7, r4); code++; goto Next;
        case OpCode::AddF_R7_R5_X4:
            r7 = reg_add_f32(r7, r5); code++; goto Next;
        case OpCode::AddF_R7_R6_X4:
            r7 = reg_add_f32(r7, r6); code++; goto Next;
        case OpCode::AddF_R7_R7_X4:
            r7 = reg_add_f32(r7, r7); code++; goto Next;

        case OpCode::SubF_R0_R0_X4:
            r0 = reg_sub_f32(r0, r0); code++; goto Next;
        case OpCode::SubF_R0_R1_X4:
            r0 = reg_sub_f32(r0, r1); code++; goto Next;
        case OpCode::SubF_R0_R2_X4:
            r0 = reg_sub_f32(r0, r2); code++; goto Next;
        case OpCode::SubF_R0_R3_X4:
            r0 = reg_sub_f32(r0, r3); code++; goto Next;
        case OpCode::SubF_R0_R4_X4:
            r0 = reg_sub_f32(r0, r4); code++; goto Next;
        case OpCode::SubF_R0_R5_X4:
            r0 = reg_sub_f32(r0, r5); code++; goto Next;
        case OpCode::SubF_R0_R6_X4:
            r0 = reg_sub_f32(r0, r6); code++; goto Next;
        case OpCode::SubF_R0_R7_X4:
            r0 = reg_sub_f32(r0, r7); code++; goto Next;
        case OpCode::SubF_R1_R0_X4:
            r1 = reg_sub_f32(r1, r0); code++; goto Next;
        case OpCode::SubF_R1_R1_X4:
            r1 = reg_sub_f32(r1, r1); code++; goto Next;
        case OpCode::SubF_R1_R2_X4:
            r1 = reg_sub_f32(r1, r2); code++; goto Next;
        case OpCode::SubF_R1_R3_X4:
            r1 = reg_sub_f32(r1, r3); code++; goto Next;
        case OpCode::SubF_R1_R4_X4:
            r1 = reg_sub_f32(r1, r4); code++; goto Next;
        case OpCode::SubF_R1_R5_X4:
            r1 = reg_sub_f32(r1, r5); code++; goto Next;
        case OpCode::SubF_R1_R6_X4:
            r1 = reg_sub_f32(r1, r6); code++; goto Next;
        case OpCode::SubF_R1_R7_X4:
            r1 = reg_sub_f32(r1, r7); code++; goto Next;
        case OpCode::SubF_R2_R0_X4:
            r2 = reg_sub_f32(r2, r0); code++; goto Next;
        case OpCode::SubF_R2_R1_X4:
            r2 = reg_sub_f32(r2, r1); code++; goto Next;
        case OpCode::SubF_R2_R2_X4:
            r2 = reg_sub_f32(r2, r2); code++; goto Next;
        case OpCode::SubF_R2_R3_X4:
            r2 = reg_sub_f32(r2, r3); code++; goto Next;
        case OpCode::SubF_R2_R4_X4:
            r2 = reg_sub_f32(r2, r4); code++; goto Next;
        case OpCode::SubF_R2_R5_X4:
            r2 = reg_sub_f32(r2, r5); code++; goto Next;
        case OpCode::SubF_R2_R6_X4:
            r2 = reg_sub_f32(r2, r6); code++; goto Next;
        case OpCode::SubF_R2_R7_X4:
            r2 = reg_sub_f32(r2, r7); code++; goto Next;
        case OpCode::SubF_R3_R0_X4:
            r3 = reg_sub_f32(r3, r0); code++; goto Next;
        case OpCode::SubF_R3_R1_X4:
            r3 = reg_sub_f32(r3, r1); code++; goto Next;
        case OpCode::SubF_R3_R2_X4:
            r3 = reg_sub_f32(r3, r2); code++; goto Next;
        case OpCode::SubF_R3_R3_X4:
            r3 = reg_sub_f32(r3, r3); code++; goto Next;
        case OpCode::SubF_R3_R4_X4:
            r3 = reg_sub_f32(r3, r4); code++; goto Next;
        case OpCode::SubF_R3_R5_X4:
            r3 = reg_sub_f32(r3, r5); code++; goto Next;
        case OpCode::SubF_R3_R6_X4:
            r3 = reg_sub_f32(r3, r6); code++; goto Next;
        case OpCode::SubF_R3_R7_X4:
            r3 = reg_sub_f32(r3, r7); code++; goto Next;
        case OpCode::SubF_R4_R0_X4:
            r4 = reg_sub_f32(r4, r0); code++; goto Next;
        case OpCode::SubF_R4_R1_X4:
            r4 = reg_sub_f32(r4, r1); code++; goto Next;
        case OpCode::SubF_R4_R2_X4:
            r4 = reg_sub_f32(r4, r2); code++; goto Next;
        case OpCode::SubF_R4_R3_X4:
            r4 = reg_sub_f32(r4, r3); code++; goto Next;
        case OpCode::SubF_R4_R4_X4:
            r4 = reg_sub_f32(r4, r4); code++; goto Next;
        case OpCode::SubF_R4_R5_X4:
            r4 = reg_sub_f32(r4, r5); code++; goto Next;
        case OpCode::SubF_R4_R6_X4:
            r4 = reg_sub_f32(r4, r6); code++; goto Next;
        case OpCode::SubF_R4_R7_X4:
            r4 = reg_sub_f32(r4, r7); code++; goto Next;
        case OpCode::SubF_R5_R0_X4:
            r5 = reg_sub_f32(r5, r0); code++; goto Next;
        case OpCode::SubF_R5_R1_X4:
            r5 = reg_sub_f32(r5, r1); code++; goto Next;
        case OpCode::SubF_R5_R2_X4:
            r5 = reg_sub_f32(r5, r2); code++; goto Next;
        case OpCode::SubF_R5_R3_X4:
            r5 = reg_sub_f32(r5, r3); code++; goto Next;
        case OpCode::SubF_R5_R4_X4:
            r5 = reg_sub_f32(r5, r4); code++; goto Next;
        case OpCode::SubF_R5_R5_X4:
            r5 = reg_sub_f32(r5, r5); code++; goto Next;
        case OpCode::SubF_R5_R6_X4:
            r5 = reg_sub_f32(r5, r6); code++; goto Next;
        case OpCode::SubF_R5_R7_X4:
            r5 = reg_sub_f32(r5, r7); code++; goto Next;
        case OpCode::SubF_R6_R0_X4:
            r6 = reg_sub_f32(r6, r0); code++; goto Next;
        case OpCode::SubF_R6_R1_X4:
            r6 = reg_sub_f32(r6, r1); code++; goto Next;
        case OpCode::SubF_R6_R2_X4:
            r6 = reg_sub_f32(r6, r2); code++; goto Next;
        case OpCode::SubF_R6_R3_X4:
            r6 = reg_sub_f32(r6, r3); code++; goto Next;
        case OpCode::SubF_R6_R4_X4:
            r6 = reg_sub_f32(r6, r4); code++; goto Next;
        case OpCode::SubF_R6_R5_X4:
            r6 = reg_sub_f32(r6, r5); code++; goto Next;
        case OpCode::SubF_R6_R6_X4:
            r6 = reg_sub_f32(r6, r6); code++; goto Next;
        case OpCode::SubF_R6_R7_X4:
            r6 = reg_sub_f32(r6, r7); code++; goto Next;
        case OpCode::SubF_R7_R0_X4:
            r7 = reg_sub_f32(r7, r0); code++; goto Next;
        case OpCode::SubF_R7_R1_X4:
            r7 = reg_sub_f32(r7, r1); code++; goto Next;
        case OpCode::SubF_R7_R2_X4:
            r7 = reg_sub_f32(r7, r2); code++; goto Next;
        case OpCode::SubF_R7_R3_X4:
            r7 = reg_sub_f32(r7, r3); code++; goto Next;
        case OpCode::SubF_R7_R4_X4:
            r7 = reg_sub_f32(r7, r4); code++; goto Next;
        case OpCode::SubF_R7_R5_X4:
            r7 = reg_sub_f32(r7, r5); code++; goto Next;
        case OpCode::SubF_R7_R6_X4:
            r7 = reg_sub_f32(r7, r6); code++; goto Next;
        case OpCode::SubF_R7_R7_X4:
            r7 = reg_sub_f32(r7, r7); code++; goto Next;

        case OpCode::MulF_R0_R0_X4:
            r0 = reg_mul_f32(r0, r0); code++; goto Next;
        case OpCode::MulF_R0_R1_X4:
            r0 = reg_mul_f32(r0, r1); code++; goto Next;
        case OpCode::MulF_R0_R2_X4:
            r0 = reg_mul_f32(r0, r2); code++; goto Next;
        case OpCode::MulF_R0_R3_X4:
            r0 = reg_mul_f32(r0, r3); code++; goto Next;
        case OpCode::MulF_R0_R4_X4:
            r0 = reg_mul_f32(r0, r4); code++; goto Next;
        case OpCode::MulF_R0_R5_X4:
            r0 = reg_mul_f32(r0, r5); code++; goto Next;
        case OpCode::MulF_R0_R6_X4:
            r0 = reg_mul_f32(r0, r6); code++; goto Next;
        case OpCode::MulF_R0_R7_X4:
            r0 = reg_mul_f32(r0, r7); code++; goto Next;
        case OpCode::MulF_R1_R0_X4:
            r1 = reg_mul_f32(r1, r0); code++; goto Next;
        case OpCode::MulF_R1_R1_X4:
            r1 = reg_mul_f32(r1, r1); code++; goto Next;
        case OpCode::MulF_R1_R2_X4:
            r1 = reg_mul_f32(r1, r2); code++; goto Next;
        case OpCode::MulF_R1_R3_X4:
            r1 = reg_mul_f32(r1, r3); code++; goto Next;
        case OpCode::MulF_R1_R4_X4:
            r1 = reg_mul_f32(r1, r4); code++; goto Next;
        case OpCode::MulF_R1_R5_X4:
            r1 = reg_mul_f32(r1, r5); code++; goto Next;
        case OpCode::MulF_R1_R6_X4:
            r1 = reg_mul_f32(r1, r6); code++; goto Next;
        case OpCode::MulF_R1_R7_X4:
            r1 = reg_mul_f32(r1, r7); code++; goto Next;
        case OpCode::MulF_R2_R0_X4:
            r2 = reg_mul_f32(r2, r0); code++; goto Next;
        case OpCode::MulF_R2_R1_X4:
            r2 = reg_mul_f32(r2, r1); code++; goto Next;
        case OpCode::MulF_R2_R2_X4:
            r2 = reg_mul_f32(r2, r2); code++; goto Next;
        case OpCode::MulF_R2_R3_X4:
            r2 = reg_mul_f32(r2, r3); code++; goto Next;
        case OpCode::MulF_R2_R4_X4:
            r2 = reg_mul_f32(r2, r4); code++; goto Next;
        case OpCode::MulF_R2_R5_X4:
            r2 = reg_mul_f32(r2, r5); code++; goto Next;
        case OpCode::MulF_R2_R6_X4:
            r2 = reg_mul_f32(r2, r6); code++; goto Next;
        case OpCode::MulF_R2_R7_X4:
            r2 = reg_mul_f32(r2, r7); code++; goto Next;
        case OpCode::MulF_R3_R0_X4:
            r3 = reg_mul_f32(r3, r0); code++; goto Next;
        case OpCode::MulF_R3_R1_X4:
            r3 = reg_mul_f32(r3, r1); code++; goto Next;
        case OpCode::MulF_R3_R2_X4:
            r3 = reg_mul_f32(r3, r2); code++; goto Next;
        case OpCode::MulF_R3_R3_X4:
            r3 = reg_mul_f32(r3, r3); code++; goto Next;
        case OpCode::MulF_R3_R4_X4:
            r3 = reg_mul_f32(r3, r4); code++; goto Next;
        case OpCode::MulF_R3_R5_X4:
            r3 = reg_mul_f32(r3, r5); code++; goto Next;
        case OpCode::MulF_R3_R6_X4:
            r3 = reg_mul_f32(r3, r6); code++; goto Next;
        case OpCode::MulF_R3_R7_X4:
            r3 = reg_mul_f32(r3, r7); code++; goto Next;
        case OpCode::MulF_R4_R0_X4:
            r4 = reg_mul_f32(r4, r0); code++; goto Next;
        case OpCode::MulF_R4_R1_X4:
            r4 = reg_mul_f32(r4, r1); code++; goto Next;
        case OpCode::MulF_R4_R2_X4:
            r4 = reg_mul_f32(r4, r2); code++; goto Next;
        case OpCode::MulF_R4_R3_X4:
            r4 = reg_mul_f32(r4, r3); code++; goto Next;
        case OpCode::MulF_R4_R4_X4:
            r4 = reg_mul_f32(r4, r4); code++; goto Next;
        case OpCode::MulF_R4_R5_X4:
            r4 = reg_mul_f32(r4, r5); code++; goto Next;
        case OpCode::MulF_R4_R6_X4:
            r4 = reg_mul_f32(r4, r6); code++; goto Next;
        case OpCode::MulF_R4_R7_X4:
            r4 = reg_mul_f32(r4, r7); code++; goto Next;
        case OpCode::MulF_R5_R0_X4:
            r5 = reg_mul_f32(r5, r0); code++; goto Next;
        case OpCode::MulF_R5_R1_X4:
            r5 = reg_mul_f32(r5, r1); code++; goto Next;
        case OpCode::MulF_R5_R2_X4:
            r5 = reg_mul_f32(r5, r2); code++; goto Next;
        case OpCode::MulF_R5_R3_X4:
            r5 = reg_mul_f32(r5, r3); code++; goto Next;
        case OpCode::MulF_R5_R4_X4:
            r5 = reg_mul_f32(r5, r4); code++; goto Next;
        case OpCode::MulF_R5_R5_X4:
            r5 = reg_mul_f32(r5, r5); code++; goto Next;
        case OpCode::MulF_R5_R6_X4:
            r5 = reg_mul_f32(r5, r6); code++; goto Next;
        case OpCode::MulF_R5_R7_X4:
            r5 = reg_mul_f32(r5, r7); code++; goto Next;
        case OpCode::MulF_R6_R0_X4:
            r6 = reg_mul_f32(r6, r0); code++; goto Next;
        case OpCode::MulF_R6_R1_X4:
            r6 = reg_mul_f32(r6, r1); code++; goto Next;
        case OpCode::MulF_R6_R2_X4:
            r6 = reg_mul_f32(r6, r2); code++; goto Next;
        case OpCode::MulF_R6_R3_X4:
            r6 = reg_mul_f32(r6, r3); code++; goto Next;
        case OpCode::MulF_R6_R4_X4:
            r6 = reg_mul_f32(r6, r4); code++; goto Next;
        case OpCode::MulF_R6_R5_X4:
            r6 = reg_mul_f32(r6, r5); code++; goto Next;
        case OpCode::MulF_R6_R6_X4:
            r6 = reg_mul_f32(r6, r6); code++; goto Next;
        case OpCode::MulF_R6_R7_X4:
            r6 = reg_mul_f32(r6, r7); code++; goto Next;
        case OpCode::MulF_R7_R0_X4:
            r7 = reg_mul_f32(r7, r0); code++; goto Next;
        case OpCode::MulF_R7_R1_X4:
            r7 = reg_mul_f32(r7, r1); code++; goto Next;
        case OpCode::MulF_R7_R2_X4:
            r7 = reg_mul_f32(r7, r2); code++; goto Next;
        case OpCode::MulF_R7_R3_X4:
            r7 = reg_mul_f32(r7, r3); code++; goto Next;
        case OpCode::MulF_R7_R4_X4:
            r7 = reg_mul_f32(r7, r4); code++; goto Next;
        case OpCode::MulF_R7_R5_X4:
            r7 = reg_mul_f32(r7, r5); code++; goto Next;
        case OpCode::MulF_R7_R6_X4:
            r7 = reg_mul_f32(r7, r6); code++; goto Next;
        case OpCode::MulF_R7_R7_X4:
            r7 = reg_mul_f32(r7, r7); code++; goto Next;

        case OpCode::DivF_R0_R0_X4:
            r0 = reg_div_f32(r0, r0); code++; goto Next;
        case OpCode::DivF_R0_R1_X4:
            r0 = reg_div_f32(r0, r1); code++; goto Next;
        case OpCode::DivF_R0_R2_X4:
            r0 = reg_div_f32(r0, r2); code++; goto Next;
        case OpCode::DivF_R0_R3_X4:
            r0 = reg_div_f32(r0, r3); code++; goto Next;
        case OpCode::DivF_R0_R4_X4:
            r0 = reg_div_f32(r0, r4); code++; goto Next;
        case OpCode::DivF_R0_R5_X4:
            r0 = reg_div_f32(r0, r5); code++; goto Next;
        case OpCode::DivF_R0_R6_X4:
            r0 = reg_div_f32(r0, r6); code++; goto Next;
        case OpCode::DivF_R0_R7_X4:
            r0 = reg_div_f32(r0, r7); code++; goto Next;
        case OpCode::DivF_R1_R0_X4:
            r1 = reg_div_f32(r1, r0); code++; goto Next;
        case OpCode::DivF_R1_R1_X4:
            r1 = reg_div_f32(r1, r1); code++; goto Next;
        case OpCode::DivF_R1_R2_X4:
            r1 = reg_div_f32(r1, r2); code++; goto Next;
        case OpCode::DivF_R1_R3_X4:
            r1 = reg_div_f32(r1, r3); code++; goto Next;
        case OpCode::DivF_R1_R4_X4:
            r1 = reg_div_f32(r1, r4); code++; goto Next;
        case OpCode::DivF_R1_R5_X4:
            r1 = reg_div_f32(r1, r5); code++; goto Next;
        case OpCode::DivF_R1_R6_X4:
            r1 = reg_div_f32(r1, r6); code++; goto Next;
        case OpCode::DivF_R1_R7_X4:
            r1 = reg_div_f32(r1, r7); code++; goto Next;
        case OpCode::DivF_R2_R0_X4:
            r2 = reg_div_f32(r2, r0); code++; goto Next;
        case OpCode::DivF_R2_R1_X4:
            r2 = reg_div_f32(r2, r1); code++; goto Next;
        case OpCode::DivF_R2_R2_X4:
            r2 = reg_div_f32(r2, r2); code++; goto Next;
        case OpCode::DivF_R2_R3_X4:
            r2 = reg_div_f32(r2, r3); code++; goto Next;
        case OpCode::DivF_R2_R4_X4:
            r2 = reg_div_f32(r2, r4); code++; goto Next;
        case OpCode::DivF_R2_R5_X4:
            r2 = reg_div_f32(r2, r5); code++; goto Next;
        case OpCode::DivF_R2_R6_X4:
            r2 = reg_div_f32(r2, r6); code++; goto Next;
        case OpCode::DivF_R2_R7_X4:
            r2 = reg_div_f32(r2, r7); code++; goto Next;
        case OpCode::DivF_R3_R0_X4:
            r3 = reg_div_f32(r3, r0); code++; goto Next;
        case OpCode::DivF_R3_R1_X4:
            r3 = reg_div_f32(r3, r1); code++; goto Next;
        case OpCode::DivF_R3_R2_X4:
            r3 = reg_div_f32(r3, r2); code++; goto Next;
        case OpCode::DivF_R3_R3_X4:
            r3 = reg_div_f32(r3, r3); code++; goto Next;
        case OpCode::DivF_R3_R4_X4:
            r3 = reg_div_f32(r3, r4); code++; goto Next;
        case OpCode::DivF_R3_R5_X4:
            r3 = reg_div_f32(r3, r5); code++; goto Next;
        case OpCode::DivF_R3_R6_X4:
            r3 = reg_div_f32(r3, r6); code++; goto Next;
        case OpCode::DivF_R3_R7_X4:
            r3 = reg_div_f32(r3, r7); code++; goto Next;
        case OpCode::DivF_R4_R0_X4:
            r4 = reg_div_f32(r4, r0); code++; goto Next;
        case OpCode::DivF_R4_R1_X4:
            r4 = reg_div_f32(r4, r1); code++; goto Next;
        case OpCode::DivF_R4_R2_X4:
            r4 = reg_div_f32(r4, r2); code++; goto Next;
        case OpCode::DivF_R4_R3_X4:
            r4 = reg_div_f32(r4, r3); code++; goto Next;
        case OpCode::DivF_R4_R4_X4:
            r4 = reg_div_f32(r4, r4); code++; goto Next;
        case OpCode::DivF_R4_R5_X4:
            r4 = reg_div_f32(r4, r5); code++; goto Next;
        case OpCode::DivF_R4_R6_X4:
            r4 = reg_div_f32(r4, r6); code++; goto Next;
        case OpCode::DivF_R4_R7_X4:
            r4 = reg_div_f32(r4, r7); code++; goto Next;
        case OpCode::DivF_R5_R0_X4:
            r5 = reg_div_f32(r5, r0); code++; goto Next;
        case OpCode::DivF_R5_R1_X4:
            r5 = reg_div_f32(r5, r1); code++; goto Next;
        case OpCode::DivF_R5_R2_X4:
            r5 = reg_div_f32(r5, r2); code++; goto Next;
        case OpCode::DivF_R5_R3_X4:
            r5 = reg_div_f32(r5, r3); code++; goto Next;
        case OpCode::DivF_R5_R4_X4:
            r5 = reg_div_f32(r5, r4); code++; goto Next;
        case OpCode::DivF_R5_R5_X4:
            r5 = reg_div_f32(r5, r5); code++; goto Next;
        case OpCode::DivF_R5_R6_X4:
            r5 = reg_div_f32(r5, r6); code++; goto Next;
        case OpCode::DivF_R5_R7_X4:
            r5 = reg_div_f32(r5, r7); code++; goto Next;
        case OpCode::DivF_R6_R0_X4:
            r6 = reg_div_f32(r6, r0); code++; goto Next;
        case OpCode::DivF_R6_R1_X4:
            r6 = reg_div_f32(r6, r1); code++; goto Next;
        case OpCode::DivF_R6_R2_X4:
            r6 = reg_div_f32(r6, r2); code++; goto Next;
        case OpCode::DivF_R6_R3_X4:
            r6 = reg_div_f32(r6, r3); code++; goto Next;
        case OpCode::DivF_R6_R4_X4:
            r6 = reg_div_f32(r6, r4); code++; goto Next;
        case OpCode::DivF_R6_R5_X4:
            r6 = reg_div_f32(r6, r5); code++; goto Next;
        case OpCode::DivF_R6_R6_X4:
            r6 = reg_div_f32(r6, r6); code++; goto Next;
        case OpCode::DivF_R6_R7_X4:
            r6 = reg_div_f32(r6, r7); code++; goto Next;
        case OpCode::DivF_R7_R0_X4:
            r7 = reg_div_f32(r7, r0); code++; goto Next;
        case OpCode::DivF_R7_R1_X4:
            r7 = reg_div_f32(r7, r1); code++; goto Next;
        case OpCode::DivF_R7_R2_X4:
            r7 = reg_div_f32(r7, r2); code++; goto Next;
        case OpCode::DivF_R7_R3_X4:
            r7 = reg_div_f32(r7, r3); code++; goto Next;
        case OpCode::DivF_R7_R4_X4:
            r7 = reg_div_f32(r7, r4); code++; goto Next;
        case OpCode::DivF_R7_R5_X4:
            r7 = reg_div_f32(r7, r5); code++; goto Next;
        case OpCode::DivF_R7_R6_X4:
            r7 = reg_div_f32(r7, r6); code++; goto Next;
        case OpCode::DivF_R7_R7_X4:
            r7 = reg_div_f32(r7, r7); code++; goto Next;

        case OpCode::AddF_R0_R0_X8:
            r0 = reg_add_f64(r0, r0); code++; goto Next;
        case OpCode::AddF_R0_R1_X8:
            r0 = reg_add_f64(r0, r1); code++; goto Next;
        case OpCode::AddF_R0_R2_X8:
            r0 = reg_add_f64(r0, r2); code++; goto Next;
        case OpCode::AddF_R0_R3_X8:
            r0 = reg_add_f64(r0, r3); code++; goto Next;
        case OpCode::AddF_R0_R4_X8:
            r0 = reg_add_f64(r0, r4); code++; goto Next;
        case OpCode::AddF_R0_R5_X8:
            r0 = reg_add_f64(r0, r5); code++; goto Next;
        case OpCode::AddF_R0_R6_X8:
            r0 = reg_add_f64(r0, r6); code++; goto Next;
        case OpCode::AddF_R0_R7_X8:
            r0 = reg_add_f64(r0, r7); code++; goto Next;
        case OpCode::AddF_R1_R0_X8:
            r1 = reg_add_f64(r1, r0); code++; goto Next;
        case OpCode::AddF_R1_R1_X8:
            r1 = reg_add_f64(r1, r1); code++; goto Next;
        case OpCode::AddF_R1_R2_X8:
            r1 = reg_add_f64(r1, r2); code++; goto Next;
        case OpCode::AddF_R1_R3_X8:
            r1 = reg_add_f64(r1, r3); code++; goto Next;
        case OpCode::AddF_R1_R4_X8:
            r1 = reg_add_f64(r1, r4); code++; goto Next;
        case OpCode::AddF_R1_R5_X8:
            r1 = reg_add_f64(r1, r5); code++; goto Next;
        case OpCode::AddF_R1_R6_X8:
            r1 = reg_add_f64(r1, r6); code++; goto Next;
        case OpCode::AddF_R1_R7_X8:
            r1 = reg_add_f64(r1, r7); code++; goto Next;
        case OpCode::AddF_R2_R0_X8:
            r2 = reg_add_f64(r2, r0); code++; goto Next;
        case OpCode::AddF_R2_R1_X8:
            r2 = reg_add_f64(r2, r1); code++; goto Next;
        case OpCode::AddF_R2_R2_X8:
            r2 = reg_add_f64(r2, r2); code++; goto Next;
        case OpCode::AddF_R2_R3_X8:
            r2 = reg_add_f64(r2, r3); code++; goto Next;
        case OpCode::AddF_R2_R4_X8:
            r2 = reg_add_f64(r2, r4); code++; goto Next;
        case OpCode::AddF_R2_R5_X8:
            r2 = reg_add_f64(r2, r5); code++; goto Next;
        case OpCode::AddF_R2_R6_X8:
            r2 = reg_add_f64(r2, r6); code++; goto Next;
        case OpCode::AddF_R2_R7_X8:
            r2 = reg_add_f64(r2, r7); code++; goto Next;
        case OpCode::AddF_R3_R0_X8:
            r3 = reg_add_f64(r3, r0); code++; goto Next;
        case OpCode::AddF_R3_R1_X8:
            r3 = reg_add_f64(r3, r1); code++; goto Next;
        case OpCode::AddF_R3_R2_X8:
            r3 = reg_add_f64(r3, r2); code++; goto Next;
        case OpCode::AddF_R3_R3_X8:
            r3 = reg_add_f64(r3, r3); code++; goto Next;
        case OpCode::AddF_R3_R4_X8:
            r3 = reg_add_f64(r3, r4); code++; goto Next;
        case OpCode::AddF_R3_R5_X8:
            r3 = reg_add_f64(r3, r5); code++; goto Next;
        case OpCode::AddF_R3_R6_X8:
            r3 = reg_add_f64(r3, r6); code++; goto Next;
        case OpCode::AddF_R3_R7_X8:
            r3 = reg_add_f64(r3, r7); code++; goto Next;
        case OpCode::AddF_R4_R0_X8:
            r4 = reg_add_f64(r4, r0); code++; goto Next;
        case OpCode::AddF_R4_R1_X8:
            r4 = reg_add_f64(r4, r1); code++; goto Next;
        case OpCode::AddF_R4_R2_X8:
            r4 = reg_add_f64(r4, r2); code++; goto Next;
        case OpCode::AddF_R4_R3_X8:
            r4 = reg_add_f64(r4, r3); code++; goto Next;
        case OpCode::AddF_R4_R4_X8:
            r4 = reg_add_f64(r4, r4); code++; goto Next;
        case OpCode::AddF_R4_R5_X8:
            r4 = reg_add_f64(r4, r5); code++; goto Next;
        case OpCode::AddF_R4_R6_X8:
            r4 = reg_add_f64(r4, r6); code++; goto Next;
        case OpCode::AddF_R4_R7_X8:
            r4 = reg_add_f64(r4, r7); code++; goto Next;
        case OpCode::AddF_R5_R0_X8:
            r5 = reg_add_f64(r5, r0); code++; goto Next;
        case OpCode::AddF_R5_R1_X8:
            r5 = reg_add_f64(r5, r1); code++; goto Next;
        case OpCode::AddF_R5_R2_X8:
            r5 = reg_add_f64(r5, r2); code++; goto Next;
        case OpCode::AddF_R5_R3_X8:
            r5 = reg_add_f64(r5, r3); code++; goto Next;
        case OpCode::AddF_R5_R4_X8:
            r5 = reg_add_f64(r5, r4); code++; goto Next;
        case OpCode::AddF_R5_R5_X8:
            r5 = reg_add_f64(r5, r5); code++; goto Next;
        case OpCode::AddF_R5_R6_X8:
            r5 = reg_add_f64(r5, r6); code++; goto Next;
        case OpCode::AddF_R5_R7_X8:
            r5 = reg_add_f64(r5, r7); code++; goto Next;
        case OpCode::AddF_R6_R0_X8:
            r6 = reg_add_f64(r6, r0); code++; goto Next;
        case OpCode::AddF_R6_R1_X8:
            r6 = reg_add_f64(r6, r1); code++; goto Next;
        case OpCode::AddF_R6_R2_X8:
            r6 = reg_add_f64(r6, r2); code++; goto Next;
        case OpCode::AddF_R6_R3_X8:
            r6 = reg_add_f64(r6, r3); code++; goto Next;
        case OpCode::AddF_R6_R4_X8:
            r6 = reg_add_f64(r6, r4); code++; goto Next;
        case OpCode::AddF_R6_R5_X8:
            r6 = reg_add_f64(r6, r5); code++; goto Next;
        case OpCode::AddF_R6_R6_X8:
            r6 = reg_add_f64(r6, r6); code++; goto Next;
        case OpCode::AddF_R6_R7_X8:
            r6 = reg_add_f64(r6, r7); code++; goto Next;
        case OpCode::AddF_R7_R0_X8:
            r7 = reg_add_f64(r7, r0); code++; goto Next;
        case OpCode::AddF_R7_R1_X8:
            r7 = reg_add_f64(r7, r1); code++; goto Next;
        case OpCode::AddF_R7_R2_X8:
            r7 = reg_add_f64(r7, r2); code++; goto Next;
        case OpCode::AddF_R7_R3_X8:
            r7 = reg_add_f64(r7, r3); code++; goto Next;
        case OpCode::AddF_R7_R4_X8:
            r7 = reg_add_f64(r7, r4); code++; goto Next;
        case OpCode::AddF_R7_R5_X8:
            r7 = reg_add_f64(r7, r5); code++; goto Next;
        case OpCode::AddF_R7_R6_X8:
            r7 = reg_add_f64(r7, r6); code++; goto Next;
        case OpCode::AddF_R7_R7_X8:
            r7 = reg_add_f64(r7, r7); code++; goto Next;

        case OpCode::SubF_R0_R0_X8:
            r0 = reg_sub_f64(r0, r0); code++; goto Next;
        case OpCode::SubF_R0_R1_X8:
            r0 = reg_sub_f64(r0, r1); code++; goto Next;
        case OpCode::SubF_R0_R2_X8:
            r0 = reg_sub_f64(r0, r2); code++; goto Next;
        case OpCode::SubF_R0_R3_X8:
            r0 = reg_sub_f64(r0, r3); code++; goto Next;
        case OpCode::SubF_R0_R4_X8:
            r0 = reg_sub_f64(r0, r4); code++; goto Next;
        case OpCode::SubF_R0_R5_X8:
            r0 = reg_sub_f64(r0, r5); code++; goto Next;
        case OpCode::SubF_R0_R6_X8:
            r0 = reg_sub_f64(r0, r6); code++; goto Next;
        case OpCode::SubF_R0_R7_X8:
            r0 = reg_sub_f64(r0, r7); code++; goto Next;
        case OpCode::SubF_R1_R0_X8:
            r1 = reg_sub_f64(r1, r0); code++; goto Next;
        case OpCode::SubF_R1_R1_X8:
            r1 = reg_sub_f64(r1, r1); code++; goto Next;
        case OpCode::SubF_R1_R2_X8:
            r1 = reg_sub_f64(r1, r2); code++; goto Next;
        case OpCode::SubF_R1_R3_X8:
            r1 = reg_sub_f64(r1, r3); code++; goto Next;
        case OpCode::SubF_R1_R4_X8:
            r1 = reg_sub_f64(r1, r4); code++; goto Next;
        case OpCode::SubF_R1_R5_X8:
            r1 = reg_sub_f64(r1, r5); code++; goto Next;
        case OpCode::SubF_R1_R6_X8:
            r1 = reg_sub_f64(r1, r6); code++; goto Next;
        case OpCode::SubF_R1_R7_X8:
            r1 = reg_sub_f64(r1, r7); code++; goto Next;
        case OpCode::SubF_R2_R0_X8:
            r2 = reg_sub_f64(r2, r0); code++; goto Next;
        case OpCode::SubF_R2_R1_X8:
            r2 = reg_sub_f64(r2, r1); code++; goto Next;
        case OpCode::SubF_R2_R2_X8:
            r2 = reg_sub_f64(r2, r2); code++; goto Next;
        case OpCode::SubF_R2_R3_X8:
            r2 = reg_sub_f64(r2, r3); code++; goto Next;
        case OpCode::SubF_R2_R4_X8:
            r2 = reg_sub_f64(r2, r4); code++; goto Next;
        case OpCode::SubF_R2_R5_X8:
            r2 = reg_sub_f64(r2, r5); code++; goto Next;
        case OpCode::SubF_R2_R6_X8:
            r2 = reg_sub_f64(r2, r6); code++; goto Next;
        case OpCode::SubF_R2_R7_X8:
            r2 = reg_sub_f64(r2, r7); code++; goto Next;
        case OpCode::SubF_R3_R0_X8:
            r3 = reg_sub_f64(r3, r0); code++; goto Next;
        case OpCode::SubF_R3_R1_X8:
            r3 = reg_sub_f64(r3, r1); code++; goto Next;
        case OpCode::SubF_R3_R2_X8:
            r3 = reg_sub_f64(r3, r2); code++; goto Next;
        case OpCode::SubF_R3_R3_X8:
            r3 = reg_sub_f64(r3, r3); code++; goto Next;
        case OpCode::SubF_R3_R4_X8:
            r3 = reg_sub_f64(r3, r4); code++; goto Next;
        case OpCode::SubF_R3_R5_X8:
            r3 = reg_sub_f64(r3, r5); code++; goto Next;
        case OpCode::SubF_R3_R6_X8:
            r3 = reg_sub_f64(r3, r6); code++; goto Next;
        case OpCode::SubF_R3_R7_X8:
            r3 = reg_sub_f64(r3, r7); code++; goto Next;
        case OpCode::SubF_R4_R0_X8:
            r4 = reg_sub_f64(r4, r0); code++; goto Next;
        case OpCode::SubF_R4_R1_X8:
            r4 = reg_sub_f64(r4, r1); code++; goto Next;
        case OpCode::SubF_R4_R2_X8:
            r4 = reg_sub_f64(r4, r2); code++; goto Next;
        case OpCode::SubF_R4_R3_X8:
            r4 = reg_sub_f64(r4, r3); code++; goto Next;
        case OpCode::SubF_R4_R4_X8:
            r4 = reg_sub_f64(r4, r4); code++; goto Next;
        case OpCode::SubF_R4_R5_X8:
            r4 = reg_sub_f64(r4, r5); code++; goto Next;
        case OpCode::SubF_R4_R6_X8:
            r4 = reg_sub_f64(r4, r6); code++; goto Next;
        case OpCode::SubF_R4_R7_X8:
            r4 = reg_sub_f64(r4, r7); code++; goto Next;
        case OpCode::SubF_R5_R0_X8:
            r5 = reg_sub_f64(r5, r0); code++; goto Next;
        case OpCode::SubF_R5_R1_X8:
            r5 = reg_sub_f64(r5, r1); code++; goto Next;
        case OpCode::SubF_R5_R2_X8:
            r5 = reg_sub_f64(r5, r2); code++; goto Next;
        case OpCode::SubF_R5_R3_X8:
            r5 = reg_sub_f64(r5, r3); code++; goto Next;
        case OpCode::SubF_R5_R4_X8:
            r5 = reg_sub_f64(r5, r4); code++; goto Next;
        case OpCode::SubF_R5_R5_X8:
            r5 = reg_sub_f64(r5, r5); code++; goto Next;
        case OpCode::SubF_R5_R6_X8:
            r5 = reg_sub_f64(r5, r6); code++; goto Next;
        case OpCode::SubF_R5_R7_X8:
            r5 = reg_sub_f64(r5, r7); code++; goto Next;
        case OpCode::SubF_R6_R0_X8:
            r6 = reg_sub_f64(r6, r0); code++; goto Next;
        case OpCode::SubF_R6_R1_X8:
            r6 = reg_sub_f64(r6, r1); code++; goto Next;
        case OpCode::SubF_R6_R2_X8:
            r6 = reg_sub_f64(r6, r2); code++; goto Next;
        case OpCode::SubF_R6_R3_X8:
            r6 = reg_sub_f64(r6, r3); code++; goto Next;
        case OpCode::SubF_R6_R4_X8:
            r6 = reg_sub_f64(r6, r4); code++; goto Next;
        case OpCode::SubF_R6_R5_X8:
            r6 = reg_sub_f64(r6, r5); code++; goto Next;
        case OpCode::SubF_R6_R6_X8:
            r6 = reg_sub_f64(r6, r6); code++; goto Next;
        case OpCode::SubF_R6_R7_X8:
            r6 = reg_sub_f64(r6, r7); code++; goto Next;
        case OpCode::SubF_R7_R0_X8:
            r7 = reg_sub_f64(r7, r0); code++; goto Next;
        case OpCode::SubF_R7_R1_X8:
            r7 = reg_sub_f64(r7, r1); code++; goto Next;
        case OpCode::SubF_R7_R2_X8:
            r7 = reg_sub_f64(r7, r2); code++; goto Next;
        case OpCode::SubF_R7_R3_X8:
            r7 = reg_sub_f64(r7, r3); code++; goto Next;
        case OpCode::SubF_R7_R4_X8:
            r7 = reg_sub_f64(r7, r4); code++; goto Next;
        case OpCode::SubF_R7_R5_X8:
            r7 = reg_sub_f64(r7, r5); code++; goto Next;
        case OpCode::SubF_R7_R6_X8:
            r7 = reg_sub_f64(r7, r6); code++; goto Next;
        case OpCode::SubF_R7_R7_X8:
            r7 = reg_sub_f64(r7, r7); code++; goto Next;

        case OpCode::MulF_R0_R0_X8:
            r0 = reg_mul_f64(r0, r0); code++; goto Next;
        case OpCode::MulF_R0_R1_X8:
            r0 = reg_mul_f64(r0, r1); code++; goto Next;
        case OpCode::MulF_R0_R2_X8:
            r0 = reg_mul_f64(r0, r2); code++; goto Next;
        case OpCode::MulF_R0_R3_X8:
            r0 = reg_mul_f64(r0, r3); code++; goto Next;
        case OpCode::MulF_R0_R4_X8:
            r0 = reg_mul_f64(r0, r4); code++; goto Next;
        case OpCode::MulF_R0_R5_X8:
            r0 = reg_mul_f64(r0, r5); code++; goto Next;
        case OpCode::MulF_R0_R6_X8:
            r0 = reg_mul_f64(r0, r6); code++; goto Next;
        case OpCode::MulF_R0_R7_X8:
            r0 = reg_mul_f64(r0, r7); code++; goto Next;
        case OpCode::MulF_R1_R0_X8:
            r1 = reg_mul_f64(r1, r0); code++; goto Next;
        case OpCode::MulF_R1_R1_X8:
            r1 = reg_mul_f64(r1, r1); code++; goto Next;
        case OpCode::MulF_R1_R2_X8:
            r1 = reg_mul_f64(r1, r2); code++; goto Next;
        case OpCode::MulF_R1_R3_X8:
            r1 = reg_mul_f64(r1, r3); code++; goto Next;
        case OpCode::MulF_R1_R4_X8:
            r1 = reg_mul_f64(r1, r4); code++; goto Next;
        case OpCode::MulF_R1_R5_X8:
            r1 = reg_mul_f64(r1, r5); code++; goto Next;
        case OpCode::MulF_R1_R6_X8:
            r1 = reg_mul_f64(r1, r6); code++; goto Next;
        case OpCode::MulF_R1_R7_X8:
            r1 = reg_mul_f64(r1, r7); code++; goto Next;
        case OpCode::MulF_R2_R0_X8:
            r2 = reg_mul_f64(r2, r0); code++; goto Next;
        case OpCode::MulF_R2_R1_X8:
            r2 = reg_mul_f64(r2, r1); code++; goto Next;
        case OpCode::MulF_R2_R2_X8:
            r2 = reg_mul_f64(r2, r2); code++; goto Next;
        case OpCode::MulF_R2_R3_X8:
            r2 = reg_mul_f64(r2, r3); code++; goto Next;
        case OpCode::MulF_R2_R4_X8:
            r2 = reg_mul_f64(r2, r4); code++; goto Next;
        case OpCode::MulF_R2_R5_X8:
            r2 = reg_mul_f64(r2, r5); code++; goto Next;
        case OpCode::MulF_R2_R6_X8:
            r2 = reg_mul_f64(r2, r6); code++; goto Next;
        case OpCode::MulF_R2_R7_X8:
            r2 = reg_mul_f64(r2, r7); code++; goto Next;
        case OpCode::MulF_R3_R0_X8:
            r3 = reg_mul_f64(r3, r0); code++; goto Next;
        case OpCode::MulF_R3_R1_X8:
            r3 = reg_mul_f64(r3, r1); code++; goto Next;
        case OpCode::MulF_R3_R2_X8:
            r3 = reg_mul_f64(r3, r2); code++; goto Next;
        case OpCode::MulF_R3_R3_X8:
            r3 = reg_mul_f64(r3, r3); code++; goto Next;
        case OpCode::MulF_R3_R4_X8:
            r3 = reg_mul_f64(r3, r4); code++; goto Next;
        case OpCode::MulF_R3_R5_X8:
            r3 = reg_mul_f64(r3, r5); code++; goto Next;
        case OpCode::MulF_R3_R6_X8:
            r3 = reg_mul_f64(r3, r6); code++; goto Next;
        case OpCode::MulF_R3_R7_X8:
            r3 = reg_mul_f64(r3, r7); code++; goto Next;
        case OpCode::MulF_R4_R0_X8:
            r4 = reg_mul_f64(r4, r0); code++; goto Next;
        case OpCode::MulF_R4_R1_X8:
            r4 = reg_mul_f64(r4, r1); code++; goto Next;
        case OpCode::MulF_R4_R2_X8:
            r4 = reg_mul_f64(r4, r2); code++; goto Next;
        case OpCode::MulF_R4_R3_X8:
            r4 = reg_mul_f64(r4, r3); code++; goto Next;
        case OpCode::MulF_R4_R4_X8:
            r4 = reg_mul_f64(r4, r4); code++; goto Next;
        case OpCode::MulF_R4_R5_X8:
            r4 = reg_mul_f64(r4, r5); code++; goto Next;
        case OpCode::MulF_R4_R6_X8:
            r4 = reg_mul_f64(r4, r6); code++; goto Next;
        case OpCode::MulF_R4_R7_X8:
            r4 = reg_mul_f64(r4, r7); code++; goto Next;
        case OpCode::MulF_R5_R0_X8:
            r5 = reg_mul_f64(r5, r0); code++; goto Next;
        case OpCode::MulF_R5_R1_X8:
            r5 = reg_mul_f64(r5, r1); code++; goto Next;
        case OpCode::MulF_R5_R2_X8:
            r5 = reg_mul_f64(r5, r2); code++; goto Next;
        case OpCode::MulF_R5_R3_X8:
            r5 = reg_mul_f64(r5, r3); code++; goto Next;
        case OpCode::MulF_R5_R4_X8:
            r5 = reg_mul_f64(r5, r4); code++; goto Next;
        case OpCode::MulF_R5_R5_X8:
            r5 = reg_mul_f64(r5, r5); code++; goto Next;
        case OpCode::MulF_R5_R6_X8:
            r5 = reg_mul_f64(r5, r6); code++; goto Next;
        case OpCode::MulF_R5_R7_X8:
            r5 = reg_mul_f64(r5, r7); code++; goto Next;
        case OpCode::MulF_R6_R0_X8:
            r6 = reg_mul_f64(r6, r0); code++; goto Next;
        case OpCode::MulF_R6_R1_X8:
            r6 = reg_mul_f64(r6, r1); code++; goto Next;
        case OpCode::MulF_R6_R2_X8:
            r6 = reg_mul_f64(r6, r2); code++; goto Next;
        case OpCode::MulF_R6_R3_X8:
            r6 = reg_mul_f64(r6, r3); code++; goto Next;
        case OpCode::MulF_R6_R4_X8:
            r6 = reg_mul_f64(r6, r4); code++; goto Next;
        case OpCode::MulF_R6_R5_X8:
            r6 = reg_mul_f64(r6, r5); code++; goto Next;
        case OpCode::MulF_R6_R6_X8:
            r6 = reg_mul_f64(r6, r6); code++; goto Next;
        case OpCode::MulF_R6_R7_X8:
            r6 = reg_mul_f64(r6, r7); code++; goto Next;
        case OpCode::MulF_R7_R0_X8:
            r7 = reg_mul_f64(r7, r0); code++; goto Next;
        case OpCode::MulF_R7_R1_X8:
            r7 = reg_mul_f64(r7, r1); code++; goto Next;
        case OpCode::MulF_R7_R2_X8:
            r7 = reg_mul_f64(r7, r2); code++; goto Next;
        case OpCode::MulF_R7_R3_X8:
            r7 = reg_mul_f64(r7, r3); code++; goto Next;
        case OpCode::MulF_R7_R4_X8:
            r7 = reg_mul_f64(r7, r4); code++; goto Next;
        case OpCode::MulF_R7_R5_X8:
            r7 = reg_mul_f64(r7, r5); code++; goto Next;
        case OpCode::MulF_R7_R6_X8:
            r7 = reg_mul_f64(r7, r6); code++; goto Next;
        case OpCode::MulF_R7_R7_X8:
            r7 = reg_mul_f64(r7, r7); code++; goto Next;

        case OpCode::DivF_R0_R0_X8:
            r0 = reg_div_f64(r0, r0); code++; goto Next;
        case OpCode::DivF_R0_R1_X8:
            r0 = reg_div_f64(r0, r1); code++; goto Next;
        case OpCode::DivF_R0_R2_X8:
            r0 = reg_div_f64(r0, r2); code++; goto Next;
        case OpCode::DivF_R0_R3_X8:
            r0 = reg_div_f64(r0, r3); code++; goto Next;
        case OpCode::DivF_R0_R4_X8:
            r0 = reg_div_f64(r0, r4); code++; goto Next;
        case OpCode::DivF_R0_R5_X8:
            r0 = reg_div_f64(r0, r5); code++; goto Next;
        case OpCode::DivF_R0_R6_X8:
            r0 = reg_div_f64(r0, r6); code++; goto Next;
        case OpCode::DivF_R0_R7_X8:
            r0 = reg_div_f64(r0, r7); code++; goto Next;
        case OpCode::DivF_R1_R0_X8:
            r1 = reg_div_f64(r1, r0); code++; goto Next;
        case OpCode::DivF_R1_R1_X8:
            r1 = reg_div_f64(r1, r1); code++; goto Next;
        case OpCode::DivF_R1_R2_X8:
            r1 = reg_div_f64(r1, r2); code++; goto Next;
        case OpCode::DivF_R1_R3_X8:
            r1 = reg_div_f64(r1, r3); code++; goto Next;
        case OpCode::DivF_R1_R4_X8:
            r1 = reg_div_f64(r1, r4); code++; goto Next;
        case OpCode::DivF_R1_R5_X8:
            r1 = reg_div_f64(r1, r5); code++; goto Next;
        case OpCode::DivF_R1_R6_X8:
            r1 = reg_div_f64(r1, r6); code++; goto Next;
        case OpCode::DivF_R1_R7_X8:
            r1 = reg_div_f64(r1, r7); code++; goto Next;
        case OpCode::DivF_R2_R0_X8:
            r2 = reg_div_f64(r2, r0); code++; goto Next;
        case OpCode::DivF_R2_R1_X8:
            r2 = reg_div_f64(r2, r1); code++; goto Next;
        case OpCode::DivF_R2_R2_X8:
            r2 = reg_div_f64(r2, r2); code++; goto Next;
        case OpCode::DivF_R2_R3_X8:
            r2 = reg_div_f64(r2, r3); code++; goto Next;
        case OpCode::DivF_R2_R4_X8:
            r2 = reg_div_f64(r2, r4); code++; goto Next;
        case OpCode::DivF_R2_R5_X8:
            r2 = reg_div_f64(r2, r5); code++; goto Next;
        case OpCode::DivF_R2_R6_X8:
            r2 = reg_div_f64(r2, r6); code++; goto Next;
        case OpCode::DivF_R2_R7_X8:
            r2 = reg_div_f64(r2, r7); code++; goto Next;
        case OpCode::DivF_R3_R0_X8:
            r3 = reg_div_f64(r3, r0); code++; goto Next;
        case OpCode::DivF_R3_R1_X8:
            r3 = reg_div_f64(r3, r1); code++; goto Next;
        case OpCode::DivF_R3_R2_X8:
            r3 = reg_div_f64(r3, r2); code++; goto Next;
        case OpCode::DivF_R3_R3_X8:
            r3 = reg_div_f64(r3, r3); code++; goto Next;
        case OpCode::DivF_R3_R4_X8:
            r3 = reg_div_f64(r3, r4); code++; goto Next;
        case OpCode::DivF_R3_R5_X8:
            r3 = reg_div_f64(r3, r5); code++; goto Next;
        case OpCode::DivF_R3_R6_X8:
            r3 = reg_div_f64(r3, r6); code++; goto Next;
        case OpCode::DivF_R3_R7_X8:
            r3 = reg_div_f64(r3, r7); code++; goto Next;
        case OpCode::DivF_R4_R0_X8:
            r4 = reg_div_f64(r4, r0); code++; goto Next;
        case OpCode::DivF_R4_R1_X8:
            r4 = reg_div_f64(r4, r1); code++; goto Next;
        case OpCode::DivF_R4_R2_X8:
            r4 = reg_div_f64(r4, r2); code++; goto Next;
        case OpCode::DivF_R4_R3_X8:
            r4 = reg_div_f64(r4, r3); code++; goto Next;
        case OpCode::DivF_R4_R4_X8:
            r4 = reg_div_f64(r4, r4); code++; goto Next;
        case OpCode::DivF_R4_R5_X8:
            r4 = reg_div_f64(r4, r5); code++; goto Next;
        case OpCode::DivF_R4_R6_X8:
            r4 = reg_div_f64(r4, r6); code++; goto Next;
        case OpCode::DivF_R4_R7_X8:
            r4 = reg_div_f64(r4, r7); code++; goto Next;
        case OpCode::DivF_R5_R0_X8:
            r5 = reg_div_f64(r5, r0); code++; goto Next;
        case OpCode::DivF_R5_R1_X8:
            r5 = reg_div_f64(r5, r1); code++; goto Next;
        case OpCode::DivF_R5_R2_X8:
            r5 = reg_div_f64(r5, r2); code++; goto Next;
        case OpCode::DivF_R5_R3_X8:
            r5 = reg_div_f64(r5, r3); code++; goto Next;
        case OpCode::DivF_R5_R4_X8:
            r5 = reg_div_f64(r5, r4); code++; goto Next;
        case OpCode::DivF_R5_R5_X8:
            r5 = reg_div_f64(r5, r5); code++; goto Next;
        case OpCode::DivF_R5_R6_X8:
            r5 = reg_div_f64(r5, r6); code++; goto Next;
        case OpCode::DivF_R5_R7_X8:
            r5 = reg_div_f64(r5, r7); code++; goto Next;
        case OpCode::DivF_R6_R0_X8:
            r6 = reg_div_f64(r6, r0); code++; goto Next;
        case OpCode::DivF_R6_R1_X8:
            r6 = reg_div_f64(r6, r1); code++; goto Next;
        case OpCode::DivF_R6_R2_X8:
            r6 = reg_div_f64(r6, r2); code++; goto Next;
        case OpCode::DivF_R6_R3_X8:
            r6 = reg_div_f64(r6, r3); code++; goto Next;
        case OpCode::DivF_R6_R4_X8:
            r6 = reg_div_f64(r6, r4); code++; goto Next;
        case OpCode::DivF_R6_R5_X8:
            r6 = reg_div_f64(r6, r5); code++; goto Next;
        case OpCode::DivF_R6_R6_X8:
            r6 = reg_div_f64(r6, r6); code++; goto Next;
        case OpCode::DivF_R6_R7_X8:
            r6 = reg_div_f64(r6, r7); code++; goto Next;
        case OpCode::DivF_R7_R0_X8:
            r7 = reg_div_f64(r7, r0); code++; goto Next;
        case OpCode::DivF_R7_R1_X8:
            r7 = reg_div_f64(r7, r1); code++; goto Next;
        case OpCode::DivF_R7_R2_X8:
            r7 = reg_div_f64(r7, r2); code++; goto Next;
        case OpCode::DivF_R7_R3_X8:
            r7 = reg_div_f64(r7, r3); code++; goto Next;
        case OpCode::DivF_R7_R4_X8:
            r7 = reg_div_f64(r7, r4); code++; goto Next;
        case OpCode::DivF_R7_R5_X8:
            r7 = reg_div_f64(r7, r5); code++; goto Next;
        case OpCode::DivF_R7_R6_X8:
            r7 = reg_div_f64(r7, r6); code++; goto Next;
        case OpCode::DivF_R7_R7_X8:
            r7 = reg_div_f64(r7, r7); code++; goto Next;
        case OpCode::Br: // <op> <u2 op offset>
            code += *(code + 1); goto Next;

        case OpCode::BTrue_R0: // <op> <u2 op offset>
            code += reg_get_u64(r0) == 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BTrue_R1: // <op> <u2 op offset>
            code += reg_get_u64(r1) == 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BTrue_R2: // <op> <u2 op offset>
            code += reg_get_u64(r2) == 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BTrue_R3: // <op> <u2 op offset>
            code += reg_get_u64(r3) == 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BTrue_R4: // <op> <u2 op offset>
            code += reg_get_u64(r4) == 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BTrue_R5: // <op> <u2 op offset>
            code += reg_get_u64(r5) == 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BTrue_R6: // <op> <u2 op offset>
            code += reg_get_u64(r6) == 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BTrue_R7: // <op> <u2 op offset>
            code += reg_get_u64(r7) == 0 ? 2 : *(code + 1); goto Next;

        case OpCode::BFalse_R0: // <op> <u2 op offset>
            code += reg_get_u64(r0) != 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BFalse_R1: // <op> <u2 op offset>
            code += reg_get_u64(r1) != 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BFalse_R2: // <op> <u2 op offset>
            code += reg_get_u64(r2) != 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BFalse_R3: // <op> <u2 op offset>
            code += reg_get_u64(r3) != 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BFalse_R4: // <op> <u2 op offset>
            code += reg_get_u64(r4) != 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BFalse_R5: // <op> <u2 op offset>
            code += reg_get_u64(r5) != 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BFalse_R6: // <op> <u2 op offset>
            code += reg_get_u64(r6) != 0 ? 2 : *(code + 1); goto Next;
        case OpCode::BFalse_R7: // <op> <u2 op offset>
            code += reg_get_u64(r7) != 0 ? 2 : *(code + 1); goto Next;

        case OpCode::BeqI_R0_R0: // <op> <u2 op offset>
            code += reg_get_u64(r0) == reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R0_R1: // <op> <u2 op offset>
            code += reg_get_u64(r0) == reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R0_R2: // <op> <u2 op offset>
            code += reg_get_u64(r0) == reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R0_R3: // <op> <u2 op offset>
            code += reg_get_u64(r0) == reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R0_R4: // <op> <u2 op offset>
            code += reg_get_u64(r0) == reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R0_R5: // <op> <u2 op offset>
            code += reg_get_u64(r0) == reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R0_R6: // <op> <u2 op offset>
            code += reg_get_u64(r0) == reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R0_R7: // <op> <u2 op offset>
            code += reg_get_u64(r0) == reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R1_R0: // <op> <u2 op offset>
            code += reg_get_u64(r1) == reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R1_R1: // <op> <u2 op offset>
            code += reg_get_u64(r1) == reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R1_R2: // <op> <u2 op offset>
            code += reg_get_u64(r1) == reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R1_R3: // <op> <u2 op offset>
            code += reg_get_u64(r1) == reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R1_R4: // <op> <u2 op offset>
            code += reg_get_u64(r1) == reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R1_R5: // <op> <u2 op offset>
            code += reg_get_u64(r1) == reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R1_R6: // <op> <u2 op offset>
            code += reg_get_u64(r1) == reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R1_R7: // <op> <u2 op offset>
            code += reg_get_u64(r1) == reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R2_R0: // <op> <u2 op offset>
            code += reg_get_u64(r2) == reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R2_R1: // <op> <u2 op offset>
            code += reg_get_u64(r2) == reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R2_R2: // <op> <u2 op offset>
            code += reg_get_u64(r2) == reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R2_R3: // <op> <u2 op offset>
            code += reg_get_u64(r2) == reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R2_R4: // <op> <u2 op offset>
            code += reg_get_u64(r2) == reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R2_R5: // <op> <u2 op offset>
            code += reg_get_u64(r2) == reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R2_R6: // <op> <u2 op offset>
            code += reg_get_u64(r2) == reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R2_R7: // <op> <u2 op offset>
            code += reg_get_u64(r2) == reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R3_R0: // <op> <u2 op offset>
            code += reg_get_u64(r3) == reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R3_R1: // <op> <u2 op offset>
            code += reg_get_u64(r3) == reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R3_R2: // <op> <u2 op offset>
            code += reg_get_u64(r3) == reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R3_R3: // <op> <u2 op offset>
            code += reg_get_u64(r3) == reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R3_R4: // <op> <u2 op offset>
            code += reg_get_u64(r3) == reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R3_R5: // <op> <u2 op offset>
            code += reg_get_u64(r3) == reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R3_R6: // <op> <u2 op offset>
            code += reg_get_u64(r3) == reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R3_R7: // <op> <u2 op offset>
            code += reg_get_u64(r3) == reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R4_R0: // <op> <u2 op offset>
            code += reg_get_u64(r4) == reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R4_R1: // <op> <u2 op offset>
            code += reg_get_u64(r4) == reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R4_R2: // <op> <u2 op offset>
            code += reg_get_u64(r4) == reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R4_R3: // <op> <u2 op offset>
            code += reg_get_u64(r4) == reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R4_R4: // <op> <u2 op offset>
            code += reg_get_u64(r4) == reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R4_R5: // <op> <u2 op offset>
            code += reg_get_u64(r4) == reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R4_R6: // <op> <u2 op offset>
            code += reg_get_u64(r4) == reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R4_R7: // <op> <u2 op offset>
            code += reg_get_u64(r4) == reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R5_R0: // <op> <u2 op offset>
            code += reg_get_u64(r5) == reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R5_R1: // <op> <u2 op offset>
            code += reg_get_u64(r5) == reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R5_R2: // <op> <u2 op offset>
            code += reg_get_u64(r5) == reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R5_R3: // <op> <u2 op offset>
            code += reg_get_u64(r5) == reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R5_R4: // <op> <u2 op offset>
            code += reg_get_u64(r5) == reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R5_R5: // <op> <u2 op offset>
            code += reg_get_u64(r5) == reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R5_R6: // <op> <u2 op offset>
            code += reg_get_u64(r5) == reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R5_R7: // <op> <u2 op offset>
            code += reg_get_u64(r5) == reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R6_R0: // <op> <u2 op offset>
            code += reg_get_u64(r6) == reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R6_R1: // <op> <u2 op offset>
            code += reg_get_u64(r6) == reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R6_R2: // <op> <u2 op offset>
            code += reg_get_u64(r6) == reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R6_R3: // <op> <u2 op offset>
            code += reg_get_u64(r6) == reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R6_R4: // <op> <u2 op offset>
            code += reg_get_u64(r6) == reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R6_R5: // <op> <u2 op offset>
            code += reg_get_u64(r6) == reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R6_R6: // <op> <u2 op offset>
            code += reg_get_u64(r6) == reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R6_R7: // <op> <u2 op offset>
            code += reg_get_u64(r6) == reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R7_R0: // <op> <u2 op offset>
            code += reg_get_u64(r7) == reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R7_R1: // <op> <u2 op offset>
            code += reg_get_u64(r7) == reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R7_R2: // <op> <u2 op offset>
            code += reg_get_u64(r7) == reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R7_R3: // <op> <u2 op offset>
            code += reg_get_u64(r7) == reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R7_R4: // <op> <u2 op offset>
            code += reg_get_u64(r7) == reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R7_R5: // <op> <u2 op offset>
            code += reg_get_u64(r7) == reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R7_R6: // <op> <u2 op offset>
            code += reg_get_u64(r7) == reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqI_R7_R7: // <op> <u2 op offset>
            code += reg_get_u64(r7) == reg_get_u64(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BneI_R0_R0: // <op> <u2 op offset>
            code += reg_get_u64(r0) != reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R0_R1: // <op> <u2 op offset>
            code += reg_get_u64(r0) != reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R0_R2: // <op> <u2 op offset>
            code += reg_get_u64(r0) != reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R0_R3: // <op> <u2 op offset>
            code += reg_get_u64(r0) != reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R0_R4: // <op> <u2 op offset>
            code += reg_get_u64(r0) != reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R0_R5: // <op> <u2 op offset>
            code += reg_get_u64(r0) != reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R0_R6: // <op> <u2 op offset>
            code += reg_get_u64(r0) != reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R0_R7: // <op> <u2 op offset>
            code += reg_get_u64(r0) != reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R1_R0: // <op> <u2 op offset>
            code += reg_get_u64(r1) != reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R1_R1: // <op> <u2 op offset>
            code += reg_get_u64(r1) != reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R1_R2: // <op> <u2 op offset>
            code += reg_get_u64(r1) != reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R1_R3: // <op> <u2 op offset>
            code += reg_get_u64(r1) != reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R1_R4: // <op> <u2 op offset>
            code += reg_get_u64(r1) != reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R1_R5: // <op> <u2 op offset>
            code += reg_get_u64(r1) != reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R1_R6: // <op> <u2 op offset>
            code += reg_get_u64(r1) != reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R1_R7: // <op> <u2 op offset>
            code += reg_get_u64(r1) != reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R2_R0: // <op> <u2 op offset>
            code += reg_get_u64(r2) != reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R2_R1: // <op> <u2 op offset>
            code += reg_get_u64(r2) != reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R2_R2: // <op> <u2 op offset>
            code += reg_get_u64(r2) != reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R2_R3: // <op> <u2 op offset>
            code += reg_get_u64(r2) != reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R2_R4: // <op> <u2 op offset>
            code += reg_get_u64(r2) != reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R2_R5: // <op> <u2 op offset>
            code += reg_get_u64(r2) != reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R2_R6: // <op> <u2 op offset>
            code += reg_get_u64(r2) != reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R2_R7: // <op> <u2 op offset>
            code += reg_get_u64(r2) != reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R3_R0: // <op> <u2 op offset>
            code += reg_get_u64(r3) != reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R3_R1: // <op> <u2 op offset>
            code += reg_get_u64(r3) != reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R3_R2: // <op> <u2 op offset>
            code += reg_get_u64(r3) != reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R3_R3: // <op> <u2 op offset>
            code += reg_get_u64(r3) != reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R3_R4: // <op> <u2 op offset>
            code += reg_get_u64(r3) != reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R3_R5: // <op> <u2 op offset>
            code += reg_get_u64(r3) != reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R3_R6: // <op> <u2 op offset>
            code += reg_get_u64(r3) != reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R3_R7: // <op> <u2 op offset>
            code += reg_get_u64(r3) != reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R4_R0: // <op> <u2 op offset>
            code += reg_get_u64(r4) != reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R4_R1: // <op> <u2 op offset>
            code += reg_get_u64(r4) != reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R4_R2: // <op> <u2 op offset>
            code += reg_get_u64(r4) != reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R4_R3: // <op> <u2 op offset>
            code += reg_get_u64(r4) != reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R4_R4: // <op> <u2 op offset>
            code += reg_get_u64(r4) != reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R4_R5: // <op> <u2 op offset>
            code += reg_get_u64(r4) != reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R4_R6: // <op> <u2 op offset>
            code += reg_get_u64(r4) != reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R4_R7: // <op> <u2 op offset>
            code += reg_get_u64(r4) != reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R5_R0: // <op> <u2 op offset>
            code += reg_get_u64(r5) != reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R5_R1: // <op> <u2 op offset>
            code += reg_get_u64(r5) != reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R5_R2: // <op> <u2 op offset>
            code += reg_get_u64(r5) != reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R5_R3: // <op> <u2 op offset>
            code += reg_get_u64(r5) != reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R5_R4: // <op> <u2 op offset>
            code += reg_get_u64(r5) != reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R5_R5: // <op> <u2 op offset>
            code += reg_get_u64(r5) != reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R5_R6: // <op> <u2 op offset>
            code += reg_get_u64(r5) != reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R5_R7: // <op> <u2 op offset>
            code += reg_get_u64(r5) != reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R6_R0: // <op> <u2 op offset>
            code += reg_get_u64(r6) != reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R6_R1: // <op> <u2 op offset>
            code += reg_get_u64(r6) != reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R6_R2: // <op> <u2 op offset>
            code += reg_get_u64(r6) != reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R6_R3: // <op> <u2 op offset>
            code += reg_get_u64(r6) != reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R6_R4: // <op> <u2 op offset>
            code += reg_get_u64(r6) != reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R6_R5: // <op> <u2 op offset>
            code += reg_get_u64(r6) != reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R6_R6: // <op> <u2 op offset>
            code += reg_get_u64(r6) != reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R6_R7: // <op> <u2 op offset>
            code += reg_get_u64(r6) != reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R7_R0: // <op> <u2 op offset>
            code += reg_get_u64(r7) != reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R7_R1: // <op> <u2 op offset>
            code += reg_get_u64(r7) != reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R7_R2: // <op> <u2 op offset>
            code += reg_get_u64(r7) != reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R7_R3: // <op> <u2 op offset>
            code += reg_get_u64(r7) != reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R7_R4: // <op> <u2 op offset>
            code += reg_get_u64(r7) != reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R7_R5: // <op> <u2 op offset>
            code += reg_get_u64(r7) != reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R7_R6: // <op> <u2 op offset>
            code += reg_get_u64(r7) != reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneI_R7_R7: // <op> <u2 op offset>
            code += reg_get_u64(r7) != reg_get_u64(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BltI_R0_R0: // <op> <u2 op offset>
            code += reg_get_u64(r0) < reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R0_R1: // <op> <u2 op offset>
            code += reg_get_u64(r0) < reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R0_R2: // <op> <u2 op offset>
            code += reg_get_u64(r0) < reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R0_R3: // <op> <u2 op offset>
            code += reg_get_u64(r0) < reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R0_R4: // <op> <u2 op offset>
            code += reg_get_u64(r0) < reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R0_R5: // <op> <u2 op offset>
            code += reg_get_u64(r0) < reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R0_R6: // <op> <u2 op offset>
            code += reg_get_u64(r0) < reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R0_R7: // <op> <u2 op offset>
            code += reg_get_u64(r0) < reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R1_R0: // <op> <u2 op offset>
            code += reg_get_u64(r1) < reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R1_R1: // <op> <u2 op offset>
            code += reg_get_u64(r1) < reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R1_R2: // <op> <u2 op offset>
            code += reg_get_u64(r1) < reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R1_R3: // <op> <u2 op offset>
            code += reg_get_u64(r1) < reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R1_R4: // <op> <u2 op offset>
            code += reg_get_u64(r1) < reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R1_R5: // <op> <u2 op offset>
            code += reg_get_u64(r1) < reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R1_R6: // <op> <u2 op offset>
            code += reg_get_u64(r1) < reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R1_R7: // <op> <u2 op offset>
            code += reg_get_u64(r1) < reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R2_R0: // <op> <u2 op offset>
            code += reg_get_u64(r2) < reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R2_R1: // <op> <u2 op offset>
            code += reg_get_u64(r2) < reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R2_R2: // <op> <u2 op offset>
            code += reg_get_u64(r2) < reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R2_R3: // <op> <u2 op offset>
            code += reg_get_u64(r2) < reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R2_R4: // <op> <u2 op offset>
            code += reg_get_u64(r2) < reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R2_R5: // <op> <u2 op offset>
            code += reg_get_u64(r2) < reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R2_R6: // <op> <u2 op offset>
            code += reg_get_u64(r2) < reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R2_R7: // <op> <u2 op offset>
            code += reg_get_u64(r2) < reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R3_R0: // <op> <u2 op offset>
            code += reg_get_u64(r3) < reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R3_R1: // <op> <u2 op offset>
            code += reg_get_u64(r3) < reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R3_R2: // <op> <u2 op offset>
            code += reg_get_u64(r3) < reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R3_R3: // <op> <u2 op offset>
            code += reg_get_u64(r3) < reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R3_R4: // <op> <u2 op offset>
            code += reg_get_u64(r3) < reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R3_R5: // <op> <u2 op offset>
            code += reg_get_u64(r3) < reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R3_R6: // <op> <u2 op offset>
            code += reg_get_u64(r3) < reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R3_R7: // <op> <u2 op offset>
            code += reg_get_u64(r3) < reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R4_R0: // <op> <u2 op offset>
            code += reg_get_u64(r4) < reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R4_R1: // <op> <u2 op offset>
            code += reg_get_u64(r4) < reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R4_R2: // <op> <u2 op offset>
            code += reg_get_u64(r4) < reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R4_R3: // <op> <u2 op offset>
            code += reg_get_u64(r4) < reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R4_R4: // <op> <u2 op offset>
            code += reg_get_u64(r4) < reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R4_R5: // <op> <u2 op offset>
            code += reg_get_u64(r4) < reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R4_R6: // <op> <u2 op offset>
            code += reg_get_u64(r4) < reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R4_R7: // <op> <u2 op offset>
            code += reg_get_u64(r4) < reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R5_R0: // <op> <u2 op offset>
            code += reg_get_u64(r5) < reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R5_R1: // <op> <u2 op offset>
            code += reg_get_u64(r5) < reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R5_R2: // <op> <u2 op offset>
            code += reg_get_u64(r5) < reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R5_R3: // <op> <u2 op offset>
            code += reg_get_u64(r5) < reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R5_R4: // <op> <u2 op offset>
            code += reg_get_u64(r5) < reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R5_R5: // <op> <u2 op offset>
            code += reg_get_u64(r5) < reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R5_R6: // <op> <u2 op offset>
            code += reg_get_u64(r5) < reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R5_R7: // <op> <u2 op offset>
            code += reg_get_u64(r5) < reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R6_R0: // <op> <u2 op offset>
            code += reg_get_u64(r6) < reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R6_R1: // <op> <u2 op offset>
            code += reg_get_u64(r6) < reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R6_R2: // <op> <u2 op offset>
            code += reg_get_u64(r6) < reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R6_R3: // <op> <u2 op offset>
            code += reg_get_u64(r6) < reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R6_R4: // <op> <u2 op offset>
            code += reg_get_u64(r6) < reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R6_R5: // <op> <u2 op offset>
            code += reg_get_u64(r6) < reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R6_R6: // <op> <u2 op offset>
            code += reg_get_u64(r6) < reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R6_R7: // <op> <u2 op offset>
            code += reg_get_u64(r6) < reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R7_R0: // <op> <u2 op offset>
            code += reg_get_u64(r7) < reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R7_R1: // <op> <u2 op offset>
            code += reg_get_u64(r7) < reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R7_R2: // <op> <u2 op offset>
            code += reg_get_u64(r7) < reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R7_R3: // <op> <u2 op offset>
            code += reg_get_u64(r7) < reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R7_R4: // <op> <u2 op offset>
            code += reg_get_u64(r7) < reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R7_R5: // <op> <u2 op offset>
            code += reg_get_u64(r7) < reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R7_R6: // <op> <u2 op offset>
            code += reg_get_u64(r7) < reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltI_R7_R7: // <op> <u2 op offset>
            code += reg_get_u64(r7) < reg_get_u64(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BgtI_R0_R0: // <op> <u2 op offset>
            code += reg_get_u64(r0) > reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R0_R1: // <op> <u2 op offset>
            code += reg_get_u64(r0) > reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R0_R2: // <op> <u2 op offset>
            code += reg_get_u64(r0) > reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R0_R3: // <op> <u2 op offset>
            code += reg_get_u64(r0) > reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R0_R4: // <op> <u2 op offset>
            code += reg_get_u64(r0) > reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R0_R5: // <op> <u2 op offset>
            code += reg_get_u64(r0) > reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R0_R6: // <op> <u2 op offset>
            code += reg_get_u64(r0) > reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R0_R7: // <op> <u2 op offset>
            code += reg_get_u64(r0) > reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R1_R0: // <op> <u2 op offset>
            code += reg_get_u64(r1) > reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R1_R1: // <op> <u2 op offset>
            code += reg_get_u64(r1) > reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R1_R2: // <op> <u2 op offset>
            code += reg_get_u64(r1) > reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R1_R3: // <op> <u2 op offset>
            code += reg_get_u64(r1) > reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R1_R4: // <op> <u2 op offset>
            code += reg_get_u64(r1) > reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R1_R5: // <op> <u2 op offset>
            code += reg_get_u64(r1) > reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R1_R6: // <op> <u2 op offset>
            code += reg_get_u64(r1) > reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R1_R7: // <op> <u2 op offset>
            code += reg_get_u64(r1) > reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R2_R0: // <op> <u2 op offset>
            code += reg_get_u64(r2) > reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R2_R1: // <op> <u2 op offset>
            code += reg_get_u64(r2) > reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R2_R2: // <op> <u2 op offset>
            code += reg_get_u64(r2) > reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R2_R3: // <op> <u2 op offset>
            code += reg_get_u64(r2) > reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R2_R4: // <op> <u2 op offset>
            code += reg_get_u64(r2) > reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R2_R5: // <op> <u2 op offset>
            code += reg_get_u64(r2) > reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R2_R6: // <op> <u2 op offset>
            code += reg_get_u64(r2) > reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R2_R7: // <op> <u2 op offset>
            code += reg_get_u64(r2) > reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R3_R0: // <op> <u2 op offset>
            code += reg_get_u64(r3) > reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R3_R1: // <op> <u2 op offset>
            code += reg_get_u64(r3) > reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R3_R2: // <op> <u2 op offset>
            code += reg_get_u64(r3) > reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R3_R3: // <op> <u2 op offset>
            code += reg_get_u64(r3) > reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R3_R4: // <op> <u2 op offset>
            code += reg_get_u64(r3) > reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R3_R5: // <op> <u2 op offset>
            code += reg_get_u64(r3) > reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R3_R6: // <op> <u2 op offset>
            code += reg_get_u64(r3) > reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R3_R7: // <op> <u2 op offset>
            code += reg_get_u64(r3) > reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R4_R0: // <op> <u2 op offset>
            code += reg_get_u64(r4) > reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R4_R1: // <op> <u2 op offset>
            code += reg_get_u64(r4) > reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R4_R2: // <op> <u2 op offset>
            code += reg_get_u64(r4) > reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R4_R3: // <op> <u2 op offset>
            code += reg_get_u64(r4) > reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R4_R4: // <op> <u2 op offset>
            code += reg_get_u64(r4) > reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R4_R5: // <op> <u2 op offset>
            code += reg_get_u64(r4) > reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R4_R6: // <op> <u2 op offset>
            code += reg_get_u64(r4) > reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R4_R7: // <op> <u2 op offset>
            code += reg_get_u64(r4) > reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R5_R0: // <op> <u2 op offset>
            code += reg_get_u64(r5) > reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R5_R1: // <op> <u2 op offset>
            code += reg_get_u64(r5) > reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R5_R2: // <op> <u2 op offset>
            code += reg_get_u64(r5) > reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R5_R3: // <op> <u2 op offset>
            code += reg_get_u64(r5) > reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R5_R4: // <op> <u2 op offset>
            code += reg_get_u64(r5) > reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R5_R5: // <op> <u2 op offset>
            code += reg_get_u64(r5) > reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R5_R6: // <op> <u2 op offset>
            code += reg_get_u64(r5) > reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R5_R7: // <op> <u2 op offset>
            code += reg_get_u64(r5) > reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R6_R0: // <op> <u2 op offset>
            code += reg_get_u64(r6) > reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R6_R1: // <op> <u2 op offset>
            code += reg_get_u64(r6) > reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R6_R2: // <op> <u2 op offset>
            code += reg_get_u64(r6) > reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R6_R3: // <op> <u2 op offset>
            code += reg_get_u64(r6) > reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R6_R4: // <op> <u2 op offset>
            code += reg_get_u64(r6) > reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R6_R5: // <op> <u2 op offset>
            code += reg_get_u64(r6) > reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R6_R6: // <op> <u2 op offset>
            code += reg_get_u64(r6) > reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R6_R7: // <op> <u2 op offset>
            code += reg_get_u64(r6) > reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R7_R0: // <op> <u2 op offset>
            code += reg_get_u64(r7) > reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R7_R1: // <op> <u2 op offset>
            code += reg_get_u64(r7) > reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R7_R2: // <op> <u2 op offset>
            code += reg_get_u64(r7) > reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R7_R3: // <op> <u2 op offset>
            code += reg_get_u64(r7) > reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R7_R4: // <op> <u2 op offset>
            code += reg_get_u64(r7) > reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R7_R5: // <op> <u2 op offset>
            code += reg_get_u64(r7) > reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R7_R6: // <op> <u2 op offset>
            code += reg_get_u64(r7) > reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtI_R7_R7: // <op> <u2 op offset>
            code += reg_get_u64(r7) > reg_get_u64(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BleI_R0_R0: // <op> <u2 op offset>
            code += reg_get_u64(r0) <= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R0_R1: // <op> <u2 op offset>
            code += reg_get_u64(r0) <= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R0_R2: // <op> <u2 op offset>
            code += reg_get_u64(r0) <= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R0_R3: // <op> <u2 op offset>
            code += reg_get_u64(r0) <= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R0_R4: // <op> <u2 op offset>
            code += reg_get_u64(r0) <= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R0_R5: // <op> <u2 op offset>
            code += reg_get_u64(r0) <= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R0_R6: // <op> <u2 op offset>
            code += reg_get_u64(r0) <= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R0_R7: // <op> <u2 op offset>
            code += reg_get_u64(r0) <= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R1_R0: // <op> <u2 op offset>
            code += reg_get_u64(r1) <= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R1_R1: // <op> <u2 op offset>
            code += reg_get_u64(r1) <= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R1_R2: // <op> <u2 op offset>
            code += reg_get_u64(r1) <= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R1_R3: // <op> <u2 op offset>
            code += reg_get_u64(r1) <= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R1_R4: // <op> <u2 op offset>
            code += reg_get_u64(r1) <= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R1_R5: // <op> <u2 op offset>
            code += reg_get_u64(r1) <= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R1_R6: // <op> <u2 op offset>
            code += reg_get_u64(r1) <= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R1_R7: // <op> <u2 op offset>
            code += reg_get_u64(r1) <= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R2_R0: // <op> <u2 op offset>
            code += reg_get_u64(r2) <= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R2_R1: // <op> <u2 op offset>
            code += reg_get_u64(r2) <= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R2_R2: // <op> <u2 op offset>
            code += reg_get_u64(r2) <= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R2_R3: // <op> <u2 op offset>
            code += reg_get_u64(r2) <= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R2_R4: // <op> <u2 op offset>
            code += reg_get_u64(r2) <= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R2_R5: // <op> <u2 op offset>
            code += reg_get_u64(r2) <= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R2_R6: // <op> <u2 op offset>
            code += reg_get_u64(r2) <= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R2_R7: // <op> <u2 op offset>
            code += reg_get_u64(r2) <= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R3_R0: // <op> <u2 op offset>
            code += reg_get_u64(r3) <= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R3_R1: // <op> <u2 op offset>
            code += reg_get_u64(r3) <= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R3_R2: // <op> <u2 op offset>
            code += reg_get_u64(r3) <= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R3_R3: // <op> <u2 op offset>
            code += reg_get_u64(r3) <= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R3_R4: // <op> <u2 op offset>
            code += reg_get_u64(r3) <= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R3_R5: // <op> <u2 op offset>
            code += reg_get_u64(r3) <= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R3_R6: // <op> <u2 op offset>
            code += reg_get_u64(r3) <= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R3_R7: // <op> <u2 op offset>
            code += reg_get_u64(r3) <= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R4_R0: // <op> <u2 op offset>
            code += reg_get_u64(r4) <= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R4_R1: // <op> <u2 op offset>
            code += reg_get_u64(r4) <= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R4_R2: // <op> <u2 op offset>
            code += reg_get_u64(r4) <= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R4_R3: // <op> <u2 op offset>
            code += reg_get_u64(r4) <= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R4_R4: // <op> <u2 op offset>
            code += reg_get_u64(r4) <= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R4_R5: // <op> <u2 op offset>
            code += reg_get_u64(r4) <= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R4_R6: // <op> <u2 op offset>
            code += reg_get_u64(r4) <= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R4_R7: // <op> <u2 op offset>
            code += reg_get_u64(r4) <= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R5_R0: // <op> <u2 op offset>
            code += reg_get_u64(r5) <= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R5_R1: // <op> <u2 op offset>
            code += reg_get_u64(r5) <= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R5_R2: // <op> <u2 op offset>
            code += reg_get_u64(r5) <= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R5_R3: // <op> <u2 op offset>
            code += reg_get_u64(r5) <= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R5_R4: // <op> <u2 op offset>
            code += reg_get_u64(r5) <= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R5_R5: // <op> <u2 op offset>
            code += reg_get_u64(r5) <= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R5_R6: // <op> <u2 op offset>
            code += reg_get_u64(r5) <= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R5_R7: // <op> <u2 op offset>
            code += reg_get_u64(r5) <= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R6_R0: // <op> <u2 op offset>
            code += reg_get_u64(r6) <= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R6_R1: // <op> <u2 op offset>
            code += reg_get_u64(r6) <= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R6_R2: // <op> <u2 op offset>
            code += reg_get_u64(r6) <= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R6_R3: // <op> <u2 op offset>
            code += reg_get_u64(r6) <= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R6_R4: // <op> <u2 op offset>
            code += reg_get_u64(r6) <= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R6_R5: // <op> <u2 op offset>
            code += reg_get_u64(r6) <= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R6_R6: // <op> <u2 op offset>
            code += reg_get_u64(r6) <= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R6_R7: // <op> <u2 op offset>
            code += reg_get_u64(r6) <= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R7_R0: // <op> <u2 op offset>
            code += reg_get_u64(r7) <= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R7_R1: // <op> <u2 op offset>
            code += reg_get_u64(r7) <= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R7_R2: // <op> <u2 op offset>
            code += reg_get_u64(r7) <= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R7_R3: // <op> <u2 op offset>
            code += reg_get_u64(r7) <= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R7_R4: // <op> <u2 op offset>
            code += reg_get_u64(r7) <= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R7_R5: // <op> <u2 op offset>
            code += reg_get_u64(r7) <= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R7_R6: // <op> <u2 op offset>
            code += reg_get_u64(r7) <= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleI_R7_R7: // <op> <u2 op offset>
            code += reg_get_u64(r7) <= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BgeI_R0_R0: // <op> <u2 op offset>
            code += reg_get_u64(r0) >= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R0_R1: // <op> <u2 op offset>
            code += reg_get_u64(r0) >= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R0_R2: // <op> <u2 op offset>
            code += reg_get_u64(r0) >= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R0_R3: // <op> <u2 op offset>
            code += reg_get_u64(r0) >= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R0_R4: // <op> <u2 op offset>
            code += reg_get_u64(r0) >= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R0_R5: // <op> <u2 op offset>
            code += reg_get_u64(r0) >= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R0_R6: // <op> <u2 op offset>
            code += reg_get_u64(r0) >= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R0_R7: // <op> <u2 op offset>
            code += reg_get_u64(r0) >= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R1_R0: // <op> <u2 op offset>
            code += reg_get_u64(r1) >= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R1_R1: // <op> <u2 op offset>
            code += reg_get_u64(r1) >= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R1_R2: // <op> <u2 op offset>
            code += reg_get_u64(r1) >= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R1_R3: // <op> <u2 op offset>
            code += reg_get_u64(r1) >= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R1_R4: // <op> <u2 op offset>
            code += reg_get_u64(r1) >= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R1_R5: // <op> <u2 op offset>
            code += reg_get_u64(r1) >= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R1_R6: // <op> <u2 op offset>
            code += reg_get_u64(r1) >= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R1_R7: // <op> <u2 op offset>
            code += reg_get_u64(r1) >= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R2_R0: // <op> <u2 op offset>
            code += reg_get_u64(r2) >= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R2_R1: // <op> <u2 op offset>
            code += reg_get_u64(r2) >= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R2_R2: // <op> <u2 op offset>
            code += reg_get_u64(r2) >= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R2_R3: // <op> <u2 op offset>
            code += reg_get_u64(r2) >= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R2_R4: // <op> <u2 op offset>
            code += reg_get_u64(r2) >= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R2_R5: // <op> <u2 op offset>
            code += reg_get_u64(r2) >= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R2_R6: // <op> <u2 op offset>
            code += reg_get_u64(r2) >= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R2_R7: // <op> <u2 op offset>
            code += reg_get_u64(r2) >= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R3_R0: // <op> <u2 op offset>
            code += reg_get_u64(r3) >= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R3_R1: // <op> <u2 op offset>
            code += reg_get_u64(r3) >= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R3_R2: // <op> <u2 op offset>
            code += reg_get_u64(r3) >= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R3_R3: // <op> <u2 op offset>
            code += reg_get_u64(r3) >= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R3_R4: // <op> <u2 op offset>
            code += reg_get_u64(r3) >= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R3_R5: // <op> <u2 op offset>
            code += reg_get_u64(r3) >= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R3_R6: // <op> <u2 op offset>
            code += reg_get_u64(r3) >= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R3_R7: // <op> <u2 op offset>
            code += reg_get_u64(r3) >= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R4_R0: // <op> <u2 op offset>
            code += reg_get_u64(r4) >= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R4_R1: // <op> <u2 op offset>
            code += reg_get_u64(r4) >= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R4_R2: // <op> <u2 op offset>
            code += reg_get_u64(r4) >= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R4_R3: // <op> <u2 op offset>
            code += reg_get_u64(r4) >= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R4_R4: // <op> <u2 op offset>
            code += reg_get_u64(r4) >= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R4_R5: // <op> <u2 op offset>
            code += reg_get_u64(r4) >= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R4_R6: // <op> <u2 op offset>
            code += reg_get_u64(r4) >= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R4_R7: // <op> <u2 op offset>
            code += reg_get_u64(r4) >= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R5_R0: // <op> <u2 op offset>
            code += reg_get_u64(r5) >= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R5_R1: // <op> <u2 op offset>
            code += reg_get_u64(r5) >= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R5_R2: // <op> <u2 op offset>
            code += reg_get_u64(r5) >= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R5_R3: // <op> <u2 op offset>
            code += reg_get_u64(r5) >= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R5_R4: // <op> <u2 op offset>
            code += reg_get_u64(r5) >= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R5_R5: // <op> <u2 op offset>
            code += reg_get_u64(r5) >= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R5_R6: // <op> <u2 op offset>
            code += reg_get_u64(r5) >= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R5_R7: // <op> <u2 op offset>
            code += reg_get_u64(r5) >= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R6_R0: // <op> <u2 op offset>
            code += reg_get_u64(r6) >= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R6_R1: // <op> <u2 op offset>
            code += reg_get_u64(r6) >= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R6_R2: // <op> <u2 op offset>
            code += reg_get_u64(r6) >= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R6_R3: // <op> <u2 op offset>
            code += reg_get_u64(r6) >= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R6_R4: // <op> <u2 op offset>
            code += reg_get_u64(r6) >= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R6_R5: // <op> <u2 op offset>
            code += reg_get_u64(r6) >= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R6_R6: // <op> <u2 op offset>
            code += reg_get_u64(r6) >= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R6_R7: // <op> <u2 op offset>
            code += reg_get_u64(r6) >= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R7_R0: // <op> <u2 op offset>
            code += reg_get_u64(r7) >= reg_get_u64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R7_R1: // <op> <u2 op offset>
            code += reg_get_u64(r7) >= reg_get_u64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R7_R2: // <op> <u2 op offset>
            code += reg_get_u64(r7) >= reg_get_u64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R7_R3: // <op> <u2 op offset>
            code += reg_get_u64(r7) >= reg_get_u64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R7_R4: // <op> <u2 op offset>
            code += reg_get_u64(r7) >= reg_get_u64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R7_R5: // <op> <u2 op offset>
            code += reg_get_u64(r7) >= reg_get_u64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R7_R6: // <op> <u2 op offset>
            code += reg_get_u64(r7) >= reg_get_u64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeI_R7_R7: // <op> <u2 op offset>
            code += reg_get_u64(r7) >= reg_get_u64(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BeqF4_R0_R0: // <op> <u2 op offset>
            code += reg_get_f32(r0) == reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R0_R1: // <op> <u2 op offset>
            code += reg_get_f32(r0) == reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R0_R2: // <op> <u2 op offset>
            code += reg_get_f32(r0) == reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R0_R3: // <op> <u2 op offset>
            code += reg_get_f32(r0) == reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R0_R4: // <op> <u2 op offset>
            code += reg_get_f32(r0) == reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R0_R5: // <op> <u2 op offset>
            code += reg_get_f32(r0) == reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R0_R6: // <op> <u2 op offset>
            code += reg_get_f32(r0) == reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R0_R7: // <op> <u2 op offset>
            code += reg_get_f32(r0) == reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R1_R0: // <op> <u2 op offset>
            code += reg_get_f32(r1) == reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R1_R1: // <op> <u2 op offset>
            code += reg_get_f32(r1) == reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R1_R2: // <op> <u2 op offset>
            code += reg_get_f32(r1) == reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R1_R3: // <op> <u2 op offset>
            code += reg_get_f32(r1) == reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R1_R4: // <op> <u2 op offset>
            code += reg_get_f32(r1) == reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R1_R5: // <op> <u2 op offset>
            code += reg_get_f32(r1) == reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R1_R6: // <op> <u2 op offset>
            code += reg_get_f32(r1) == reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R1_R7: // <op> <u2 op offset>
            code += reg_get_f32(r1) == reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R2_R0: // <op> <u2 op offset>
            code += reg_get_f32(r2) == reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R2_R1: // <op> <u2 op offset>
            code += reg_get_f32(r2) == reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R2_R2: // <op> <u2 op offset>
            code += reg_get_f32(r2) == reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R2_R3: // <op> <u2 op offset>
            code += reg_get_f32(r2) == reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R2_R4: // <op> <u2 op offset>
            code += reg_get_f32(r2) == reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R2_R5: // <op> <u2 op offset>
            code += reg_get_f32(r2) == reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R2_R6: // <op> <u2 op offset>
            code += reg_get_f32(r2) == reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R2_R7: // <op> <u2 op offset>
            code += reg_get_f32(r2) == reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R3_R0: // <op> <u2 op offset>
            code += reg_get_f32(r3) == reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R3_R1: // <op> <u2 op offset>
            code += reg_get_f32(r3) == reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R3_R2: // <op> <u2 op offset>
            code += reg_get_f32(r3) == reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R3_R3: // <op> <u2 op offset>
            code += reg_get_f32(r3) == reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R3_R4: // <op> <u2 op offset>
            code += reg_get_f32(r3) == reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R3_R5: // <op> <u2 op offset>
            code += reg_get_f32(r3) == reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R3_R6: // <op> <u2 op offset>
            code += reg_get_f32(r3) == reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R3_R7: // <op> <u2 op offset>
            code += reg_get_f32(r3) == reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R4_R0: // <op> <u2 op offset>
            code += reg_get_f32(r4) == reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R4_R1: // <op> <u2 op offset>
            code += reg_get_f32(r4) == reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R4_R2: // <op> <u2 op offset>
            code += reg_get_f32(r4) == reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R4_R3: // <op> <u2 op offset>
            code += reg_get_f32(r4) == reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R4_R4: // <op> <u2 op offset>
            code += reg_get_f32(r4) == reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R4_R5: // <op> <u2 op offset>
            code += reg_get_f32(r4) == reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R4_R6: // <op> <u2 op offset>
            code += reg_get_f32(r4) == reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R4_R7: // <op> <u2 op offset>
            code += reg_get_f32(r4) == reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R5_R0: // <op> <u2 op offset>
            code += reg_get_f32(r5) == reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R5_R1: // <op> <u2 op offset>
            code += reg_get_f32(r5) == reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R5_R2: // <op> <u2 op offset>
            code += reg_get_f32(r5) == reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R5_R3: // <op> <u2 op offset>
            code += reg_get_f32(r5) == reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R5_R4: // <op> <u2 op offset>
            code += reg_get_f32(r5) == reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R5_R5: // <op> <u2 op offset>
            code += reg_get_f32(r5) == reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R5_R6: // <op> <u2 op offset>
            code += reg_get_f32(r5) == reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R5_R7: // <op> <u2 op offset>
            code += reg_get_f32(r5) == reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R6_R0: // <op> <u2 op offset>
            code += reg_get_f32(r6) == reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R6_R1: // <op> <u2 op offset>
            code += reg_get_f32(r6) == reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R6_R2: // <op> <u2 op offset>
            code += reg_get_f32(r6) == reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R6_R3: // <op> <u2 op offset>
            code += reg_get_f32(r6) == reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R6_R4: // <op> <u2 op offset>
            code += reg_get_f32(r6) == reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R6_R5: // <op> <u2 op offset>
            code += reg_get_f32(r6) == reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R6_R6: // <op> <u2 op offset>
            code += reg_get_f32(r6) == reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R6_R7: // <op> <u2 op offset>
            code += reg_get_f32(r6) == reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R7_R0: // <op> <u2 op offset>
            code += reg_get_f32(r7) == reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R7_R1: // <op> <u2 op offset>
            code += reg_get_f32(r7) == reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R7_R2: // <op> <u2 op offset>
            code += reg_get_f32(r7) == reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R7_R3: // <op> <u2 op offset>
            code += reg_get_f32(r7) == reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R7_R4: // <op> <u2 op offset>
            code += reg_get_f32(r7) == reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R7_R5: // <op> <u2 op offset>
            code += reg_get_f32(r7) == reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R7_R6: // <op> <u2 op offset>
            code += reg_get_f32(r7) == reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF4_R7_R7: // <op> <u2 op offset>
            code += reg_get_f32(r7) == reg_get_f32(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BneF4_R0_R0: // <op> <u2 op offset>
            code += reg_get_f32(r0) != reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R0_R1: // <op> <u2 op offset>
            code += reg_get_f32(r0) != reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R0_R2: // <op> <u2 op offset>
            code += reg_get_f32(r0) != reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R0_R3: // <op> <u2 op offset>
            code += reg_get_f32(r0) != reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R0_R4: // <op> <u2 op offset>
            code += reg_get_f32(r0) != reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R0_R5: // <op> <u2 op offset>
            code += reg_get_f32(r0) != reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R0_R6: // <op> <u2 op offset>
            code += reg_get_f32(r0) != reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R0_R7: // <op> <u2 op offset>
            code += reg_get_f32(r0) != reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R1_R0: // <op> <u2 op offset>
            code += reg_get_f32(r1) != reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R1_R1: // <op> <u2 op offset>
            code += reg_get_f32(r1) != reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R1_R2: // <op> <u2 op offset>
            code += reg_get_f32(r1) != reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R1_R3: // <op> <u2 op offset>
            code += reg_get_f32(r1) != reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R1_R4: // <op> <u2 op offset>
            code += reg_get_f32(r1) != reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R1_R5: // <op> <u2 op offset>
            code += reg_get_f32(r1) != reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R1_R6: // <op> <u2 op offset>
            code += reg_get_f32(r1) != reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R1_R7: // <op> <u2 op offset>
            code += reg_get_f32(r1) != reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R2_R0: // <op> <u2 op offset>
            code += reg_get_f32(r2) != reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R2_R1: // <op> <u2 op offset>
            code += reg_get_f32(r2) != reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R2_R2: // <op> <u2 op offset>
            code += reg_get_f32(r2) != reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R2_R3: // <op> <u2 op offset>
            code += reg_get_f32(r2) != reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R2_R4: // <op> <u2 op offset>
            code += reg_get_f32(r2) != reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R2_R5: // <op> <u2 op offset>
            code += reg_get_f32(r2) != reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R2_R6: // <op> <u2 op offset>
            code += reg_get_f32(r2) != reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R2_R7: // <op> <u2 op offset>
            code += reg_get_f32(r2) != reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R3_R0: // <op> <u2 op offset>
            code += reg_get_f32(r3) != reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R3_R1: // <op> <u2 op offset>
            code += reg_get_f32(r3) != reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R3_R2: // <op> <u2 op offset>
            code += reg_get_f32(r3) != reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R3_R3: // <op> <u2 op offset>
            code += reg_get_f32(r3) != reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R3_R4: // <op> <u2 op offset>
            code += reg_get_f32(r3) != reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R3_R5: // <op> <u2 op offset>
            code += reg_get_f32(r3) != reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R3_R6: // <op> <u2 op offset>
            code += reg_get_f32(r3) != reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R3_R7: // <op> <u2 op offset>
            code += reg_get_f32(r3) != reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R4_R0: // <op> <u2 op offset>
            code += reg_get_f32(r4) != reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R4_R1: // <op> <u2 op offset>
            code += reg_get_f32(r4) != reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R4_R2: // <op> <u2 op offset>
            code += reg_get_f32(r4) != reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R4_R3: // <op> <u2 op offset>
            code += reg_get_f32(r4) != reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R4_R4: // <op> <u2 op offset>
            code += reg_get_f32(r4) != reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R4_R5: // <op> <u2 op offset>
            code += reg_get_f32(r4) != reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R4_R6: // <op> <u2 op offset>
            code += reg_get_f32(r4) != reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R4_R7: // <op> <u2 op offset>
            code += reg_get_f32(r4) != reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R5_R0: // <op> <u2 op offset>
            code += reg_get_f32(r5) != reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R5_R1: // <op> <u2 op offset>
            code += reg_get_f32(r5) != reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R5_R2: // <op> <u2 op offset>
            code += reg_get_f32(r5) != reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R5_R3: // <op> <u2 op offset>
            code += reg_get_f32(r5) != reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R5_R4: // <op> <u2 op offset>
            code += reg_get_f32(r5) != reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R5_R5: // <op> <u2 op offset>
            code += reg_get_f32(r5) != reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R5_R6: // <op> <u2 op offset>
            code += reg_get_f32(r5) != reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R5_R7: // <op> <u2 op offset>
            code += reg_get_f32(r5) != reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R6_R0: // <op> <u2 op offset>
            code += reg_get_f32(r6) != reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R6_R1: // <op> <u2 op offset>
            code += reg_get_f32(r6) != reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R6_R2: // <op> <u2 op offset>
            code += reg_get_f32(r6) != reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R6_R3: // <op> <u2 op offset>
            code += reg_get_f32(r6) != reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R6_R4: // <op> <u2 op offset>
            code += reg_get_f32(r6) != reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R6_R5: // <op> <u2 op offset>
            code += reg_get_f32(r6) != reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R6_R6: // <op> <u2 op offset>
            code += reg_get_f32(r6) != reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R6_R7: // <op> <u2 op offset>
            code += reg_get_f32(r6) != reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R7_R0: // <op> <u2 op offset>
            code += reg_get_f32(r7) != reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R7_R1: // <op> <u2 op offset>
            code += reg_get_f32(r7) != reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R7_R2: // <op> <u2 op offset>
            code += reg_get_f32(r7) != reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R7_R3: // <op> <u2 op offset>
            code += reg_get_f32(r7) != reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R7_R4: // <op> <u2 op offset>
            code += reg_get_f32(r7) != reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R7_R5: // <op> <u2 op offset>
            code += reg_get_f32(r7) != reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R7_R6: // <op> <u2 op offset>
            code += reg_get_f32(r7) != reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF4_R7_R7: // <op> <u2 op offset>
            code += reg_get_f32(r7) != reg_get_f32(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BltF4_R0_R0: // <op> <u2 op offset>
            code += reg_get_f32(r0) < reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R0_R1: // <op> <u2 op offset>
            code += reg_get_f32(r0) < reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R0_R2: // <op> <u2 op offset>
            code += reg_get_f32(r0) < reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R0_R3: // <op> <u2 op offset>
            code += reg_get_f32(r0) < reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R0_R4: // <op> <u2 op offset>
            code += reg_get_f32(r0) < reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R0_R5: // <op> <u2 op offset>
            code += reg_get_f32(r0) < reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R0_R6: // <op> <u2 op offset>
            code += reg_get_f32(r0) < reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R0_R7: // <op> <u2 op offset>
            code += reg_get_f32(r0) < reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R1_R0: // <op> <u2 op offset>
            code += reg_get_f32(r1) < reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R1_R1: // <op> <u2 op offset>
            code += reg_get_f32(r1) < reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R1_R2: // <op> <u2 op offset>
            code += reg_get_f32(r1) < reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R1_R3: // <op> <u2 op offset>
            code += reg_get_f32(r1) < reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R1_R4: // <op> <u2 op offset>
            code += reg_get_f32(r1) < reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R1_R5: // <op> <u2 op offset>
            code += reg_get_f32(r1) < reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R1_R6: // <op> <u2 op offset>
            code += reg_get_f32(r1) < reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R1_R7: // <op> <u2 op offset>
            code += reg_get_f32(r1) < reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R2_R0: // <op> <u2 op offset>
            code += reg_get_f32(r2) < reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R2_R1: // <op> <u2 op offset>
            code += reg_get_f32(r2) < reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R2_R2: // <op> <u2 op offset>
            code += reg_get_f32(r2) < reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R2_R3: // <op> <u2 op offset>
            code += reg_get_f32(r2) < reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R2_R4: // <op> <u2 op offset>
            code += reg_get_f32(r2) < reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R2_R5: // <op> <u2 op offset>
            code += reg_get_f32(r2) < reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R2_R6: // <op> <u2 op offset>
            code += reg_get_f32(r2) < reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R2_R7: // <op> <u2 op offset>
            code += reg_get_f32(r2) < reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R3_R0: // <op> <u2 op offset>
            code += reg_get_f32(r3) < reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R3_R1: // <op> <u2 op offset>
            code += reg_get_f32(r3) < reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R3_R2: // <op> <u2 op offset>
            code += reg_get_f32(r3) < reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R3_R3: // <op> <u2 op offset>
            code += reg_get_f32(r3) < reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R3_R4: // <op> <u2 op offset>
            code += reg_get_f32(r3) < reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R3_R5: // <op> <u2 op offset>
            code += reg_get_f32(r3) < reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R3_R6: // <op> <u2 op offset>
            code += reg_get_f32(r3) < reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R3_R7: // <op> <u2 op offset>
            code += reg_get_f32(r3) < reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R4_R0: // <op> <u2 op offset>
            code += reg_get_f32(r4) < reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R4_R1: // <op> <u2 op offset>
            code += reg_get_f32(r4) < reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R4_R2: // <op> <u2 op offset>
            code += reg_get_f32(r4) < reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R4_R3: // <op> <u2 op offset>
            code += reg_get_f32(r4) < reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R4_R4: // <op> <u2 op offset>
            code += reg_get_f32(r4) < reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R4_R5: // <op> <u2 op offset>
            code += reg_get_f32(r4) < reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R4_R6: // <op> <u2 op offset>
            code += reg_get_f32(r4) < reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R4_R7: // <op> <u2 op offset>
            code += reg_get_f32(r4) < reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R5_R0: // <op> <u2 op offset>
            code += reg_get_f32(r5) < reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R5_R1: // <op> <u2 op offset>
            code += reg_get_f32(r5) < reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R5_R2: // <op> <u2 op offset>
            code += reg_get_f32(r5) < reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R5_R3: // <op> <u2 op offset>
            code += reg_get_f32(r5) < reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R5_R4: // <op> <u2 op offset>
            code += reg_get_f32(r5) < reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R5_R5: // <op> <u2 op offset>
            code += reg_get_f32(r5) < reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R5_R6: // <op> <u2 op offset>
            code += reg_get_f32(r5) < reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R5_R7: // <op> <u2 op offset>
            code += reg_get_f32(r5) < reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R6_R0: // <op> <u2 op offset>
            code += reg_get_f32(r6) < reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R6_R1: // <op> <u2 op offset>
            code += reg_get_f32(r6) < reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R6_R2: // <op> <u2 op offset>
            code += reg_get_f32(r6) < reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R6_R3: // <op> <u2 op offset>
            code += reg_get_f32(r6) < reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R6_R4: // <op> <u2 op offset>
            code += reg_get_f32(r6) < reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R6_R5: // <op> <u2 op offset>
            code += reg_get_f32(r6) < reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R6_R6: // <op> <u2 op offset>
            code += reg_get_f32(r6) < reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R6_R7: // <op> <u2 op offset>
            code += reg_get_f32(r6) < reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R7_R0: // <op> <u2 op offset>
            code += reg_get_f32(r7) < reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R7_R1: // <op> <u2 op offset>
            code += reg_get_f32(r7) < reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R7_R2: // <op> <u2 op offset>
            code += reg_get_f32(r7) < reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R7_R3: // <op> <u2 op offset>
            code += reg_get_f32(r7) < reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R7_R4: // <op> <u2 op offset>
            code += reg_get_f32(r7) < reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R7_R5: // <op> <u2 op offset>
            code += reg_get_f32(r7) < reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R7_R6: // <op> <u2 op offset>
            code += reg_get_f32(r7) < reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF4_R7_R7: // <op> <u2 op offset>
            code += reg_get_f32(r7) < reg_get_f32(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BgtF4_R0_R0: // <op> <u2 op offset>
            code += reg_get_f32(r0) > reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R0_R1: // <op> <u2 op offset>
            code += reg_get_f32(r0) > reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R0_R2: // <op> <u2 op offset>
            code += reg_get_f32(r0) > reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R0_R3: // <op> <u2 op offset>
            code += reg_get_f32(r0) > reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R0_R4: // <op> <u2 op offset>
            code += reg_get_f32(r0) > reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R0_R5: // <op> <u2 op offset>
            code += reg_get_f32(r0) > reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R0_R6: // <op> <u2 op offset>
            code += reg_get_f32(r0) > reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R0_R7: // <op> <u2 op offset>
            code += reg_get_f32(r0) > reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R1_R0: // <op> <u2 op offset>
            code += reg_get_f32(r1) > reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R1_R1: // <op> <u2 op offset>
            code += reg_get_f32(r1) > reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R1_R2: // <op> <u2 op offset>
            code += reg_get_f32(r1) > reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R1_R3: // <op> <u2 op offset>
            code += reg_get_f32(r1) > reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R1_R4: // <op> <u2 op offset>
            code += reg_get_f32(r1) > reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R1_R5: // <op> <u2 op offset>
            code += reg_get_f32(r1) > reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R1_R6: // <op> <u2 op offset>
            code += reg_get_f32(r1) > reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R1_R7: // <op> <u2 op offset>
            code += reg_get_f32(r1) > reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R2_R0: // <op> <u2 op offset>
            code += reg_get_f32(r2) > reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R2_R1: // <op> <u2 op offset>
            code += reg_get_f32(r2) > reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R2_R2: // <op> <u2 op offset>
            code += reg_get_f32(r2) > reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R2_R3: // <op> <u2 op offset>
            code += reg_get_f32(r2) > reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R2_R4: // <op> <u2 op offset>
            code += reg_get_f32(r2) > reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R2_R5: // <op> <u2 op offset>
            code += reg_get_f32(r2) > reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R2_R6: // <op> <u2 op offset>
            code += reg_get_f32(r2) > reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R2_R7: // <op> <u2 op offset>
            code += reg_get_f32(r2) > reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R3_R0: // <op> <u2 op offset>
            code += reg_get_f32(r3) > reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R3_R1: // <op> <u2 op offset>
            code += reg_get_f32(r3) > reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R3_R2: // <op> <u2 op offset>
            code += reg_get_f32(r3) > reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R3_R3: // <op> <u2 op offset>
            code += reg_get_f32(r3) > reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R3_R4: // <op> <u2 op offset>
            code += reg_get_f32(r3) > reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R3_R5: // <op> <u2 op offset>
            code += reg_get_f32(r3) > reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R3_R6: // <op> <u2 op offset>
            code += reg_get_f32(r3) > reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R3_R7: // <op> <u2 op offset>
            code += reg_get_f32(r3) > reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R4_R0: // <op> <u2 op offset>
            code += reg_get_f32(r4) > reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R4_R1: // <op> <u2 op offset>
            code += reg_get_f32(r4) > reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R4_R2: // <op> <u2 op offset>
            code += reg_get_f32(r4) > reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R4_R3: // <op> <u2 op offset>
            code += reg_get_f32(r4) > reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R4_R4: // <op> <u2 op offset>
            code += reg_get_f32(r4) > reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R4_R5: // <op> <u2 op offset>
            code += reg_get_f32(r4) > reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R4_R6: // <op> <u2 op offset>
            code += reg_get_f32(r4) > reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R4_R7: // <op> <u2 op offset>
            code += reg_get_f32(r4) > reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R5_R0: // <op> <u2 op offset>
            code += reg_get_f32(r5) > reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R5_R1: // <op> <u2 op offset>
            code += reg_get_f32(r5) > reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R5_R2: // <op> <u2 op offset>
            code += reg_get_f32(r5) > reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R5_R3: // <op> <u2 op offset>
            code += reg_get_f32(r5) > reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R5_R4: // <op> <u2 op offset>
            code += reg_get_f32(r5) > reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R5_R5: // <op> <u2 op offset>
            code += reg_get_f32(r5) > reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R5_R6: // <op> <u2 op offset>
            code += reg_get_f32(r5) > reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R5_R7: // <op> <u2 op offset>
            code += reg_get_f32(r5) > reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R6_R0: // <op> <u2 op offset>
            code += reg_get_f32(r6) > reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R6_R1: // <op> <u2 op offset>
            code += reg_get_f32(r6) > reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R6_R2: // <op> <u2 op offset>
            code += reg_get_f32(r6) > reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R6_R3: // <op> <u2 op offset>
            code += reg_get_f32(r6) > reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R6_R4: // <op> <u2 op offset>
            code += reg_get_f32(r6) > reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R6_R5: // <op> <u2 op offset>
            code += reg_get_f32(r6) > reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R6_R6: // <op> <u2 op offset>
            code += reg_get_f32(r6) > reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R6_R7: // <op> <u2 op offset>
            code += reg_get_f32(r6) > reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R7_R0: // <op> <u2 op offset>
            code += reg_get_f32(r7) > reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R7_R1: // <op> <u2 op offset>
            code += reg_get_f32(r7) > reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R7_R2: // <op> <u2 op offset>
            code += reg_get_f32(r7) > reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R7_R3: // <op> <u2 op offset>
            code += reg_get_f32(r7) > reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R7_R4: // <op> <u2 op offset>
            code += reg_get_f32(r7) > reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R7_R5: // <op> <u2 op offset>
            code += reg_get_f32(r7) > reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R7_R6: // <op> <u2 op offset>
            code += reg_get_f32(r7) > reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF4_R7_R7: // <op> <u2 op offset>
            code += reg_get_f32(r7) > reg_get_f32(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BleF4_R0_R0: // <op> <u2 op offset>
            code += reg_get_f32(r0) <= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R0_R1: // <op> <u2 op offset>
            code += reg_get_f32(r0) <= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R0_R2: // <op> <u2 op offset>
            code += reg_get_f32(r0) <= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R0_R3: // <op> <u2 op offset>
            code += reg_get_f32(r0) <= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R0_R4: // <op> <u2 op offset>
            code += reg_get_f32(r0) <= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R0_R5: // <op> <u2 op offset>
            code += reg_get_f32(r0) <= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R0_R6: // <op> <u2 op offset>
            code += reg_get_f32(r0) <= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R0_R7: // <op> <u2 op offset>
            code += reg_get_f32(r0) <= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R1_R0: // <op> <u2 op offset>
            code += reg_get_f32(r1) <= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R1_R1: // <op> <u2 op offset>
            code += reg_get_f32(r1) <= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R1_R2: // <op> <u2 op offset>
            code += reg_get_f32(r1) <= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R1_R3: // <op> <u2 op offset>
            code += reg_get_f32(r1) <= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R1_R4: // <op> <u2 op offset>
            code += reg_get_f32(r1) <= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R1_R5: // <op> <u2 op offset>
            code += reg_get_f32(r1) <= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R1_R6: // <op> <u2 op offset>
            code += reg_get_f32(r1) <= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R1_R7: // <op> <u2 op offset>
            code += reg_get_f32(r1) <= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R2_R0: // <op> <u2 op offset>
            code += reg_get_f32(r2) <= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R2_R1: // <op> <u2 op offset>
            code += reg_get_f32(r2) <= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R2_R2: // <op> <u2 op offset>
            code += reg_get_f32(r2) <= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R2_R3: // <op> <u2 op offset>
            code += reg_get_f32(r2) <= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R2_R4: // <op> <u2 op offset>
            code += reg_get_f32(r2) <= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R2_R5: // <op> <u2 op offset>
            code += reg_get_f32(r2) <= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R2_R6: // <op> <u2 op offset>
            code += reg_get_f32(r2) <= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R2_R7: // <op> <u2 op offset>
            code += reg_get_f32(r2) <= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R3_R0: // <op> <u2 op offset>
            code += reg_get_f32(r3) <= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R3_R1: // <op> <u2 op offset>
            code += reg_get_f32(r3) <= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R3_R2: // <op> <u2 op offset>
            code += reg_get_f32(r3) <= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R3_R3: // <op> <u2 op offset>
            code += reg_get_f32(r3) <= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R3_R4: // <op> <u2 op offset>
            code += reg_get_f32(r3) <= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R3_R5: // <op> <u2 op offset>
            code += reg_get_f32(r3) <= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R3_R6: // <op> <u2 op offset>
            code += reg_get_f32(r3) <= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R3_R7: // <op> <u2 op offset>
            code += reg_get_f32(r3) <= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R4_R0: // <op> <u2 op offset>
            code += reg_get_f32(r4) <= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R4_R1: // <op> <u2 op offset>
            code += reg_get_f32(r4) <= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R4_R2: // <op> <u2 op offset>
            code += reg_get_f32(r4) <= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R4_R3: // <op> <u2 op offset>
            code += reg_get_f32(r4) <= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R4_R4: // <op> <u2 op offset>
            code += reg_get_f32(r4) <= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R4_R5: // <op> <u2 op offset>
            code += reg_get_f32(r4) <= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R4_R6: // <op> <u2 op offset>
            code += reg_get_f32(r4) <= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R4_R7: // <op> <u2 op offset>
            code += reg_get_f32(r4) <= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R5_R0: // <op> <u2 op offset>
            code += reg_get_f32(r5) <= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R5_R1: // <op> <u2 op offset>
            code += reg_get_f32(r5) <= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R5_R2: // <op> <u2 op offset>
            code += reg_get_f32(r5) <= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R5_R3: // <op> <u2 op offset>
            code += reg_get_f32(r5) <= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R5_R4: // <op> <u2 op offset>
            code += reg_get_f32(r5) <= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R5_R5: // <op> <u2 op offset>
            code += reg_get_f32(r5) <= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R5_R6: // <op> <u2 op offset>
            code += reg_get_f32(r5) <= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R5_R7: // <op> <u2 op offset>
            code += reg_get_f32(r5) <= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R6_R0: // <op> <u2 op offset>
            code += reg_get_f32(r6) <= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R6_R1: // <op> <u2 op offset>
            code += reg_get_f32(r6) <= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R6_R2: // <op> <u2 op offset>
            code += reg_get_f32(r6) <= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R6_R3: // <op> <u2 op offset>
            code += reg_get_f32(r6) <= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R6_R4: // <op> <u2 op offset>
            code += reg_get_f32(r6) <= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R6_R5: // <op> <u2 op offset>
            code += reg_get_f32(r6) <= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R6_R6: // <op> <u2 op offset>
            code += reg_get_f32(r6) <= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R6_R7: // <op> <u2 op offset>
            code += reg_get_f32(r6) <= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R7_R0: // <op> <u2 op offset>
            code += reg_get_f32(r7) <= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R7_R1: // <op> <u2 op offset>
            code += reg_get_f32(r7) <= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R7_R2: // <op> <u2 op offset>
            code += reg_get_f32(r7) <= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R7_R3: // <op> <u2 op offset>
            code += reg_get_f32(r7) <= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R7_R4: // <op> <u2 op offset>
            code += reg_get_f32(r7) <= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R7_R5: // <op> <u2 op offset>
            code += reg_get_f32(r7) <= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R7_R6: // <op> <u2 op offset>
            code += reg_get_f32(r7) <= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF4_R7_R7: // <op> <u2 op offset>
            code += reg_get_f32(r7) <= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BgeF4_R0_R0: // <op> <u2 op offset>
            code += reg_get_f32(r0) >= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R0_R1: // <op> <u2 op offset>
            code += reg_get_f32(r0) >= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R0_R2: // <op> <u2 op offset>
            code += reg_get_f32(r0) >= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R0_R3: // <op> <u2 op offset>
            code += reg_get_f32(r0) >= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R0_R4: // <op> <u2 op offset>
            code += reg_get_f32(r0) >= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R0_R5: // <op> <u2 op offset>
            code += reg_get_f32(r0) >= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R0_R6: // <op> <u2 op offset>
            code += reg_get_f32(r0) >= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R0_R7: // <op> <u2 op offset>
            code += reg_get_f32(r0) >= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R1_R0: // <op> <u2 op offset>
            code += reg_get_f32(r1) >= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R1_R1: // <op> <u2 op offset>
            code += reg_get_f32(r1) >= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R1_R2: // <op> <u2 op offset>
            code += reg_get_f32(r1) >= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R1_R3: // <op> <u2 op offset>
            code += reg_get_f32(r1) >= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R1_R4: // <op> <u2 op offset>
            code += reg_get_f32(r1) >= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R1_R5: // <op> <u2 op offset>
            code += reg_get_f32(r1) >= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R1_R6: // <op> <u2 op offset>
            code += reg_get_f32(r1) >= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R1_R7: // <op> <u2 op offset>
            code += reg_get_f32(r1) >= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R2_R0: // <op> <u2 op offset>
            code += reg_get_f32(r2) >= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R2_R1: // <op> <u2 op offset>
            code += reg_get_f32(r2) >= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R2_R2: // <op> <u2 op offset>
            code += reg_get_f32(r2) >= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R2_R3: // <op> <u2 op offset>
            code += reg_get_f32(r2) >= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R2_R4: // <op> <u2 op offset>
            code += reg_get_f32(r2) >= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R2_R5: // <op> <u2 op offset>
            code += reg_get_f32(r2) >= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R2_R6: // <op> <u2 op offset>
            code += reg_get_f32(r2) >= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R2_R7: // <op> <u2 op offset>
            code += reg_get_f32(r2) >= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R3_R0: // <op> <u2 op offset>
            code += reg_get_f32(r3) >= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R3_R1: // <op> <u2 op offset>
            code += reg_get_f32(r3) >= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R3_R2: // <op> <u2 op offset>
            code += reg_get_f32(r3) >= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R3_R3: // <op> <u2 op offset>
            code += reg_get_f32(r3) >= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R3_R4: // <op> <u2 op offset>
            code += reg_get_f32(r3) >= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R3_R5: // <op> <u2 op offset>
            code += reg_get_f32(r3) >= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R3_R6: // <op> <u2 op offset>
            code += reg_get_f32(r3) >= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R3_R7: // <op> <u2 op offset>
            code += reg_get_f32(r3) >= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R4_R0: // <op> <u2 op offset>
            code += reg_get_f32(r4) >= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R4_R1: // <op> <u2 op offset>
            code += reg_get_f32(r4) >= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R4_R2: // <op> <u2 op offset>
            code += reg_get_f32(r4) >= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R4_R3: // <op> <u2 op offset>
            code += reg_get_f32(r4) >= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R4_R4: // <op> <u2 op offset>
            code += reg_get_f32(r4) >= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R4_R5: // <op> <u2 op offset>
            code += reg_get_f32(r4) >= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R4_R6: // <op> <u2 op offset>
            code += reg_get_f32(r4) >= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R4_R7: // <op> <u2 op offset>
            code += reg_get_f32(r4) >= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R5_R0: // <op> <u2 op offset>
            code += reg_get_f32(r5) >= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R5_R1: // <op> <u2 op offset>
            code += reg_get_f32(r5) >= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R5_R2: // <op> <u2 op offset>
            code += reg_get_f32(r5) >= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R5_R3: // <op> <u2 op offset>
            code += reg_get_f32(r5) >= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R5_R4: // <op> <u2 op offset>
            code += reg_get_f32(r5) >= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R5_R5: // <op> <u2 op offset>
            code += reg_get_f32(r5) >= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R5_R6: // <op> <u2 op offset>
            code += reg_get_f32(r5) >= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R5_R7: // <op> <u2 op offset>
            code += reg_get_f32(r5) >= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R6_R0: // <op> <u2 op offset>
            code += reg_get_f32(r6) >= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R6_R1: // <op> <u2 op offset>
            code += reg_get_f32(r6) >= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R6_R2: // <op> <u2 op offset>
            code += reg_get_f32(r6) >= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R6_R3: // <op> <u2 op offset>
            code += reg_get_f32(r6) >= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R6_R4: // <op> <u2 op offset>
            code += reg_get_f32(r6) >= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R6_R5: // <op> <u2 op offset>
            code += reg_get_f32(r6) >= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R6_R6: // <op> <u2 op offset>
            code += reg_get_f32(r6) >= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R6_R7: // <op> <u2 op offset>
            code += reg_get_f32(r6) >= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R7_R0: // <op> <u2 op offset>
            code += reg_get_f32(r7) >= reg_get_f32(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R7_R1: // <op> <u2 op offset>
            code += reg_get_f32(r7) >= reg_get_f32(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R7_R2: // <op> <u2 op offset>
            code += reg_get_f32(r7) >= reg_get_f32(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R7_R3: // <op> <u2 op offset>
            code += reg_get_f32(r7) >= reg_get_f32(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R7_R4: // <op> <u2 op offset>
            code += reg_get_f32(r7) >= reg_get_f32(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R7_R5: // <op> <u2 op offset>
            code += reg_get_f32(r7) >= reg_get_f32(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R7_R6: // <op> <u2 op offset>
            code += reg_get_f32(r7) >= reg_get_f32(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF4_R7_R7: // <op> <u2 op offset>
            code += reg_get_f32(r7) >= reg_get_f32(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BeqF8_R0_R0: // <op> <u2 op offset>
            code += reg_get_f64(r0) == reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R0_R1: // <op> <u2 op offset>
            code += reg_get_f64(r0) == reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R0_R2: // <op> <u2 op offset>
            code += reg_get_f64(r0) == reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R0_R3: // <op> <u2 op offset>
            code += reg_get_f64(r0) == reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R0_R4: // <op> <u2 op offset>
            code += reg_get_f64(r0) == reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R0_R5: // <op> <u2 op offset>
            code += reg_get_f64(r0) == reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R0_R6: // <op> <u2 op offset>
            code += reg_get_f64(r0) == reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R0_R7: // <op> <u2 op offset>
            code += reg_get_f64(r0) == reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R1_R0: // <op> <u2 op offset>
            code += reg_get_f64(r1) == reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R1_R1: // <op> <u2 op offset>
            code += reg_get_f64(r1) == reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R1_R2: // <op> <u2 op offset>
            code += reg_get_f64(r1) == reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R1_R3: // <op> <u2 op offset>
            code += reg_get_f64(r1) == reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R1_R4: // <op> <u2 op offset>
            code += reg_get_f64(r1) == reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R1_R5: // <op> <u2 op offset>
            code += reg_get_f64(r1) == reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R1_R6: // <op> <u2 op offset>
            code += reg_get_f64(r1) == reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R1_R7: // <op> <u2 op offset>
            code += reg_get_f64(r1) == reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R2_R0: // <op> <u2 op offset>
            code += reg_get_f64(r2) == reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R2_R1: // <op> <u2 op offset>
            code += reg_get_f64(r2) == reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R2_R2: // <op> <u2 op offset>
            code += reg_get_f64(r2) == reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R2_R3: // <op> <u2 op offset>
            code += reg_get_f64(r2) == reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R2_R4: // <op> <u2 op offset>
            code += reg_get_f64(r2) == reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R2_R5: // <op> <u2 op offset>
            code += reg_get_f64(r2) == reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R2_R6: // <op> <u2 op offset>
            code += reg_get_f64(r2) == reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R2_R7: // <op> <u2 op offset>
            code += reg_get_f64(r2) == reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R3_R0: // <op> <u2 op offset>
            code += reg_get_f64(r3) == reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R3_R1: // <op> <u2 op offset>
            code += reg_get_f64(r3) == reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R3_R2: // <op> <u2 op offset>
            code += reg_get_f64(r3) == reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R3_R3: // <op> <u2 op offset>
            code += reg_get_f64(r3) == reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R3_R4: // <op> <u2 op offset>
            code += reg_get_f64(r3) == reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R3_R5: // <op> <u2 op offset>
            code += reg_get_f64(r3) == reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R3_R6: // <op> <u2 op offset>
            code += reg_get_f64(r3) == reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R3_R7: // <op> <u2 op offset>
            code += reg_get_f64(r3) == reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R4_R0: // <op> <u2 op offset>
            code += reg_get_f64(r4) == reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R4_R1: // <op> <u2 op offset>
            code += reg_get_f64(r4) == reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R4_R2: // <op> <u2 op offset>
            code += reg_get_f64(r4) == reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R4_R3: // <op> <u2 op offset>
            code += reg_get_f64(r4) == reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R4_R4: // <op> <u2 op offset>
            code += reg_get_f64(r4) == reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R4_R5: // <op> <u2 op offset>
            code += reg_get_f64(r4) == reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R4_R6: // <op> <u2 op offset>
            code += reg_get_f64(r4) == reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R4_R7: // <op> <u2 op offset>
            code += reg_get_f64(r4) == reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R5_R0: // <op> <u2 op offset>
            code += reg_get_f64(r5) == reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R5_R1: // <op> <u2 op offset>
            code += reg_get_f64(r5) == reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R5_R2: // <op> <u2 op offset>
            code += reg_get_f64(r5) == reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R5_R3: // <op> <u2 op offset>
            code += reg_get_f64(r5) == reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R5_R4: // <op> <u2 op offset>
            code += reg_get_f64(r5) == reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R5_R5: // <op> <u2 op offset>
            code += reg_get_f64(r5) == reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R5_R6: // <op> <u2 op offset>
            code += reg_get_f64(r5) == reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R5_R7: // <op> <u2 op offset>
            code += reg_get_f64(r5) == reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R6_R0: // <op> <u2 op offset>
            code += reg_get_f64(r6) == reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R6_R1: // <op> <u2 op offset>
            code += reg_get_f64(r6) == reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R6_R2: // <op> <u2 op offset>
            code += reg_get_f64(r6) == reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R6_R3: // <op> <u2 op offset>
            code += reg_get_f64(r6) == reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R6_R4: // <op> <u2 op offset>
            code += reg_get_f64(r6) == reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R6_R5: // <op> <u2 op offset>
            code += reg_get_f64(r6) == reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R6_R6: // <op> <u2 op offset>
            code += reg_get_f64(r6) == reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R6_R7: // <op> <u2 op offset>
            code += reg_get_f64(r6) == reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R7_R0: // <op> <u2 op offset>
            code += reg_get_f64(r7) == reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R7_R1: // <op> <u2 op offset>
            code += reg_get_f64(r7) == reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R7_R2: // <op> <u2 op offset>
            code += reg_get_f64(r7) == reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R7_R3: // <op> <u2 op offset>
            code += reg_get_f64(r7) == reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R7_R4: // <op> <u2 op offset>
            code += reg_get_f64(r7) == reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R7_R5: // <op> <u2 op offset>
            code += reg_get_f64(r7) == reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R7_R6: // <op> <u2 op offset>
            code += reg_get_f64(r7) == reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BeqF8_R7_R7: // <op> <u2 op offset>
            code += reg_get_f64(r7) == reg_get_f64(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BneF8_R0_R0: // <op> <u2 op offset>
            code += reg_get_f64(r0) != reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R0_R1: // <op> <u2 op offset>
            code += reg_get_f64(r0) != reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R0_R2: // <op> <u2 op offset>
            code += reg_get_f64(r0) != reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R0_R3: // <op> <u2 op offset>
            code += reg_get_f64(r0) != reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R0_R4: // <op> <u2 op offset>
            code += reg_get_f64(r0) != reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R0_R5: // <op> <u2 op offset>
            code += reg_get_f64(r0) != reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R0_R6: // <op> <u2 op offset>
            code += reg_get_f64(r0) != reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R0_R7: // <op> <u2 op offset>
            code += reg_get_f64(r0) != reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R1_R0: // <op> <u2 op offset>
            code += reg_get_f64(r1) != reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R1_R1: // <op> <u2 op offset>
            code += reg_get_f64(r1) != reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R1_R2: // <op> <u2 op offset>
            code += reg_get_f64(r1) != reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R1_R3: // <op> <u2 op offset>
            code += reg_get_f64(r1) != reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R1_R4: // <op> <u2 op offset>
            code += reg_get_f64(r1) != reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R1_R5: // <op> <u2 op offset>
            code += reg_get_f64(r1) != reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R1_R6: // <op> <u2 op offset>
            code += reg_get_f64(r1) != reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R1_R7: // <op> <u2 op offset>
            code += reg_get_f64(r1) != reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R2_R0: // <op> <u2 op offset>
            code += reg_get_f64(r2) != reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R2_R1: // <op> <u2 op offset>
            code += reg_get_f64(r2) != reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R2_R2: // <op> <u2 op offset>
            code += reg_get_f64(r2) != reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R2_R3: // <op> <u2 op offset>
            code += reg_get_f64(r2) != reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R2_R4: // <op> <u2 op offset>
            code += reg_get_f64(r2) != reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R2_R5: // <op> <u2 op offset>
            code += reg_get_f64(r2) != reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R2_R6: // <op> <u2 op offset>
            code += reg_get_f64(r2) != reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R2_R7: // <op> <u2 op offset>
            code += reg_get_f64(r2) != reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R3_R0: // <op> <u2 op offset>
            code += reg_get_f64(r3) != reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R3_R1: // <op> <u2 op offset>
            code += reg_get_f64(r3) != reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R3_R2: // <op> <u2 op offset>
            code += reg_get_f64(r3) != reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R3_R3: // <op> <u2 op offset>
            code += reg_get_f64(r3) != reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R3_R4: // <op> <u2 op offset>
            code += reg_get_f64(r3) != reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R3_R5: // <op> <u2 op offset>
            code += reg_get_f64(r3) != reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R3_R6: // <op> <u2 op offset>
            code += reg_get_f64(r3) != reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R3_R7: // <op> <u2 op offset>
            code += reg_get_f64(r3) != reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R4_R0: // <op> <u2 op offset>
            code += reg_get_f64(r4) != reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R4_R1: // <op> <u2 op offset>
            code += reg_get_f64(r4) != reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R4_R2: // <op> <u2 op offset>
            code += reg_get_f64(r4) != reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R4_R3: // <op> <u2 op offset>
            code += reg_get_f64(r4) != reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R4_R4: // <op> <u2 op offset>
            code += reg_get_f64(r4) != reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R4_R5: // <op> <u2 op offset>
            code += reg_get_f64(r4) != reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R4_R6: // <op> <u2 op offset>
            code += reg_get_f64(r4) != reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R4_R7: // <op> <u2 op offset>
            code += reg_get_f64(r4) != reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R5_R0: // <op> <u2 op offset>
            code += reg_get_f64(r5) != reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R5_R1: // <op> <u2 op offset>
            code += reg_get_f64(r5) != reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R5_R2: // <op> <u2 op offset>
            code += reg_get_f64(r5) != reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R5_R3: // <op> <u2 op offset>
            code += reg_get_f64(r5) != reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R5_R4: // <op> <u2 op offset>
            code += reg_get_f64(r5) != reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R5_R5: // <op> <u2 op offset>
            code += reg_get_f64(r5) != reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R5_R6: // <op> <u2 op offset>
            code += reg_get_f64(r5) != reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R5_R7: // <op> <u2 op offset>
            code += reg_get_f64(r5) != reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R6_R0: // <op> <u2 op offset>
            code += reg_get_f64(r6) != reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R6_R1: // <op> <u2 op offset>
            code += reg_get_f64(r6) != reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R6_R2: // <op> <u2 op offset>
            code += reg_get_f64(r6) != reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R6_R3: // <op> <u2 op offset>
            code += reg_get_f64(r6) != reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R6_R4: // <op> <u2 op offset>
            code += reg_get_f64(r6) != reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R6_R5: // <op> <u2 op offset>
            code += reg_get_f64(r6) != reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R6_R6: // <op> <u2 op offset>
            code += reg_get_f64(r6) != reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R6_R7: // <op> <u2 op offset>
            code += reg_get_f64(r6) != reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R7_R0: // <op> <u2 op offset>
            code += reg_get_f64(r7) != reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R7_R1: // <op> <u2 op offset>
            code += reg_get_f64(r7) != reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R7_R2: // <op> <u2 op offset>
            code += reg_get_f64(r7) != reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R7_R3: // <op> <u2 op offset>
            code += reg_get_f64(r7) != reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R7_R4: // <op> <u2 op offset>
            code += reg_get_f64(r7) != reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R7_R5: // <op> <u2 op offset>
            code += reg_get_f64(r7) != reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R7_R6: // <op> <u2 op offset>
            code += reg_get_f64(r7) != reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BneF8_R7_R7: // <op> <u2 op offset>
            code += reg_get_f64(r7) != reg_get_f64(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BltF8_R0_R0: // <op> <u2 op offset>
            code += reg_get_f64(r0) < reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R0_R1: // <op> <u2 op offset>
            code += reg_get_f64(r0) < reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R0_R2: // <op> <u2 op offset>
            code += reg_get_f64(r0) < reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R0_R3: // <op> <u2 op offset>
            code += reg_get_f64(r0) < reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R0_R4: // <op> <u2 op offset>
            code += reg_get_f64(r0) < reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R0_R5: // <op> <u2 op offset>
            code += reg_get_f64(r0) < reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R0_R6: // <op> <u2 op offset>
            code += reg_get_f64(r0) < reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R0_R7: // <op> <u2 op offset>
            code += reg_get_f64(r0) < reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R1_R0: // <op> <u2 op offset>
            code += reg_get_f64(r1) < reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R1_R1: // <op> <u2 op offset>
            code += reg_get_f64(r1) < reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R1_R2: // <op> <u2 op offset>
            code += reg_get_f64(r1) < reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R1_R3: // <op> <u2 op offset>
            code += reg_get_f64(r1) < reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R1_R4: // <op> <u2 op offset>
            code += reg_get_f64(r1) < reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R1_R5: // <op> <u2 op offset>
            code += reg_get_f64(r1) < reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R1_R6: // <op> <u2 op offset>
            code += reg_get_f64(r1) < reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R1_R7: // <op> <u2 op offset>
            code += reg_get_f64(r1) < reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R2_R0: // <op> <u2 op offset>
            code += reg_get_f64(r2) < reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R2_R1: // <op> <u2 op offset>
            code += reg_get_f64(r2) < reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R2_R2: // <op> <u2 op offset>
            code += reg_get_f64(r2) < reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R2_R3: // <op> <u2 op offset>
            code += reg_get_f64(r2) < reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R2_R4: // <op> <u2 op offset>
            code += reg_get_f64(r2) < reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R2_R5: // <op> <u2 op offset>
            code += reg_get_f64(r2) < reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R2_R6: // <op> <u2 op offset>
            code += reg_get_f64(r2) < reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R2_R7: // <op> <u2 op offset>
            code += reg_get_f64(r2) < reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R3_R0: // <op> <u2 op offset>
            code += reg_get_f64(r3) < reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R3_R1: // <op> <u2 op offset>
            code += reg_get_f64(r3) < reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R3_R2: // <op> <u2 op offset>
            code += reg_get_f64(r3) < reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R3_R3: // <op> <u2 op offset>
            code += reg_get_f64(r3) < reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R3_R4: // <op> <u2 op offset>
            code += reg_get_f64(r3) < reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R3_R5: // <op> <u2 op offset>
            code += reg_get_f64(r3) < reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R3_R6: // <op> <u2 op offset>
            code += reg_get_f64(r3) < reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R3_R7: // <op> <u2 op offset>
            code += reg_get_f64(r3) < reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R4_R0: // <op> <u2 op offset>
            code += reg_get_f64(r4) < reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R4_R1: // <op> <u2 op offset>
            code += reg_get_f64(r4) < reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R4_R2: // <op> <u2 op offset>
            code += reg_get_f64(r4) < reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R4_R3: // <op> <u2 op offset>
            code += reg_get_f64(r4) < reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R4_R4: // <op> <u2 op offset>
            code += reg_get_f64(r4) < reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R4_R5: // <op> <u2 op offset>
            code += reg_get_f64(r4) < reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R4_R6: // <op> <u2 op offset>
            code += reg_get_f64(r4) < reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R4_R7: // <op> <u2 op offset>
            code += reg_get_f64(r4) < reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R5_R0: // <op> <u2 op offset>
            code += reg_get_f64(r5) < reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R5_R1: // <op> <u2 op offset>
            code += reg_get_f64(r5) < reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R5_R2: // <op> <u2 op offset>
            code += reg_get_f64(r5) < reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R5_R3: // <op> <u2 op offset>
            code += reg_get_f64(r5) < reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R5_R4: // <op> <u2 op offset>
            code += reg_get_f64(r5) < reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R5_R5: // <op> <u2 op offset>
            code += reg_get_f64(r5) < reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R5_R6: // <op> <u2 op offset>
            code += reg_get_f64(r5) < reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R5_R7: // <op> <u2 op offset>
            code += reg_get_f64(r5) < reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R6_R0: // <op> <u2 op offset>
            code += reg_get_f64(r6) < reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R6_R1: // <op> <u2 op offset>
            code += reg_get_f64(r6) < reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R6_R2: // <op> <u2 op offset>
            code += reg_get_f64(r6) < reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R6_R3: // <op> <u2 op offset>
            code += reg_get_f64(r6) < reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R6_R4: // <op> <u2 op offset>
            code += reg_get_f64(r6) < reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R6_R5: // <op> <u2 op offset>
            code += reg_get_f64(r6) < reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R6_R6: // <op> <u2 op offset>
            code += reg_get_f64(r6) < reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R6_R7: // <op> <u2 op offset>
            code += reg_get_f64(r6) < reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R7_R0: // <op> <u2 op offset>
            code += reg_get_f64(r7) < reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R7_R1: // <op> <u2 op offset>
            code += reg_get_f64(r7) < reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R7_R2: // <op> <u2 op offset>
            code += reg_get_f64(r7) < reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R7_R3: // <op> <u2 op offset>
            code += reg_get_f64(r7) < reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R7_R4: // <op> <u2 op offset>
            code += reg_get_f64(r7) < reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R7_R5: // <op> <u2 op offset>
            code += reg_get_f64(r7) < reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R7_R6: // <op> <u2 op offset>
            code += reg_get_f64(r7) < reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BltF8_R7_R7: // <op> <u2 op offset>
            code += reg_get_f64(r7) < reg_get_f64(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BgtF8_R0_R0: // <op> <u2 op offset>
            code += reg_get_f64(r0) > reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R0_R1: // <op> <u2 op offset>
            code += reg_get_f64(r0) > reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R0_R2: // <op> <u2 op offset>
            code += reg_get_f64(r0) > reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R0_R3: // <op> <u2 op offset>
            code += reg_get_f64(r0) > reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R0_R4: // <op> <u2 op offset>
            code += reg_get_f64(r0) > reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R0_R5: // <op> <u2 op offset>
            code += reg_get_f64(r0) > reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R0_R6: // <op> <u2 op offset>
            code += reg_get_f64(r0) > reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R0_R7: // <op> <u2 op offset>
            code += reg_get_f64(r0) > reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R1_R0: // <op> <u2 op offset>
            code += reg_get_f64(r1) > reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R1_R1: // <op> <u2 op offset>
            code += reg_get_f64(r1) > reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R1_R2: // <op> <u2 op offset>
            code += reg_get_f64(r1) > reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R1_R3: // <op> <u2 op offset>
            code += reg_get_f64(r1) > reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R1_R4: // <op> <u2 op offset>
            code += reg_get_f64(r1) > reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R1_R5: // <op> <u2 op offset>
            code += reg_get_f64(r1) > reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R1_R6: // <op> <u2 op offset>
            code += reg_get_f64(r1) > reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R1_R7: // <op> <u2 op offset>
            code += reg_get_f64(r1) > reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R2_R0: // <op> <u2 op offset>
            code += reg_get_f64(r2) > reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R2_R1: // <op> <u2 op offset>
            code += reg_get_f64(r2) > reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R2_R2: // <op> <u2 op offset>
            code += reg_get_f64(r2) > reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R2_R3: // <op> <u2 op offset>
            code += reg_get_f64(r2) > reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R2_R4: // <op> <u2 op offset>
            code += reg_get_f64(r2) > reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R2_R5: // <op> <u2 op offset>
            code += reg_get_f64(r2) > reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R2_R6: // <op> <u2 op offset>
            code += reg_get_f64(r2) > reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R2_R7: // <op> <u2 op offset>
            code += reg_get_f64(r2) > reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R3_R0: // <op> <u2 op offset>
            code += reg_get_f64(r3) > reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R3_R1: // <op> <u2 op offset>
            code += reg_get_f64(r3) > reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R3_R2: // <op> <u2 op offset>
            code += reg_get_f64(r3) > reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R3_R3: // <op> <u2 op offset>
            code += reg_get_f64(r3) > reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R3_R4: // <op> <u2 op offset>
            code += reg_get_f64(r3) > reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R3_R5: // <op> <u2 op offset>
            code += reg_get_f64(r3) > reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R3_R6: // <op> <u2 op offset>
            code += reg_get_f64(r3) > reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R3_R7: // <op> <u2 op offset>
            code += reg_get_f64(r3) > reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R4_R0: // <op> <u2 op offset>
            code += reg_get_f64(r4) > reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R4_R1: // <op> <u2 op offset>
            code += reg_get_f64(r4) > reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R4_R2: // <op> <u2 op offset>
            code += reg_get_f64(r4) > reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R4_R3: // <op> <u2 op offset>
            code += reg_get_f64(r4) > reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R4_R4: // <op> <u2 op offset>
            code += reg_get_f64(r4) > reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R4_R5: // <op> <u2 op offset>
            code += reg_get_f64(r4) > reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R4_R6: // <op> <u2 op offset>
            code += reg_get_f64(r4) > reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R4_R7: // <op> <u2 op offset>
            code += reg_get_f64(r4) > reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R5_R0: // <op> <u2 op offset>
            code += reg_get_f64(r5) > reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R5_R1: // <op> <u2 op offset>
            code += reg_get_f64(r5) > reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R5_R2: // <op> <u2 op offset>
            code += reg_get_f64(r5) > reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R5_R3: // <op> <u2 op offset>
            code += reg_get_f64(r5) > reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R5_R4: // <op> <u2 op offset>
            code += reg_get_f64(r5) > reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R5_R5: // <op> <u2 op offset>
            code += reg_get_f64(r5) > reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R5_R6: // <op> <u2 op offset>
            code += reg_get_f64(r5) > reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R5_R7: // <op> <u2 op offset>
            code += reg_get_f64(r5) > reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R6_R0: // <op> <u2 op offset>
            code += reg_get_f64(r6) > reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R6_R1: // <op> <u2 op offset>
            code += reg_get_f64(r6) > reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R6_R2: // <op> <u2 op offset>
            code += reg_get_f64(r6) > reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R6_R3: // <op> <u2 op offset>
            code += reg_get_f64(r6) > reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R6_R4: // <op> <u2 op offset>
            code += reg_get_f64(r6) > reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R6_R5: // <op> <u2 op offset>
            code += reg_get_f64(r6) > reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R6_R6: // <op> <u2 op offset>
            code += reg_get_f64(r6) > reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R6_R7: // <op> <u2 op offset>
            code += reg_get_f64(r6) > reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R7_R0: // <op> <u2 op offset>
            code += reg_get_f64(r7) > reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R7_R1: // <op> <u2 op offset>
            code += reg_get_f64(r7) > reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R7_R2: // <op> <u2 op offset>
            code += reg_get_f64(r7) > reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R7_R3: // <op> <u2 op offset>
            code += reg_get_f64(r7) > reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R7_R4: // <op> <u2 op offset>
            code += reg_get_f64(r7) > reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R7_R5: // <op> <u2 op offset>
            code += reg_get_f64(r7) > reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R7_R6: // <op> <u2 op offset>
            code += reg_get_f64(r7) > reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgtF8_R7_R7: // <op> <u2 op offset>
            code += reg_get_f64(r7) > reg_get_f64(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BleF8_R0_R0: // <op> <u2 op offset>
            code += reg_get_f64(r0) <= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R0_R1: // <op> <u2 op offset>
            code += reg_get_f64(r0) <= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R0_R2: // <op> <u2 op offset>
            code += reg_get_f64(r0) <= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R0_R3: // <op> <u2 op offset>
            code += reg_get_f64(r0) <= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R0_R4: // <op> <u2 op offset>
            code += reg_get_f64(r0) <= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R0_R5: // <op> <u2 op offset>
            code += reg_get_f64(r0) <= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R0_R6: // <op> <u2 op offset>
            code += reg_get_f64(r0) <= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R0_R7: // <op> <u2 op offset>
            code += reg_get_f64(r0) <= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R1_R0: // <op> <u2 op offset>
            code += reg_get_f64(r1) <= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R1_R1: // <op> <u2 op offset>
            code += reg_get_f64(r1) <= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R1_R2: // <op> <u2 op offset>
            code += reg_get_f64(r1) <= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R1_R3: // <op> <u2 op offset>
            code += reg_get_f64(r1) <= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R1_R4: // <op> <u2 op offset>
            code += reg_get_f64(r1) <= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R1_R5: // <op> <u2 op offset>
            code += reg_get_f64(r1) <= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R1_R6: // <op> <u2 op offset>
            code += reg_get_f64(r1) <= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R1_R7: // <op> <u2 op offset>
            code += reg_get_f64(r1) <= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R2_R0: // <op> <u2 op offset>
            code += reg_get_f64(r2) <= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R2_R1: // <op> <u2 op offset>
            code += reg_get_f64(r2) <= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R2_R2: // <op> <u2 op offset>
            code += reg_get_f64(r2) <= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R2_R3: // <op> <u2 op offset>
            code += reg_get_f64(r2) <= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R2_R4: // <op> <u2 op offset>
            code += reg_get_f64(r2) <= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R2_R5: // <op> <u2 op offset>
            code += reg_get_f64(r2) <= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R2_R6: // <op> <u2 op offset>
            code += reg_get_f64(r2) <= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R2_R7: // <op> <u2 op offset>
            code += reg_get_f64(r2) <= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R3_R0: // <op> <u2 op offset>
            code += reg_get_f64(r3) <= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R3_R1: // <op> <u2 op offset>
            code += reg_get_f64(r3) <= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R3_R2: // <op> <u2 op offset>
            code += reg_get_f64(r3) <= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R3_R3: // <op> <u2 op offset>
            code += reg_get_f64(r3) <= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R3_R4: // <op> <u2 op offset>
            code += reg_get_f64(r3) <= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R3_R5: // <op> <u2 op offset>
            code += reg_get_f64(r3) <= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R3_R6: // <op> <u2 op offset>
            code += reg_get_f64(r3) <= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R3_R7: // <op> <u2 op offset>
            code += reg_get_f64(r3) <= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R4_R0: // <op> <u2 op offset>
            code += reg_get_f64(r4) <= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R4_R1: // <op> <u2 op offset>
            code += reg_get_f64(r4) <= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R4_R2: // <op> <u2 op offset>
            code += reg_get_f64(r4) <= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R4_R3: // <op> <u2 op offset>
            code += reg_get_f64(r4) <= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R4_R4: // <op> <u2 op offset>
            code += reg_get_f64(r4) <= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R4_R5: // <op> <u2 op offset>
            code += reg_get_f64(r4) <= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R4_R6: // <op> <u2 op offset>
            code += reg_get_f64(r4) <= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R4_R7: // <op> <u2 op offset>
            code += reg_get_f64(r4) <= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R5_R0: // <op> <u2 op offset>
            code += reg_get_f64(r5) <= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R5_R1: // <op> <u2 op offset>
            code += reg_get_f64(r5) <= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R5_R2: // <op> <u2 op offset>
            code += reg_get_f64(r5) <= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R5_R3: // <op> <u2 op offset>
            code += reg_get_f64(r5) <= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R5_R4: // <op> <u2 op offset>
            code += reg_get_f64(r5) <= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R5_R5: // <op> <u2 op offset>
            code += reg_get_f64(r5) <= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R5_R6: // <op> <u2 op offset>
            code += reg_get_f64(r5) <= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R5_R7: // <op> <u2 op offset>
            code += reg_get_f64(r5) <= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R6_R0: // <op> <u2 op offset>
            code += reg_get_f64(r6) <= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R6_R1: // <op> <u2 op offset>
            code += reg_get_f64(r6) <= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R6_R2: // <op> <u2 op offset>
            code += reg_get_f64(r6) <= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R6_R3: // <op> <u2 op offset>
            code += reg_get_f64(r6) <= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R6_R4: // <op> <u2 op offset>
            code += reg_get_f64(r6) <= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R6_R5: // <op> <u2 op offset>
            code += reg_get_f64(r6) <= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R6_R6: // <op> <u2 op offset>
            code += reg_get_f64(r6) <= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R6_R7: // <op> <u2 op offset>
            code += reg_get_f64(r6) <= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R7_R0: // <op> <u2 op offset>
            code += reg_get_f64(r7) <= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R7_R1: // <op> <u2 op offset>
            code += reg_get_f64(r7) <= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R7_R2: // <op> <u2 op offset>
            code += reg_get_f64(r7) <= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R7_R3: // <op> <u2 op offset>
            code += reg_get_f64(r7) <= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R7_R4: // <op> <u2 op offset>
            code += reg_get_f64(r7) <= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R7_R5: // <op> <u2 op offset>
            code += reg_get_f64(r7) <= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R7_R6: // <op> <u2 op offset>
            code += reg_get_f64(r7) <= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BleF8_R7_R7: // <op> <u2 op offset>
            code += reg_get_f64(r7) <= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;

        case OpCode::BgeF8_R0_R0: // <op> <u2 op offset>
            code += reg_get_f64(r0) >= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R0_R1: // <op> <u2 op offset>
            code += reg_get_f64(r0) >= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R0_R2: // <op> <u2 op offset>
            code += reg_get_f64(r0) >= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R0_R3: // <op> <u2 op offset>
            code += reg_get_f64(r0) >= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R0_R4: // <op> <u2 op offset>
            code += reg_get_f64(r0) >= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R0_R5: // <op> <u2 op offset>
            code += reg_get_f64(r0) >= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R0_R6: // <op> <u2 op offset>
            code += reg_get_f64(r0) >= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R0_R7: // <op> <u2 op offset>
            code += reg_get_f64(r0) >= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R1_R0: // <op> <u2 op offset>
            code += reg_get_f64(r1) >= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R1_R1: // <op> <u2 op offset>
            code += reg_get_f64(r1) >= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R1_R2: // <op> <u2 op offset>
            code += reg_get_f64(r1) >= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R1_R3: // <op> <u2 op offset>
            code += reg_get_f64(r1) >= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R1_R4: // <op> <u2 op offset>
            code += reg_get_f64(r1) >= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R1_R5: // <op> <u2 op offset>
            code += reg_get_f64(r1) >= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R1_R6: // <op> <u2 op offset>
            code += reg_get_f64(r1) >= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R1_R7: // <op> <u2 op offset>
            code += reg_get_f64(r1) >= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R2_R0: // <op> <u2 op offset>
            code += reg_get_f64(r2) >= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R2_R1: // <op> <u2 op offset>
            code += reg_get_f64(r2) >= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R2_R2: // <op> <u2 op offset>
            code += reg_get_f64(r2) >= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R2_R3: // <op> <u2 op offset>
            code += reg_get_f64(r2) >= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R2_R4: // <op> <u2 op offset>
            code += reg_get_f64(r2) >= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R2_R5: // <op> <u2 op offset>
            code += reg_get_f64(r2) >= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R2_R6: // <op> <u2 op offset>
            code += reg_get_f64(r2) >= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R2_R7: // <op> <u2 op offset>
            code += reg_get_f64(r2) >= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R3_R0: // <op> <u2 op offset>
            code += reg_get_f64(r3) >= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R3_R1: // <op> <u2 op offset>
            code += reg_get_f64(r3) >= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R3_R2: // <op> <u2 op offset>
            code += reg_get_f64(r3) >= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R3_R3: // <op> <u2 op offset>
            code += reg_get_f64(r3) >= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R3_R4: // <op> <u2 op offset>
            code += reg_get_f64(r3) >= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R3_R5: // <op> <u2 op offset>
            code += reg_get_f64(r3) >= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R3_R6: // <op> <u2 op offset>
            code += reg_get_f64(r3) >= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R3_R7: // <op> <u2 op offset>
            code += reg_get_f64(r3) >= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R4_R0: // <op> <u2 op offset>
            code += reg_get_f64(r4) >= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R4_R1: // <op> <u2 op offset>
            code += reg_get_f64(r4) >= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R4_R2: // <op> <u2 op offset>
            code += reg_get_f64(r4) >= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R4_R3: // <op> <u2 op offset>
            code += reg_get_f64(r4) >= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R4_R4: // <op> <u2 op offset>
            code += reg_get_f64(r4) >= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R4_R5: // <op> <u2 op offset>
            code += reg_get_f64(r4) >= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R4_R6: // <op> <u2 op offset>
            code += reg_get_f64(r4) >= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R4_R7: // <op> <u2 op offset>
            code += reg_get_f64(r4) >= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R5_R0: // <op> <u2 op offset>
            code += reg_get_f64(r5) >= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R5_R1: // <op> <u2 op offset>
            code += reg_get_f64(r5) >= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R5_R2: // <op> <u2 op offset>
            code += reg_get_f64(r5) >= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R5_R3: // <op> <u2 op offset>
            code += reg_get_f64(r5) >= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R5_R4: // <op> <u2 op offset>
            code += reg_get_f64(r5) >= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R5_R5: // <op> <u2 op offset>
            code += reg_get_f64(r5) >= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R5_R6: // <op> <u2 op offset>
            code += reg_get_f64(r5) >= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R5_R7: // <op> <u2 op offset>
            code += reg_get_f64(r5) >= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R6_R0: // <op> <u2 op offset>
            code += reg_get_f64(r6) >= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R6_R1: // <op> <u2 op offset>
            code += reg_get_f64(r6) >= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R6_R2: // <op> <u2 op offset>
            code += reg_get_f64(r6) >= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R6_R3: // <op> <u2 op offset>
            code += reg_get_f64(r6) >= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R6_R4: // <op> <u2 op offset>
            code += reg_get_f64(r6) >= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R6_R5: // <op> <u2 op offset>
            code += reg_get_f64(r6) >= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R6_R6: // <op> <u2 op offset>
            code += reg_get_f64(r6) >= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R6_R7: // <op> <u2 op offset>
            code += reg_get_f64(r6) >= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R7_R0: // <op> <u2 op offset>
            code += reg_get_f64(r7) >= reg_get_f64(r0) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R7_R1: // <op> <u2 op offset>
            code += reg_get_f64(r7) >= reg_get_f64(r1) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R7_R2: // <op> <u2 op offset>
            code += reg_get_f64(r7) >= reg_get_f64(r2) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R7_R3: // <op> <u2 op offset>
            code += reg_get_f64(r7) >= reg_get_f64(r3) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R7_R4: // <op> <u2 op offset>
            code += reg_get_f64(r7) >= reg_get_f64(r4) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R7_R5: // <op> <u2 op offset>
            code += reg_get_f64(r7) >= reg_get_f64(r5) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R7_R6: // <op> <u2 op offset>
            code += reg_get_f64(r7) >= reg_get_f64(r6) ? *(code + 1) : 2; goto Next;
        case OpCode::BgeF8_R7_R7: // <op> <u2 op offset>
            code += reg_get_f64(r7) >= reg_get_f64(r7) ? *(code + 1) : 2; goto Next;
        default: std::unreachable();
}

Ret:
    regs->r0 = r0;
    regs->r1 = r1;
    regs->r2 = r2;
    regs->r3 = r3;
    regs->r4 = r4;
    regs->r5 = r5;
    regs->r6 = r6;
    regs->r7 = r7;
}
